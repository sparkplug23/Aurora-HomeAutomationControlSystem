// File contains the formation of pages, while "mWebServer" contains all parsing and commands
// Mostly for refactoring

#include "mWebServer.h"

#ifdef USE_MODULE_CORE_WEBSERVER



const uint8_t PAGE_ROOT[] PROGMEM = {
  0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xdd, 0xbd, 0x69, 0x77, 0xe2, 0x48,
  0xd2, 0x28, 0xfc, 0x7d, 0x7e, 0x85, 0x8a, 0x7a, 0xa6, 0x81, 0x31, 0x36, 0xbb, 0x0b, 0xdb, 0xe5,
  0x9a, 0x47, 0x02, 0xb1, 0xd9, 0x60, 0x76, 0x1b, 0xf7, 0xf4, 0xa9, 0x11, 0x92, 0x00, 0x81, 0x40,
  0x58, 0x12, 0x66, 0xf1, 0xf8, 0xfd, 0xed, 0x6f, 0x44, 0xa6, 0x76, 0x04, 0x76, 0x2f, 0x73, 0xce,
  0xbd, 0x57, 0x33, 0x5d, 0x48, 0xb9, 0x44, 0x46, 0x46, 0x46, 0x46, 0x46, 0x44, 0x46, 0xa6, 0x99,
  0xef, 0x5f, 0x4a, 0x0f, 0xc5, 0xde, 0xb0, 0xc5, 0x33, 0x53, 0x73, 0xa1, 0xfe, 0x60, 0xbe, 0xdb,
  0x3f, 0xb2, 0x20, 0xc1, 0xcf, 0x42, 0x36, 0x05, 0x66, 0x29, 0x2c, 0xe4, 0xdb, 0xc8, 0xab, 0x22,
  0x6f, 0x56, 0x9a, 0x6e, 0x46, 0x18, 0x51, 0x5b, 0x9a, 0xf2, 0xd2, 0xbc, 0x8d, 0x6c, 0x14, 0xc9,
  0x9c, 0xde, 0x4a, 0xf2, 0xab, 0x22, 0xca, 0xe7, 0xe4, 0x23, 0xc1, 0x28, 0x4b, 0xc5, 0x54, 0x04,
  0xf5, 0xdc, 0x10, 0x05, 0x55, 0xbe, 0x4d, 0x27, 0x98, 0x05, 0xa4, 0x2c, 0xd6, 0x0b, 0x3b, 0x21,
  0x62, 0x43, 0x15, 0xa7, 0x82, 0x6e, 0xc8, 0x00, 0x65, 0x6d, 0x8e, 0xcf, 0x0b, 0x11, 0x7f, 0x63,
  0xe6, 0x54, 0x5e, 0xc8, 0xe7, 0xa2, 0xa6, 0x6a, 0xba, 0xa7, 0xbd, 0xaf, 0x19, 0xf2, 0xb8, 0x20,
  0xec, 0x8c, 0x9d, 0x6c, 0x44, 0xac, 0x9a, 0xc2, 0x6a, 0xa5, 0xca, 0xe7, 0x0b, 0x6d, 0xa4, 0xc0,
  0xcf, 0x46, 0x1e, 0x9d, 0x43, 0xc2, 0xb9, 0x28, 0xac, 0x84, 0x91, 0x2a, 0x63, 0x45, 0x55, 0x59,
  0xce, 0x19, 0x5d, 0x56, 0x6f, 0x23, 0xc6, 0x14, 0x7a, 0x23, 0xae, 0x4d, 0x46, 0x01, 0x38, 0x11,
  0x66, 0xaa, 0xcb, 0xe3, 0xdb, 0x88, 0x24, 0x98, 0xc2, 0xb5, 0xb2, 0x10, 0x26, 0x72, 0x72, 0x7b,
  0x8e, 0x19, 0x37, 0x23, 0xc1, 0x90, 0x2f, 0x73, 0x09, 0x96, 0x65, 0x39, 0x96, 0xe5, 0x59, 0x1e,
  0xfe, 0xc5, 0xdf, 0x0a, 0x5b, 0xac, 0xe0, 0x5b, 0x79, 0x02, 0xff, 0xd4, 0xd4, 0x76, 0x6f, 0x2e,
  0x36, 0x8b, 0x53, 0xed, 0x0e, 0xd3, 0x4a, 0x7d, 0xb5, 0xd6, 0x29, 0xd7, 0xf0, 0xb5, 0x4d, 0x4b,
  0x4f, 0x48, 0xd9, 0x6a, 0xb2, 0x95, 0x1c, 0x62, 0x0a, 0x9f, 0xae, 0x77, 0xf8, 0x72, 0xff, 0xa1,
  0x96, 0x9e, 0x41, 0x52, 0xb2, 0xb5, 0x79, 0xd8, 0x4e, 0x9a, 0x15, 0x99, 0xed, 0x37, 0xb6, 0xfc,
  0x55, 0xe5, 0x52, 0x6c, 0x17, 0xef, 0x4a, 0x8f, 0xec, 0x74, 0xc5, 0x96, 0x9e, 0x33, 0xe3, 0x42,
  0xab, 0x31, 0xe3, 0xba, 0xd9, 0xf6, 0x63, 0xaa, 0xd0, 0xbe, 0xcb, 0xa4, 0xee, 0x84, 0xe7, 0x62,
  0x66, 0x32, 0x2e, 0x5e, 0x4d, 0x8b, 0xcb, 0x17, 0x6d, 0xad, 0x35, 0x27, 0x6c, 0x67, 0x32, 0xfc,
  0xb6, 0x6f, 0x6c, 0xd9, 0x5d, 0x53, 0xed, 0x4b, 0xed, 0xaa, 0xfa, 0xa4, 0xb0, 0xea, 0x43, 0xa6,
  0x51, 0x62, 0x4b, 0x97, 0x59, 0x7e, 0xf0, 0xd2, 0xac, 0xb2, 0x72, 0x8a, 0x25, 0x88, 0xa8, 0xe5,
  0xde, 0xbc, 0xbb, 0x6e, 0x2f, 0x8a, 0x45, 0xa4, 0x85, 0xa9, 0x98, 0xaa, 0xfc, 0xa3, 0xc4, 0x0f,
  0x6a, 0x45, 0xbe, 0xc9, 0x36, 0xf8, 0xef, 0x49, 0x9a, 0xc2, 0x7c, 0x37, 0x44, 0x5d, 0x59, 0x99,
  0x3f, 0xc6, 0xeb, 0xa5, 0x68, 0x2a, 0xda, 0x92, 0x19, 0xcb, 0xb2, 0x34, 0x12, 0xc4, 0x79, 0x2c,
  0xfe, 0xf6, 0xfe, 0x3d, 0x69, 0xe5, 0x42, 0x31, 0x73, 0x87, 0xc5, 0x25, 0xe5, 0x35, 0x31, 0x56,
  0x64, 0x55, 0x82, 0xf1, 0x4c, 0x28, 0xcb, 0xd5, 0xda, 0x7c, 0x63, 0x56, 0x82, 0x24, 0x29, 0xcb,
  0xc9, 0x75, 0x7e, 0xb5, 0xbd, 0x19, 0xc3, 0x38, 0x9d, 0x1b, 0xca, 0x5e, 0xbe, 0x4e, 0xcb, 0x8b,
  0x9b, 0x77, 0xbb, 0xe8, 0x1b, 0x83, 0x20, 0x27, 0xba, 0xb6, 0x5e, 0x4a, 0xd7, 0x5f, 0x53, 0xe4,
  0xb9, 0x79, 0xb7, 0xea, 0x13, 0x76, 0xba, 0x4e, 0xa7, 0x52, 0x7f, 0xbf, 0x19, 0x69, 0x5b, 0xac,
  0x8d, 0xd0, 0x46, 0x9a, 0x2e, 0xc9, 0xfa, 0x39, 0xa4, 0xdc, 0xe0, 0xe0, 0xce, 0x15, 0xf3, 0xfc,
  0x48, 0xee, 0x42, 0xdb, 0x1f, 0xc9, 0x0a, 0x69, 0x94, 0x30, 0xda, 0xf5, 0xd7, 0x31, 0x79, 0x2c,
  0x14, 0x7e, 0x35, 0x77, 0x2b, 0xf9, 0x56, 0x9c, 0xca, 0xe2, 0x1c, 0x6a, 0xfd, 0x96, 0xf0, 0x24,
  0xea, 0x82, 0xa4, 0x68, 0xbf, 0x39, 0x38, 0x42, 0x9f, 0x16, 0x82, 0x3e, 0x51, 0x96, 0xe7, 0xba,
  0x32, 0x99, 0x9a, 0xd7, 0x97, 0xd0, 0xe5, 0x57, 0x59, 0x37, 0x15, 0xe0, 0xf8, 0x73, 0x41, 0x55,
  0x26, 0xcb, 0xeb, 0xf3, 0x34, 0xa4, 0xbd, 0x1b, 0xb2, 0x2a, 0x8b, 0x27, 0x69, 0xe3, 0xed, 0xf5,
  0x87, 0x68, 0x9a, 0x92, 0x0b, 0x2a, 0x85, 0xf0, 0x2f, 0x46, 0x6b, 0xd3, 0xd4, 0x96, 0x53, 0x20,
  0x2c, 0xe9, 0xee, 0x75, 0xea, 0xc6, 0xea, 0x37, 0x62, 0xbc, 0x36, 0xae, 0x53, 0x17, 0x59, 0x1d,
  0x5a, 0xf1, 0x82, 0xce, 0x49, 0x05, 0xe9, 0xca, 0x01, 0x6d, 0x35, 0x04, 0x93, 0x44, 0x3e, 0x9f,
  0xca, 0xa4, 0x37, 0x99, 0x8b, 0x1c, 0xd6, 0xf1, 0xe0, 0x79, 0x91, 0xd1, 0xfd, 0xa8, 0xda, 0x43,
  0x61, 0xea, 0xc2, 0xd2, 0x50, 0x90, 0x61, 0xce, 0xa5, 0xb5, 0x2e, 0xe0, 0x0b, 0x34, 0x99, 0x33,
  0x6e, 0x8e, 0x66, 0x88, 0x6b, 0xdd, 0x80, 0x76, 0x57, 0x9a, 0x02, 0x33, 0x59, 0x77, 0x7b, 0x70,
  0x3d, 0xd5, 0x80, 0x82, 0x7e, 0x06, 0xc9, 0xa6, 0xf3, 0x57, 0xf9, 0x11, 0x96, 0xd1, 0x65, 0xc9,
  0x9f, 0x25, 0xe5, 0xb2, 0xf9, 0x6c, 0xde, 0xca, 0x0a, 0xab, 0x7b, 0x95, 0x4d, 0x8f, 0xd3, 0x63,
  0x2c, 0x30, 0xd1, 0x97, 0xfe, 0xac, 0xdc, 0x37, 0x31, 0x73, 0x79, 0x69, 0x65, 0x85, 0xd5, 0xcd,
  0x0b, 0xc2, 0xf8, 0x92, 0xd4, 0xd5, 0x74, 0xc1, 0x9f, 0x25, 0x8b, 0xdf, 0xa4, 0xb4, 0x9d, 0x15,
  0x56, 0xf7, 0x9b, 0x90, 0x4b, 0xa7, 0xd3, 0x58, 0x60, 0xac, 0xe9, 0x8b, 0xb4, 0xcd, 0x32, 0xd9,
  0xec, 0xdf, 0x7d, 0x34, 0x4e, 0x5f, 0x7c, 0x03, 0x92, 0x32, 0xef, 0x00, 0xde, 0x94, 0xb7, 0xe6,
  0xb9, 0x24, 0x8b, 0x9a, 0x45, 0xa6, 0xa5, 0xb6, 0x94, 0xa1, 0xfe, 0xea, 0x8d, 0x19, 0xab, 0x9a,
  0x60, 0x5e, 0xab, 0xf2, 0xd8, 0xbc, 0x21, 0x85, 0x28, 0x67, 0x91, 0xef, 0xf7, 0x8b, 0x17, 0x3b,
  0x9f, 0xb0, 0xa0, 0xb7, 0x00, 0x4d, 0x78, 0xbf, 0x50, 0x96, 0x63, 0xed, 0xa7, 0xae, 0x6d, 0xde,
  0x60, 0xba, 0x1a, 0x2b, 0x55, 0xd8, 0x5d, 0x9b, 0x28, 0x13, 0xcf, 0x45, 0x59, 0x55, 0x6f, 0x3c,
  0x1c, 0xc9, 0x20, 0x57, 0x06, 0x1b, 0xb0, 0xab, 0x8c, 0x54, 0x4d, 0x9c, 0xdf, 0x6c, 0x80, 0xa9,
  0xce, 0x81, 0xd4, 0xc2, 0xfc, 0x9a, 0xfc, 0x0b, 0x25, 0x55, 0x2f, 0x83, 0xe4, 0x09, 0x33, 0xae,
  0x40, 0xde, 0x9b, 0xa6, 0xec, 0x23, 0xc8, 0x48, 0x85, 0xf7, 0x1b, 0xab, 0xd7, 0xd9, 0x94, 0xb7,
  0xdc, 0x4f, 0x22, 0x7b, 0x3e, 0x5b, 0xda, 0xcf, 0xf9, 0x36, 0x7a, 0xca, 0x92, 0x50, 0x95, 0x62,
  0xf9, 0x7e, 0xa1, 0x4f, 0x46, 0x3f, 0xa1, 0xbc, 0x4f, 0x98, 0xd8, 0x5c, 0x4d, 0xa0, 0x61, 0x37,
  0x05, 0xe8, 0xc1, 0x1b, 0xac, 0x08, 0x04, 0x75, 0x42, 0x6d, 0x5a, 0xfa, 0xaa, 0xf0, 0xf7, 0x1b,
  0xdf, 0x4c, 0xf5, 0x0d, 0x2c, 0xb2, 0x13, 0x8c, 0xbc, 0x35, 0x6d, 0x72, 0xa3, 0xd1, 0x37, 0x19,
  0x79, 0x08, 0x48, 0x7a, 0xae, 0x0a, 0x23, 0x19, 0xda, 0xa4, 0x22, 0xe1, 0x3a, 0xc5, 0xa4, 0x98,
  0x73, 0x24, 0x6b, 0xca, 0x26, 0x32, 0x08, 0x21, 0xe0, 0xf1, 0xc5, 0x75, 0x0e, 0x61, 0xc2, 0xb8,
  0xc0, 0x22, 0x63, 0xc0, 0xe8, 0x21, 0xf9, 0xc6, 0xc2, 0x42, 0x51, 0x77, 0xd7, 0xd1, 0xc7, 0x1a,
  0x26, 0x46, 0x2d, 0x9a, 0xa2, 0x90, 0x05, 0xcc, 0xf4, 0x85, 0xe0, 0xa5, 0x72, 0x06, 0xeb, 0xfb,
  0x98, 0x28, 0x9c, 0x0c, 0x16, 0x1e, 0xe7, 0x19, 0xc4, 0x81, 0xc9, 0x11, 0x4c, 0x60, 0x4d, 0xa6,
  0xeb, 0xf5, 0x75, 0x2e, 0x45, 0xb1, 0xd8, 0xe8, 0xb0, 0x4e, 0x22, 0xf7, 0xae, 0x34, 0x3a, 0x51,
  0xaf, 0xc7, 0xca, 0x56, 0x96, 0x1c, 0xc6, 0x40, 0xf9, 0x65, 0x6a, 0x2b, 0x90, 0x28, 0xc8, 0x0f,
  0xf0, 0x43, 0x45, 0x5d, 0xca, 0x2b, 0x4b, 0x5e, 0x05, 0x3d, 0x76, 0x7e, 0x2e, 0x9e, 0x9b, 0xa3,
  0xf8, 0xcd, 0xfe, 0x5c, 0x59, 0x4a, 0xf2, 0x16, 0x90, 0x62, 0x70, 0xc1, 0xa0, 0xeb, 0x84, 0xbd,
  0x5e, 0xfc, 0xaf, 0x2d, 0x30, 0xe6, 0xf2, 0x6e, 0xac, 0xc3, 0xb2, 0x6d, 0x30, 0x63, 0x41, 0x92,
  0x15, 0x98, 0x99, 0x63, 0x5d, 0x5b, 0xbc, 0x59, 0x04, 0x4a, 0xdd, 0x68, 0x2b, 0x41, 0x54, 0xcc,
  0x1d, 0xbc, 0xbd, 0x9b, 0x9a, 0x9d, 0x4c, 0x18, 0xc1, 0xce, 0x81, 0xb9, 0xf5, 0xfe, 0xbf, 0x7f,
  0x11, 0x98, 0x70, 0xac, 0x34, 0x5c, 0x8d, 0xbc, 0xf0, 0x82, 0x15, 0x5d, 0x90, 0xbe, 0x96, 0x82,
  0x68, 0xfd, 0x71, 0x38, 0x16, 0x6b, 0x88, 0xb2, 0x9f, 0x4b, 0x22, 0x94, 0x4b, 0x22, 0x37, 0x86,
  0x2e, 0x5e, 0xaf, 0x75, 0x35, 0x46, 0x74, 0x17, 0xd4, 0x7f, 0x60, 0xe1, 0xc1, 0x21, 0x04, 0x0d,
  0x86, 0x94, 0xdf, 0x68, 0xb0, 0x5a, 0xd8, 0xea, 0x16, 0xd1, 0xb6, 0x6c, 0xa5, 0x46, 0x4a, 0x5d,
  0x55, 0x3a, 0x13, 0x96, 0xa8, 0x34, 0x2c, 0x67, 0xc0, 0x3f, 0x06, 0x79, 0xad, 0xe8, 0x6d, 0x4b,
  0x75, 0x39, 0xf6, 0x70, 0xad, 0xfe, 0xae, 0xb0, 0xc3, 0x97, 0x22, 0xa9, 0x40, 0xd2, 0x26, 0xa5,
  0x7c, 0x8a, 0xad, 0x3d, 0x36, 0xcd, 0xe1, 0x13, 0x51, 0x8d, 0x34, 0x4c, 0xec, 0xe0, 0x6b, 0xbf,
  0x33, 0xe6, 0x26, 0xdd, 0xce, 0x73, 0xa6, 0xbc, 0x17, 0xf1, 0xfb, 0x65, 0x83, 0xff, 0x12, 0x0d,
  0x89, 0xd4, 0xe7, 0xb8, 0xe5, 0xa8, 0xaa, 0x2e, 0xf0, 0xd3, 0xc4, 0x9a, 0x8f, 0xd0, 0x38, 0x37,
  0x98, 0x2f, 0xf3, 0x4f, 0x2f, 0xc9, 0xca, 0x54, 0x1d, 0x92, 0xef, 0xc9, 0x10, 0x8b, 0x36, 0x51,
  0xe1, 0x2a, 0x41, 0x0b, 0x97, 0x8d, 0xb4, 0x80, 0x79, 0x90, 0x55, 0x29, 0x13, 0xa4, 0xe6, 0xf8,
  0x4f, 0x9d, 0x15, 0x87, 0x6c, 0xfa, 0x4a, 0x1b, 0x3d, 0x75, 0x72, 0xf0, 0x39, 0x94, 0x30, 0xf1,
  0x0e, 0x2b, 0x15, 0xb5, 0x25, 0xcb, 0xf6, 0xb2, 0x8b, 0xed, 0xeb, 0x30, 0xc3, 0x03, 0xbc, 0x39,
  0x41, 0x65, 0x80, 0x59, 0xe5, 0xe7, 0xcd, 0xa2, 0x62, 0x4c, 0x46, 0x8f, 0xe5, 0x1c, 0x26, 0x56,
  0x9e, 0x48, 0xe7, 0x27, 0x16, 0x92, 0x29, 0xb6, 0x9c, 0x5e, 0x0f, 0x1f, 0xd3, 0x2a, 0x7c, 0x3e,
  0xab, 0xa4, 0x3f, 0xd8, 0xb5, 0xf2, 0x5d, 0xbb, 0x7f, 0xdf, 0xce, 0x3d, 0x71, 0xaf, 0x62, 0x16,
  0xf1, 0xd3, 0x27, 0xbe, 0x4e, 0x91, 0x2e, 0x36, 0xa0, 0xa1, 0x0a, 0x64, 0xf6, 0x11, 0x89, 0x67,
  0xd6, 0xc0, 0xc4, 0x62, 0x8b, 0x5d, 0xcd, 0x8b, 0x7b, 0xcc, 0x96, 0x0d, 0xb6, 0xb1, 0xe1, 0xeb,
  0xa1, 0x24, 0xee, 0x84, 0x53, 0x1e, 0x31, 0xcb, 0x73, 0x6c, 0xa9, 0x91, 0x2c, 0xa4, 0xa0, 0x72,
  0x09, 0xff, 0xef, 0x64, 0x78, 0x9e, 0x9a, 0xfd, 0x42, 0xf1, 0xc0, 0x7f, 0x44, 0x54, 0x45, 0xc9,
  0x37, 0xb7, 0xc1, 0x5f, 0x32, 0xee, 0x55, 0x4c, 0xec, 0x22, 0xea, 0x5c, 0x05, 0xb3, 0xb9, 0x36,
  0x8e, 0x26, 0xcf, 0xd6, 0x1e, 0xd8, 0x6c, 0xae, 0xb4, 0x9c, 0xb4, 0x1e, 0xb8, 0x46, 0xae, 0x96,
  0x9c, 0x68, 0xeb, 0xe2, 0x2a, 0x77, 0xff, 0x3a, 0x49, 0x3f, 0x94, 0x56, 0xb9, 0xce, 0x68, 0xfa,
  0x20, 0xf3, 0xc9, 0xdc, 0xd3, 0x7e, 0xaa, 0xac, 0x6b, 0x66, 0x6e, 0x96, 0x55, 0xb4, 0xf5, 0xdd,
  0x22, 0xa7, 0xb7, 0x94, 0xed, 0xfa, 0x7e, 0x9e, 0xdb, 0x3d, 0xcd, 0x1a, 0x67, 0xcd, 0x46, 0x2e,
  0x5f, 0x9a, 0xa9, 0x72, 0xeb, 0x31, 0x97, 0xac, 0xce, 0x8b, 0x72, 0xbb, 0x9d, 0x4c, 0x66, 0x93,
  0xc9, 0x8d, 0x85, 0xdf, 0x71, 0xf8, 0x1a, 0xc2, 0x6f, 0x9e, 0x1d, 0x85, 0x3f, 0xb3, 0xe0, 0xdf,
  0xe7, 0x72, 0xc9, 0x99, 0xfa, 0x70, 0x00, 0x9f, 0x4b, 0x9e, 0x35, 0xc6, 0xfb, 0x4e, 0xb2, 0x51,
  0x2d, 0x68, 0xe3, 0xf5, 0xf6, 0x2a, 0x5f, 0xcd, 0x88, 0xe3, 0x61, 0xe7, 0xaa, 0x5d, 0xdd, 0x4f,
  0xc6, 0xf5, 0xce, 0xb7, 0x7c, 0xd5, 0x9c, 0xcb, 0x69, 0xee, 0x72, 0x58, 0xd5, 0x0c, 0xe9, 0xb2,
  0x93, 0x15, 0xaa, 0x4f, 0x43, 0x49, 0xdc, 0xa6, 0x97, 0xd5, 0x41, 0x5f, 0x7a, 0xe8, 0xec, 0xf3,
  0xd5, 0x87, 0x8d, 0x98, 0xee, 0xec, 0x7a, 0x55, 0x60, 0xa6, 0x3e, 0xb7, 0xc9, 0x54, 0xb9, 0x82,
  0x08, 0xa3, 0x58, 0x22, 0xf4, 0xfb, 0xaf, 0x3e, 0x00, 0x7f, 0x9c, 0x4c, 0xb2, 0x6c, 0x21, 0x30,
  0x9e, 0x30, 0x9a, 0x25, 0x31, 0x6f, 0xa5, 0x71, 0xbe, 0x2a, 0x30, 0x74, 0xcd, 0xfd, 0x9c, 0x73,
  0xea, 0xbb, 0x0f, 0x72, 0x61, 0xf6, 0xa1, 0x6d, 0xa5, 0x4d, 0x4a, 0x83, 0x64, 0x81, 0x2d, 0xdd,
  0x6d, 0xee, 0x59, 0x9c, 0x2a, 0x3c, 0xd4, 0x03, 0x2b, 0x64, 0xca, 0x77, 0xda, 0x95, 0xda, 0x8e,
  0x57, 0xea, 0x13, 0xb0, 0x03, 0x7a, 0xfd, 0x7d, 0x73, 0xdf, 0x78, 0x02, 0x9e, 0x44, 0xb8, 0xbb,
  0x5a, 0xf2, 0xf2, 0xa5, 0xb6, 0xaf, 0x15, 0xef, 0x92, 0x99, 0x17, 0x55, 0xd1, 0x1f, 0xef, 0x56,
  0xc3, 0x01, 0xc0, 0x39, 0x63, 0x8b, 0x8d, 0x5d, 0x63, 0x72, 0x37, 0x1b, 0x0c, 0xfa, 0xfa, 0xdd,
  0x06, 0xe8, 0xd2, 0x7c, 0x02, 0xb2, 0x37, 0x74, 0x14, 0x1f, 0xc5, 0x36, 0xfb, 0xc0, 0x72, 0x30,
  0x55, 0x8b, 0xfd, 0x4e, 0xad, 0xc3, 0xf7, 0x39, 0xa5, 0x31, 0xad, 0x29, 0xc3, 0x1e, 0xdf, 0xe5,
  0x3b, 0xb5, 0x6e, 0x7f, 0x5f, 0xee, 0xf2, 0xe9, 0xc6, 0x5e, 0xdc, 0x43, 0x5f, 0x8a, 0x6c, 0xa9,
  0x36, 0x4b, 0xbe, 0x68, 0xb3, 0x86, 0xda, 0xe7, 0x06, 0xaf, 0x97, 0x2f, 0x6c, 0xbf, 0xf8, 0x98,
  0x14, 0x5e, 0x1e, 0xef, 0x4c, 0x6f, 0x3b, 0xd5, 0x87, 0x24, 0xe4, 0xbf, 0x5c, 0x0d, 0x06, 0x83,
  0xae, 0x41, 0xfb, 0x5f, 0xe7, 0xd9, 0x72, 0xfb, 0x81, 0x65, 0x55, 0x1e, 0xf9, 0x95, 0xad, 0xb7,
  0xf9, 0x27, 0xb6, 0x2b, 0x66, 0xd9, 0x21, 0xcb, 0x6d, 0x4b, 0xfb, 0x33, 0xf6, 0xa1, 0x50, 0x98,
  0xb5, 0xab, 0x7c, 0xab, 0x95, 0x63, 0xbf, 0xed, 0x2d, 0x86, 0x9b, 0x70, 0x83, 0xe4, 0x37, 0xbe,
  0xf4, 0x82, 0xfd, 0x07, 0x24, 0xdb, 0x48, 0xcb, 0x5e, 0xed, 0xa9, 0x3a, 0xe1, 0x9f, 0xca, 0xd3,
  0x3e, 0x0c, 0x73, 0x8e, 0xe3, 0x36, 0xc3, 0x16, 0xc0, 0x59, 0xd4, 0x77, 0x39, 0xae, 0xbe, 0x1b,
  0xa6, 0x9b, 0x25, 0xf1, 0x8c, 0xed, 0x89, 0x99, 0xc6, 0xbe, 0xf6, 0x58, 0xde, 0xe7, 0xb8, 0xc6,
  0xa6, 0x91, 0x69, 0xc2, 0x6f, 0x73, 0x0f, 0x79, 0xc5, 0xe1, 0xac, 0x36, 0x19, 0x56, 0x6b, 0x50,
  0xb6, 0xb6, 0xab, 0x55, 0xca, 0x9d, 0xb6, 0x05, 0xab, 0xc0, 0x01, 0x1d, 0xb6, 0x77, 0x3b, 0x23,
  0xc9, 0x4f, 0x1b, 0x42, 0x25, 0x7d, 0x55, 0x02, 0x63, 0xf0, 0xac, 0xa5, 0xd6, 0xf9, 0x76, 0xba,
  0x30, 0xaa, 0x4c, 0x1b, 0xdd, 0xd6, 0xce, 0xd0, 0x1b, 0xbd, 0xa9, 0x5a, 0x03, 0x8b, 0xed, 0xe1,
  0x7e, 0xdb, 0x68, 0xed, 0xf3, 0xc3, 0x0a, 0x37, 0x1d, 0xb4, 0x4b, 0xe5, 0x47, 0x7e, 0xc0, 0x76,
  0x06, 0xb3, 0x32, 0x3b, 0x00, 0xab, 0xee, 0xb1, 0x94, 0x4b, 0xf6, 0xd8, 0x76, 0x71, 0xc3, 0xd5,
  0xba, 0xed, 0xa2, 0xf1, 0xd2, 0x98, 0x6d, 0xf2, 0x0f, 0xd5, 0x7e, 0xb2, 0xcd, 0x1b, 0xb9, 0x07,
  0xde, 0x48, 0xb6, 0xab, 0xfd, 0xdc, 0x43, 0x6f, 0xb3, 0xbb, 0x53, 0x4c, 0x96, 0x9f, 0xd6, 0x36,
  0x77, 0xdd, 0xf9, 0x26, 0xf9, 0xa8, 0xf2, 0x0f, 0xfb, 0xd5, 0xf2, 0x7e, 0x57, 0x58, 0xb7, 0xcb,
  0xc3, 0xfc, 0x7d, 0x71, 0x93, 0x1f, 0xcc, 0xd9, 0xf5, 0xfd, 0xee, 0x6a, 0xf9, 0x30, 0x33, 0x79,
  0x0e, 0xe9, 0x5e, 0x2b, 0xc1, 0x78, 0x3d, 0x10, 0x71, 0x0f, 0x8c, 0x93, 0x41, 0x9a, 0xf2, 0xdd,
  0x46, 0xa7, 0xb1, 0x15, 0x1f, 0xcb, 0xdb, 0x1c, 0x57, 0xde, 0x0e, 0x07, 0x65, 0x56, 0x7c, 0x60,
  0xdb, 0x22, 0xf0, 0x46, 0x6d, 0x79, 0x3f, 0xe1, 0x97, 0xf5, 0x59, 0x3f, 0x65, 0xf5, 0x3d, 0x5b,
  0x06, 0x5a, 0x39, 0xfd, 0x9d, 0x35, 0x76, 0x1e, 0x9a, 0x2c, 0x59, 0xc5, 0x7c, 0x1c, 0x18, 0xb9,
  0x71, 0xa5, 0x33, 0x9f, 0x15, 0x27, 0x73, 0xb9, 0xba, 0x50, 0x2b, 0x9d, 0x01, 0xd7, 0xee, 0xf4,
  0x9f, 0x57, 0xd5, 0x69, 0xae, 0x5e, 0x54, 0x1a, 0xcf, 0x95, 0x4e, 0xa1, 0x00, 0x7d, 0x19, 0x96,
  0xd3, 0x7c, 0xb6, 0x39, 0xcb, 0x9d, 0x35, 0x67, 0x52, 0xa7, 0xbc, 0x9d, 0x14, 0x1a, 0x30, 0x36,
  0x64, 0xac, 0xd3, 0x29, 0xa1, 0x56, 0x2c, 0xdf, 0x41, 0x7f, 0x8c, 0x3e, 0x3f, 0xa8, 0x08, 0x9d,
  0x9c, 0x5c, 0x9d, 0xe6, 0x57, 0x9d, 0xf9, 0xa0, 0x7d, 0x5f, 0x9c, 0xaf, 0xba, 0x0a, 0x3f, 0xa9,
  0xcc, 0x36, 0x2b, 0x99, 0x1f, 0xda, 0x75, 0x2d, 0x58, 0xf9, 0x8a, 0x5c, 0x9c, 0xdb, 0xe3, 0x9d,
  0x4a, 0x5e, 0x0e, 0x4b, 0x33, 0xf6, 0x5e, 0x60, 0xf9, 0x1c, 0xfb, 0x88, 0x22, 0xae, 0x23, 0xca,
  0x6c, 0xbb, 0xc0, 0x95, 0x26, 0xfc, 0x2b, 0xdb, 0xce, 0x71, 0xa5, 0x0d, 0xff, 0xc0, 0x76, 0x0d,
  0x0e, 0xf8, 0xf3, 0x95, 0xed, 0xc2, 0x98, 0x6f, 0xc4, 0x4a, 0x5d, 0x29, 0x70, 0xf5, 0xd9, 0x30,
  0x89, 0xdf, 0xcd, 0x5e, 0x3b, 0xd3, 0xdc, 0x89, 0x6b, 0xb6, 0x57, 0xe0, 0x5a, 0x13, 0x7e, 0xcc,
  0xf6, 0x72, 0x5c, 0x6b, 0xc3, 0x03, 0x4f, 0x18, 0x5c, 0x63, 0x3a, 0x1c, 0xb3, 0x1d, 0xa0, 0xc3,
  0x5e, 0xcc, 0xe0, 0x98, 0x97, 0x27, 0xc0, 0x3b, 0x1d, 0x42, 0x97, 0x0a, 0xb7, 0xe9, 0xef, 0x9a,
  0x40, 0xaf, 0xba, 0xd2, 0x50, 0x38, 0xe0, 0xad, 0xf2, 0xa4, 0xb1, 0x1d, 0xb4, 0x87, 0x25, 0xae,
  0x5c, 0x2b, 0x95, 0x36, 0xd2, 0xa2, 0xb4, 0x6b, 0xf4, 0xa0, 0xed, 0xfb, 0xe2, 0x5d, 0xbb, 0x56,
  0xdc, 0xf0, 0x6d, 0x7e, 0x57, 0x6b, 0x3f, 0x4f, 0xc4, 0x07, 0xcc, 0x67, 0x37, 0x83, 0x27, 0x76,
  0xc2, 0x17, 0xd9, 0xc1, 0xb0, 0xc2, 0x6e, 0x3a, 0x5d, 0x76, 0x53, 0xa8, 0x3e, 0x4f, 0x0a, 0x33,
  0x7e, 0x53, 0xe0, 0x8a, 0x1b, 0x65, 0x5e, 0x64, 0x0d, 0x8e, 0xe7, 0x1a, 0x0a, 0x5f, 0x19, 0x56,
  0x4b, 0x13, 0xcc, 0x6f, 0x94, 0x07, 0x9b, 0x1a, 0xc7, 0xb6, 0xab, 0x67, 0xfb, 0xfd, 0xd5, 0xe8,
  0x71, 0x5f, 0x48, 0x3e, 0xa6, 0x0d, 0xae, 0x02, 0x60, 0x4b, 0x1b, 0xb9, 0x09, 0xb8, 0x40, 0x33,
  0xf0, 0x4f, 0x65, 0x53, 0x2b, 0x4e, 0xb4, 0xda, 0x88, 0x9d, 0xf4, 0x4b, 0xc5, 0x79, 0x91, 0x6b,
  0x63, 0x5e, 0x81, 0xef, 0xb0, 0x5a, 0x1f, 0xd2, 0xfb, 0xc5, 0xf9, 0xef, 0x2c, 0xbf, 0xac, 0x8f,
  0x5a, 0x76, 0x7b, 0x38, 0xc5, 0x36, 0xac, 0x9e, 0xcc, 0xb5, 0x4b, 0xe9, 0x76, 0x63, 0xc0, 0x72,
  0x39, 0x58, 0x9a, 0xb8, 0x2e, 0xf2, 0x55, 0x63, 0x0a, 0x34, 0xef, 0x00, 0x5f, 0x75, 0x1b, 0x29,
  0x6b, 0x5e, 0xc1, 0xbc, 0xa1, 0xbc, 0x85, 0x69, 0x16, 0xef, 0xec, 0xf9, 0x6d, 0xff, 0x89, 0xdb,
  0x89, 0xd5, 0xfa, 0x5e, 0x4c, 0x03, 0xbf, 0xc1, 0xdc, 0x1b, 0xee, 0x81, 0xc6, 0xc0, 0x87, 0xc3,
  0x2a, 0xbb, 0x77, 0xe6, 0xe9, 0xac, 0x59, 0x84, 0xf1, 0x80, 0x39, 0x0a, 0x7c, 0x09, 0xfd, 0xe7,
  0xab, 0x1c, 0xa6, 0xd9, 0xf3, 0x74, 0x53, 0x63, 0x5b, 0xb3, 0x61, 0xb6, 0xdf, 0x11, 0x87, 0x83,
  0x29, 0xdb, 0x79, 0x50, 0xc4, 0x25, 0xf0, 0xff, 0xb2, 0xbe, 0xd7, 0x3a, 0x7c, 0x79, 0x68, 0xf3,
  0x9b, 0x3e, 0xef, 0xed, 0x40, 0xbc, 0xec, 0x3a, 0xd5, 0x62, 0x3b, 0x09, 0xf9, 0xc9, 0x3a, 0xb7,
  0xd1, 0x87, 0x83, 0xe7, 0xc1, 0xa4, 0xd8, 0x56, 0x07, 0xc0, 0x6b, 0x42, 0xff, 0xb9, 0xdc, 0x2f,
  0xc3, 0x50, 0x2e, 0x80, 0x7f, 0xd5, 0xbe, 0x5a, 0xaf, 0x71, 0x83, 0xc1, 0x82, 0x2f, 0x0a, 0xdb,
  0xc9, 0x53, 0x1f, 0xda, 0x69, 0x29, 0x16, 0x4c, 0xce, 0x6a, 0xa3, 0x94, 0xcb, 0x34, 0xd3, 0xfc,
  0x53, 0xa5, 0x95, 0xdf, 0xcf, 0x9e, 0xf9, 0xc2, 0xa4, 0xc6, 0x16, 0xe6, 0xc3, 0x54, 0xb3, 0x59,
  0xe4, 0x8d, 0xd6, 0xbe, 0x60, 0xd4, 0x7a, 0xed, 0x26, 0x3b, 0x13, 0x2d, 0x38, 0x65, 0x7b, 0x2e,
  0xd8, 0x73, 0x63, 0x3a, 0x50, 0x1f, 0xd9, 0x7a, 0xb1, 0x4f, 0xe4, 0xfc, 0x60, 0x7c, 0x36, 0x60,
  0x2f, 0x8d, 0xe2, 0xe5, 0x06, 0xd6, 0xeb, 0x22, 0xaa, 0x3c, 0xfc, 0xee, 0x13, 0x73, 0x72, 0xcf,
  0xef, 0xc4, 0xec, 0xfd, 0x86, 0x07, 0x1e, 0x14, 0xab, 0x4d, 0xa0, 0xc3, 0x23, 0x9f, 0x7f, 0x90,
  0x8a, 0xbc, 0x52, 0x53, 0xca, 0xa9, 0xde, 0x3c, 0x3f, 0x7c, 0xec, 0xa7, 0x3d, 0xdf, 0xe9, 0x67,
  0xb3, 0x78, 0x36, 0x4e, 0xa9, 0xf5, 0x6e, 0x6a, 0x55, 0x78, 0x35, 0xd9, 0x7b, 0xdd, 0x29, 0x17,
  0xac, 0x67, 0x7d, 0x27, 0x07, 0x4f, 0x0f, 0x4a, 0x07, 0xa8, 0x35, 0xbd, 0xbb, 0xdb, 0x3f, 0xa6,
  0xe8, 0x78, 0xe7, 0xfb, 0x30, 0xde, 0xf7, 0x3a, 0xae, 0x34, 0x77, 0x6d, 0xa2, 0x3c, 0xaa, 0xd6,
  0x18, 0xe2, 0x18, 0xed, 0x71, 0xcc, 0x60, 0xde, 0x64, 0x61, 0x5d, 0x99, 0x36, 0x7b, 0x8d, 0x41,
  0xad, 0xd3, 0x9f, 0x71, 0xd6, 0xd8, 0x03, 0xff, 0xab, 0xfc, 0xae, 0xb1, 0xac, 0x6d, 0xc4, 0x19,
  0xbf, 0x6f, 0x94, 0x1a, 0x3b, 0xb1, 0x58, 0xef, 0x16, 0xcb, 0xe9, 0x5e, 0xf6, 0xf9, 0x8e, 0x67,
  0x9f, 0x06, 0x9d, 0xf6, 0xb6, 0xaa, 0xe4, 0xf9, 0xf2, 0x38, 0x37, 0x67, 0xbb, 0xab, 0x47, 0xf8,
  0xef, 0xaa, 0xb8, 0x65, 0xdb, 0x75, 0x98, 0xeb, 0x55, 0x96, 0xe7, 0x9e, 0x1a, 0xdc, 0xa0, 0xd1,
  0x30, 0x36, 0x03, 0x91, 0x1b, 0x8c, 0x72, 0xab, 0xf2, 0xeb, 0x40, 0x2e, 0xa7, 0x67, 0xd9, 0xc7,
  0xfb, 0xc7, 0x5a, 0xaa, 0x3e, 0x9f, 0x4c, 0x1b, 0xd9, 0x36, 0xac, 0x18, 0xcf, 0x8f, 0x83, 0xee,
  0x70, 0x5e, 0xef, 0x0f, 0xa7, 0x35, 0x98, 0xa3, 0xa3, 0x71, 0x8e, 0x85, 0xb1, 0x29, 0xb2, 0xad,
  0x6f, 0x8f, 0x6b, 0x22, 0x24, 0x1a, 0xec, 0x1d, 0xf2, 0xee, 0x15, 0xb0, 0x34, 0xcb, 0x8e, 0x60,
  0x8d, 0x65, 0xdb, 0x1b, 0xef, 0xba, 0x20, 0x56, 0xac, 0x75, 0x61, 0x56, 0x53, 0x28, 0xdf, 0xd5,
  0x41, 0xfe, 0x61, 0x9f, 0x9a, 0x53, 0xaf, 0xdc, 0x3b, 0xe0, 0xc9, 0xbe, 0x35, 0x66, 0x3d, 0x8b,
  0x87, 0xa1, 0x3e, 0xae, 0x27, 0xc3, 0x22, 0x5b, 0xe6, 0xea, 0xdd, 0x27, 0xed, 0xf5, 0x7e, 0x6b,
  0x8c, 0x40, 0x26, 0x5f, 0x76, 0xfb, 0x6a, 0xbb, 0xcf, 0xab, 0x75, 0x59, 0x29, 0xbc, 0x56, 0xb6,
  0xc6, 0xeb, 0x7d, 0x76, 0x55, 0xef, 0x0e, 0x58, 0xa3, 0xbe, 0x13, 0x2f, 0x61, 0xb2, 0xb5, 0xf9,
  0x9e, 0xb6, 0xac, 0xef, 0x36, 0xc1, 0xef, 0x74, 0x37, 0x65, 0xa4, 0x9b, 0x7d, 0xf3, 0x9e, 0xd5,
  0x58, 0xe0, 0xeb, 0xfe, 0xb7, 0x87, 0xd4, 0x73, 0xe5, 0x61, 0x6f, 0x0e, 0xa8, 0x2c, 0xf4, 0x7e,
  0xcf, 0xae, 0x2e, 0xb7, 0x81, 0xb9, 0xc0, 0x05, 0xbe, 0xd9, 0xf2, 0xa0, 0xbb, 0xef, 0x5b, 0x30,
  0x0d, 0x5b, 0xc9, 0xb0, 0xc7, 0x97, 0xd8, 0x06, 0xf7, 0x13, 0xd4, 0x0f, 0x91, 0x38, 0xbc, 0x02,
  0x63, 0xb8, 0x04, 0x1a, 0xec, 0x9d, 0xb9, 0x8d, 0x34, 0xda, 0xe1, 0x1c, 0xec, 0xdb, 0x73, 0x5c,
  0x6d, 0x6e, 0xf8, 0x6a, 0x7d, 0x43, 0xd6, 0x46, 0xca, 0xab, 0x0a, 0x99, 0xa3, 0xcb, 0x83, 0xb5,
  0x63, 0x26, 0x2e, 0x81, 0x66, 0x36, 0x7d, 0xb2, 0x20, 0x5f, 0x77, 0xe5, 0x69, 0x8a, 0x03, 0xfd,
  0x63, 0x50, 0xdf, 0xd6, 0xc5, 0x7a, 0x7a, 0x68, 0x02, 0x7d, 0x6a, 0xf2, 0x2e, 0xf7, 0x5a, 0xe5,
  0xa4, 0xfb, 0x46, 0x35, 0x55, 0x2d, 0x5a, 0xf8, 0x27, 0x95, 0x79, 0x96, 0x7d, 0x6d, 0x67, 0x66,
  0x3b, 0x53, 0x6e, 0xa8, 0x0e, 0x5d, 0x9f, 0xfb, 0xbd, 0x7e, 0x4f, 0x99, 0x68, 0x0d, 0x9e, 0xe3,
  0x2f, 0x81, 0x6e, 0x46, 0xa5, 0x5b, 0x78, 0x6c, 0xa3, 0x7c, 0xdd, 0x0f, 0xee, 0xd9, 0x49, 0x39,
  0xc3, 0xed, 0x9f, 0xef, 0xd8, 0x69, 0xbf, 0xc6, 0xa5, 0x37, 0xad, 0x12, 0xcc, 0xe9, 0x41, 0xcf,
  0xf8, 0xd6, 0x99, 0x6d, 0x17, 0x77, 0x4f, 0xa9, 0x6e, 0x7d, 0xdb, 0xb7, 0x68, 0xcd, 0xa5, 0x9b,
  0xaf, 0xa9, 0x46, 0x33, 0x57, 0xe8, 0xf0, 0x4e, 0x99, 0x2b, 0xf3, 0xae, 0xd3, 0xbd, 0x2f, 0x2b,
  0x85, 0xe7, 0xfb, 0xa2, 0xb8, 0x7c, 0x98, 0xf2, 0xed, 0x12, 0xbb, 0x2a, 0x02, 0x57, 0xde, 0x37,
  0xdb, 0x00, 0x3f, 0xd3, 0xe0, 0x80, 0x8e, 0x55, 0xba, 0xfe, 0x14, 0xf5, 0x64, 0xc6, 0x28, 0x0d,
  0x88, 0x3c, 0x9c, 0xb3, 0x8d, 0x49, 0x40, 0xdf, 0xa0, 0x34, 0x74, 0x79, 0x67, 0xdb, 0x5f, 0x36,
  0xb7, 0xfd, 0x4e, 0x13, 0xe7, 0x6f, 0xd7, 0x33, 0xbf, 0x67, 0xe2, 0x13, 0xd0, 0x67, 0x50, 0xe6,
  0x28, 0xad, 0x61, 0x5d, 0xab, 0xb6, 0x66, 0x79, 0xa9, 0xb2, 0xd5, 0xc4, 0x4a, 0x2f, 0x07, 0xf8,
  0xb7, 0xfb, 0x1d, 0x25, 0xf7, 0xda, 0x14, 0xd6, 0xfa, 0xcb, 0xa5, 0x19, 0x9a, 0xc7, 0xae, 0xfa,
  0xa0, 0x87, 0xa4, 0xce, 0x5a, 0x73, 0x71, 0xf7, 0x54, 0x9c, 0x24, 0x2b, 0xb3, 0xd4, 0xa4, 0xd9,
  0x2d, 0xac, 0x3b, 0xd3, 0x76, 0x7f, 0x72, 0xb7, 0x7e, 0x99, 0xb4, 0x32, 0x3a, 0xf9, 0xe5, 0xc0,
  0x6c, 0xea, 0xe5, 0xce, 0x3a, 0xfb, 0xba, 0x78, 0x57, 0x2a, 0x08, 0xad, 0x2e, 0x9b, 0xbe, 0xdf,
  0xe5, 0x2b, 0x65, 0x54, 0xb2, 0x26, 0x3c, 0xaa, 0x97, 0x25, 0xb4, 0xb0, 0x50, 0x4e, 0x71, 0x54,
  0x7f, 0xe4, 0x80, 0x0b, 0x3a, 0x35, 0xd4, 0x17, 0x1f, 0x4d, 0x16, 0x34, 0x34, 0xd4, 0x33, 0x93,
  0x58, 0x30, 0x49, 0xad, 0x21, 0x8e, 0x70, 0xd2, 0x06, 0x35, 0x2e, 0x54, 0x4e, 0xd1, 0xba, 0xe2,
  0xf7, 0xa8, 0x6b, 0xf0, 0x1b, 0xe4, 0x66, 0x90, 0x87, 0xcf, 0x7d, 0x4e, 0xd8, 0xd4, 0xb1, 0x3c,
  0xcc, 0x4b, 0xd4, 0x7b, 0x41, 0xef, 0x23, 0xca, 0x2b, 0xf7, 0x94, 0xcc, 0x8b, 0xa8, 0xaf, 0xad,
  0x70, 0x9e, 0x82, 0xc9, 0x72, 0x8f, 0xca, 0x1e, 0x10, 0x57, 0x65, 0x8b, 0x39, 0xb6, 0xd7, 0x26,
  0xeb, 0x79, 0x99, 0xef, 0x14, 0x38, 0xae, 0xc3, 0x3f, 0xd5, 0xb7, 0xbc, 0xca, 0x3a, 0x7c, 0x28,
  0x0e, 0xc8, 0xbc, 0xdd, 0x35, 0xf0, 0xbd, 0x84, 0x34, 0xe7, 0x90, 0x2f, 0xf7, 0x8d, 0x5e, 0x93,
  0xcc, 0xcb, 0x3e, 0xd2, 0x9c, 0xb3, 0xe5, 0x29, 0xb7, 0xef, 0x67, 0x82, 0x73, 0xb9, 0xbe, 0xef,
  0x3b, 0xba, 0x10, 0xab, 0xa4, 0xcf, 0x92, 0x9b, 0x62, 0x71, 0xfc, 0x5a, 0x60, 0x61, 0x49, 0xe4,
  0xd8, 0xe6, 0x70, 0x3d, 0xe8, 0x36, 0xae, 0x1a, 0xd5, 0x26, 0x9b, 0x9b, 0x6e, 0xe6, 0xdc, 0x40,
  0xac, 0x36, 0xba, 0x62, 0x8d, 0xeb, 0xb6, 0xc5, 0x56, 0x57, 0xdc, 0x72, 0x69, 0x89, 0x6f, 0x75,
  0x9b, 0x83, 0xfb, 0x39, 0xb7, 0x07, 0x09, 0x93, 0xaf, 0x4e, 0xd3, 0xcb, 0xce, 0xfc, 0xb9, 0xdd,
  0xda, 0x0f, 0x33, 0x7d, 0x0e, 0xe6, 0xcb, 0x54, 0x6a, 0x37, 0x41, 0xc7, 0xe8, 0xf3, 0xcf, 0x95,
  0xe7, 0x6d, 0x4a, 0x66, 0x9f, 0xf3, 0xf2, 0x06, 0xcc, 0xae, 0xa1, 0xfa, 0x0d, 0x2c, 0x56, 0x0e,
  0xb4, 0x91, 0x4b, 0x20, 0x59, 0xb9, 0xeb, 0xc2, 0x93, 0xb9, 0x5a, 0xba, 0xbf, 0x6e, 0x57, 0x1b,
  0x9b, 0xa4, 0x21, 0xae, 0x07, 0xc5, 0x36, 0x69, 0x3b, 0xb9, 0xe6, 0xaf, 0x60, 0x0d, 0x83, 0xf5,
  0x5f, 0xdc, 0xd6, 0x37, 0xe5, 0xbb, 0x7e, 0x4a, 0xbd, 0x13, 0xbb, 0xfd, 0x79, 0x71, 0x20, 0xd6,
  0xa0, 0xcd, 0xd1, 0x43, 0x6f, 0xc5, 0xb5, 0x7b, 0x5a, 0xfe, 0x11, 0xda, 0x28, 0x96, 0xc5, 0x7a,
  0xbd, 0x38, 0xd8, 0x76, 0xe7, 0x6a, 0x8f, 0xcc, 0x6f, 0xa0, 0x7d, 0xf2, 0xcc, 0x00, 0xfa, 0xde,
  0x0d, 0x70, 0x88, 0xaa, 0x13, 0xf6, 0x85, 0x2d, 0x4d, 0xd8, 0x0e, 0xd5, 0x8b, 0x1f, 0xcb, 0xae,
  0xee, 0x9e, 0xe6, 0x41, 0x0f, 0x6a, 0xec, 0x78, 0xce, 0x5a, 0x97, 0xb3, 0x75, 0x3a, 0x87, 0x41,
  0x27, 0x16, 0x03, 0x7a, 0x4e, 0x9f, 0xca, 0x00, 0x45, 0xac, 0x56, 0x91, 0x67, 0xe9, 0xda, 0xfd,
  0x58, 0x26, 0x36, 0x46, 0x6d, 0x81, 0xfa, 0x54, 0x63, 0xd3, 0x1c, 0xd4, 0x4b, 0xb5, 0x5d, 0xbd,
  0x95, 0x7e, 0x24, 0xbf, 0xec, 0xdd, 0x4b, 0x72, 0x3c, 0x54, 0xeb, 0xca, 0x50, 0x6d, 0xc1, 0x77,
  0x63, 0x76, 0xbf, 0xed, 0x64, 0x3a, 0xf3, 0x4e, 0x4a, 0x9a, 0x3f, 0x83, 0xe2, 0xd6, 0x98, 0x61,
  0xda, 0x86, 0xe4, 0x9b, 0x5d, 0xb0, 0x07, 0x94, 0xc6, 0x0c, 0xd2, 0x66, 0xc0, 0xd3, 0x60, 0x9f,
  0xe4, 0x58, 0xb0, 0x4f, 0x76, 0x35, 0x58, 0xef, 0x6a, 0xfb, 0xfb, 0xab, 0x2b, 0xe5, 0x59, 0x6e,
  0xf4, 0xca, 0xe3, 0x7a, 0x6f, 0xb3, 0x1d, 0xcf, 0xeb, 0xc5, 0x71, 0xaf, 0x5e, 0x79, 0xe6, 0xa5,
  0x2a, 0x28, 0x9c, 0x55, 0x80, 0x59, 0x69, 0x3c, 0xe5, 0x8b, 0xed, 0x65, 0x6a, 0xd7, 0x2a, 0x5a,
  0xe5, 0xda, 0xfc, 0x9d, 0x0d, 0x0f, 0xe0, 0x90, 0xf5, 0xe0, 0x25, 0x99, 0xd4, 0xd9, 0x54, 0xa3,
  0x38, 0xd9, 0x20, 0xd3, 0xa5, 0x40, 0xee, 0xa1, 0x7d, 0xd5, 0xa6, 0x36, 0x80, 0xdd, 0x8f, 0x8e,
  0xbb, 0x26, 0xd7, 0xf6, 0x6d, 0x4b, 0xbe, 0x35, 0xd2, 0xe5, 0x5e, 0x88, 0x9e, 0xb2, 0x7f, 0xd4,
  0x9b, 0x8a, 0xb8, 0x68, 0xee, 0x91, 0xa7, 0x84, 0xba, 0xfc, 0xb4, 0x48, 0x35, 0x4b, 0x83, 0xfc,
  0xdd, 0x6e, 0xdd, 0x1b, 0x66, 0x9a, 0x9b, 0x41, 0x2a, 0xdd, 0x14, 0x77, 0xfc, 0x54, 0x06, 0x9d,
  0xa5, 0x3f, 0x13, 0xb3, 0xad, 0xf9, 0xc4, 0x2a, 0x3b, 0xcc, 0xd4, 0x37, 0xb5, 0x6f, 0xcd, 0x5e,
  0x37, 0x05, 0x75, 0xea, 0x62, 0xa5, 0x39, 0x9b, 0x83, 0xdd, 0x20, 0x8f, 0x6b, 0xd3, 0xda, 0x53,
  0xb3, 0xd9, 0x1b, 0x88, 0x67, 0xcd, 0xbd, 0xd4, 0xad, 0x70, 0x52, 0x9e, 0xc8, 0x9b, 0x76, 0x09,
  0xc6, 0xb1, 0x0f, 0xf6, 0x5d, 0x5d, 0xa7, 0x7e, 0x1c, 0xb0, 0xed, 0x60, 0x9e, 0xe1, 0xda, 0xcb,
  0xf7, 0xe0, 0xb7, 0xdd, 0xd0, 0x93, 0x1b, 0xee, 0x11, 0xed, 0x63, 0xb6, 0x3c, 0xc4, 0xcd, 0xac,
  0x81, 0xf3, 0x8e, 0xf3, 0x8e, 0x3c, 0x43, 0xd0, 0x3f, 0xa0, 0xff, 0x39, 0xb6, 0xa8, 0xb6, 0x71,
  0xbe, 0xf1, 0x38, 0xdf, 0xa6, 0xa8, 0x87, 0xe0, 0x3a, 0xd9, 0xdc, 0xa3, 0xfd, 0xd6, 0x00, 0xfb,
  0x0d, 0xfa, 0xd7, 0x6b, 0xa4, 0x59, 0xfa, 0x3b, 0xe0, 0x30, 0xbd, 0x2d, 0x92, 0xbc, 0x26, 0xe8,
  0xb6, 0xb0, 0xce, 0x4f, 0x81, 0x46, 0x69, 0xfc, 0xe5, 0xa1, 0xfd, 0x72, 0xb7, 0x3c, 0x98, 0xd4,
  0xb8, 0x47, 0xb0, 0x89, 0xf4, 0xbb, 0xf4, 0xf3, 0xe3, 0x84, 0xdf, 0x36, 0x90, 0x95, 0xd2, 0x93,
  0xfa, 0x20, 0x29, 0x18, 0xc5, 0xc1, 0x38, 0xa3, 0xb3, 0xea, 0xd3, 0xd5, 0x4b, 0xc6, 0x78, 0x79,
  0x51, 0xb4, 0xc7, 0xbb, 0xe9, 0x90, 0x83, 0x75, 0xfa, 0xe5, 0x45, 0x63, 0x5f, 0xea, 0xaa, 0x86,
  0xff, 0x01, 0x9e, 0xcf, 0x60, 0x1b, 0xae, 0x1e, 0x07, 0x20, 0x87, 0x06, 0xea, 0x90, 0xf2, 0x2f,
  0xac, 0x4f, 0x20, 0x1f, 0x74, 0x14, 0x0e, 0x0f, 0x88, 0x6c, 0x19, 0xc4, 0x10, 0x1b, 0x6a, 0xd7,
  0x39, 0xeb, 0x37, 0xf0, 0x20, 0x5d, 0xbf, 0x67, 0x60, 0xef, 0xcc, 0xa8, 0xde, 0x08, 0x69, 0xf6,
  0x18, 0x2a, 0x56, 0x79, 0x47, 0xde, 0xf2, 0x36, 0xdf, 0xda, 0xe3, 0xdf, 0xf5, 0x7f, 0x63, 0x7e,
  0x7d, 0x87, 0x76, 0x44, 0x03, 0xd6, 0xf6, 0xe9, 0x43, 0x6f, 0xd9, 0x86, 0x39, 0x53, 0x9b, 0x4a,
  0xa0, 0x37, 0x3d, 0x96, 0xd5, 0xa6, 0xe7, 0xbb, 0xf9, 0xd8, 0x17, 0xc1, 0x0e, 0x4c, 0x81, 0x0d,
  0x68, 0xc9, 0xd9, 0x94, 0xff, 0x3b, 0xcb, 0x69, 0x8b, 0x3a, 0xbc, 0xc3, 0x42, 0x76, 0xb6, 0xde,
  0x1a, 0x6a, 0xbd, 0x63, 0x08, 0x75, 0xe5, 0xf9, 0x5b, 0x37, 0xdb, 0x17, 0xd8, 0x51, 0x5b, 0x90,
  0xfa, 0xa0, 0x17, 0xee, 0x6c, 0xd8, 0xc1, 0xb6, 0xac, 0xef, 0xd7, 0x14, 0x5b, 0x99, 0x9a, 0x12,
  0xac, 0x03, 0xd5, 0xce, 0x3e, 0x77, 0xf6, 0x04, 0x30, 0x82, 0xdf, 0x30, 0xcc, 0x2a, 0xac, 0x11,
  0x56, 0x5b, 0xfd, 0x51, 0x45, 0x19, 0x2e, 0x2a, 0x53, 0x43, 0x4d, 0xae, 0x57, 0xfd, 0x36, 0x68,
  0x4b, 0x94, 0x9f, 0x40, 0x86, 0xe7, 0x91, 0x9f, 0x50, 0xbf, 0xab, 0x1d, 0xd3, 0x43, 0x5d, 0x7d,
  0x68, 0xe6, 0xac, 0xfd, 0x44, 0x37, 0x00, 0x39, 0x36, 0x04, 0xfd, 0x31, 0x05, 0xf4, 0x52, 0x6a,
  0x4f, 0x9d, 0x87, 0x9e, 0x3a, 0x51, 0xda, 0x5c, 0x1e, 0x64, 0xac, 0xd4, 0x02, 0xbd, 0xea, 0xa9,
  0x3c, 0x2f, 0x64, 0x9b, 0x29, 0x5e, 0x6e, 0x17, 0x6b, 0x87, 0x7d, 0x9a, 0x68, 0x77, 0xe5, 0xe2,
  0x64, 0x29, 0xcc, 0xcb, 0x5c, 0x97, 0x9f, 0x72, 0xed, 0x47, 0x6d, 0x79, 0xc7, 0xb5, 0xef, 0x8a,
  0x64, 0x4d, 0x81, 0x35, 0x88, 0xcb, 0x26, 0x9f, 0xda, 0xad, 0x19, 0xbb, 0x6b, 0xb0, 0x25, 0xd0,
  0x43, 0x51, 0x6e, 0x01, 0x7e, 0x4f, 0xdc, 0x16, 0xf4, 0xcb, 0x9d, 0x38, 0x6b, 0x76, 0xc5, 0x2c,
  0xf0, 0x65, 0xb6, 0xbc, 0x6f, 0x70, 0x9f, 0x1a, 0xe3, 0x10, 0x19, 0x35, 0xd3, 0xbe, 0xd5, 0xc0,
  0x94, 0xa8, 0xd9, 0xbf, 0xc9, 0x17, 0xc3, 0x5e, 0x0b, 0xfb, 0x65, 0x7e, 0xb8, 0xbe, 0x07, 0x7d,
  0xc9, 0xff, 0x3d, 0xb0, 0xe5, 0xcc, 0xbc, 0xb3, 0xa9, 0x36, 0xbd, 0x75, 0xe1, 0xf7, 0xea, 0xc5,
  0x5e, 0xa7, 0x7b, 0xfd, 0xd7, 0xfb, 0xf9, 0xb0, 0x8f, 0xf5, 0x7c, 0xdf, 0x6c, 0x45, 0x77, 0x65,
  0x55, 0x1b, 0xf8, 0xbb, 0xc8, 0xa2, 0xbf, 0x66, 0xc2, 0xa2, 0xbf, 0x62, 0xc2, 0x36, 0xc9, 0xfe,
  0xf3, 0xe6, 0x18, 0x7f, 0xeb, 0x6c, 0x97, 0xf8, 0x20, 0xe8, 0x9a, 0x45, 0xfb, 0x12, 0xb4, 0x11,
  0x4a, 0x8d, 0x99, 0xe3, 0xb7, 0x80, 0xbe, 0x0f, 0xb3, 0x81, 0xef, 0x7d, 0xe0, 0xfb, 0x29, 0xf0,
  0x8d, 0xba, 0x2b, 0xb5, 0x89, 0xa6, 0x7c, 0xe7, 0xa1, 0x0b, 0xfa, 0x23, 0xbf, 0x11, 0xea, 0x93,
  0x79, 0xb5, 0xc8, 0xce, 0xd5, 0x4a, 0xda, 0xce, 0xa3, 0xf6, 0xd3, 0xc2, 0xe1, 0x5f, 0x41, 0xa8,
  0xec, 0xfa, 0x94, 0xdf, 0x5e, 0x59, 0xf8, 0x1e, 0x92, 0xef, 0x85, 0xcb, 0x7f, 0xc5, 0x0d, 0x67,
  0x8c, 0x9e, 0x4a, 0xb9, 0x64, 0xc7, 0xb6, 0xab, 0x80, 0x27, 0x4b, 0xdc, 0xb0, 0x56, 0xec, 0x0c,
  0x1b, 0x50, 0x36, 0xe0, 0x43, 0xf8, 0x76, 0x36, 0x29, 0x02, 0xcf, 0x12, 0x98, 0x86, 0xfa, 0xb2,
  0x73, 0xf9, 0x97, 0xb6, 0x87, 0xf0, 0x1f, 0x75, 0x78, 0xa7, 0xbc, 0xbd, 0xeb, 0x5b, 0xfe, 0x00,
  0x4a, 0x4f, 0x89, 0xbd, 0x4b, 0xa1, 0x3f, 0xb6, 0x84, 0xf2, 0x6c, 0x83, 0x7e, 0x23, 0x90, 0x63,
  0x6d, 0x71, 0x09, 0xf4, 0xd9, 0x55, 0x37, 0xfc, 0x63, 0x19, 0x54, 0x9b, 0xcc, 0x5d, 0xe9, 0xec,
  0xee, 0x8e, 0x2d, 0x5e, 0xf1, 0x97, 0x93, 0xde, 0x64, 0x33, 0x2b, 0x3d, 0xb6, 0x1b, 0x43, 0xb6,
  0x3a, 0xd4, 0x5a, 0x39, 0x4d, 0x63, 0x2b, 0xa9, 0xde, 0x0b, 0xf7, 0x50, 0x62, 0xb7, 0xf3, 0x52,
  0xb7, 0x41, 0x55, 0xe5, 0xee, 0x6b, 0x52, 0x6d, 0xdf, 0x0f, 0xd8, 0xb5, 0x41, 0x5c, 0xab, 0x6c,
  0x97, 0x2f, 0x35, 0x40, 0xbf, 0xa9, 0x6d, 0x79, 0xee, 0x6e, 0x53, 0x79, 0x79, 0x79, 0xd1, 0xcf,
  0xd2, 0x1a, 0x5b, 0xbc, 0x4c, 0x5e, 0xbe, 0x80, 0x9e, 0x03, 0xaa, 0x53, 0xf5, 0x91, 0x22, 0x35,
  0x67, 0x27, 0xad, 0x2b, 0x94, 0xb7, 0xa5, 0x32, 0xf1, 0x2f, 0x8a, 0x18, 0x50, 0x30, 0x62, 0xb9,
  0x02, 0x5b, 0xdb, 0xb0, 0x4b, 0xb6, 0x68, 0x10, 0xcf, 0x2d, 0xd7, 0x03, 0xf9, 0xda, 0x01, 0xb9,
  0xbb, 0xed, 0xab, 0xb0, 0xfe, 0x7e, 0x63, 0xc1, 0x8e, 0xe2, 0xd1, 0x9e, 0xa2, 0x6b, 0x91, 0x8a,
  0x36, 0x06, 0xe8, 0x60, 0x9d, 0x06, 0xb4, 0x87, 0xf2, 0x98, 0x75, 0xcb, 0x97, 0xe0, 0x1b, 0x74,
  0xcd, 0x3b, 0xd0, 0xcd, 0x9e, 0x07, 0xc9, 0x36, 0xbb, 0xab, 0x5d, 0xa2, 0x9e, 0x68, 0xcc, 0x1a,
  0x93, 0x3b, 0xbd, 0xb6, 0x07, 0xf9, 0xfb, 0x02, 0xb6, 0x15, 0xca, 0xd2, 0x0d, 0xe8, 0x62, 0x2a,
  0x68, 0x70, 0xbd, 0x3a, 0x94, 0xed, 0xc3, 0x58, 0x0f, 0x06, 0x2f, 0xbb, 0xc6, 0x0e, 0x64, 0xf3,
  0xcb, 0xa0, 0x07, 0xeb, 0xad, 0xfa, 0x3c, 0x68, 0x28, 0xad, 0x2b, 0x96, 0x7d, 0x78, 0x49, 0xe2,
  0x9a, 0x01, 0xf9, 0xe8, 0x53, 0x1b, 0x8c, 0x2f, 0x5f, 0x06, 0xea, 0xe8, 0xec, 0x25, 0xdd, 0x9f,
  0x35, 0x26, 0x96, 0x13, 0xb2, 0x56, 0x02, 0x7a, 0x3c, 0xb0, 0xec, 0xb6, 0x8f, 0xba, 0x5f, 0x95,
  0x2d, 0x8a, 0xd4, 0x9d, 0x4d, 0xd6, 0x85, 0x06, 0xc1, 0x93, 0xea, 0x07, 0xc7, 0xed, 0x59, 0xe8,
  0xd3, 0x13, 0xd1, 0xd5, 0xc0, 0x1e, 0xf8, 0x84, 0x9d, 0xb5, 0x67, 0x35, 0xd0, 0x3b, 0xcb, 0x03,
  0xe8, 0x0b, 0xbf, 0xbc, 0x47, 0x1b, 0x1e, 0x74, 0x2b, 0x98, 0x64, 0x95, 0xce, 0x62, 0xe2, 0xf0,
  0x64, 0x9f, 0xef, 0x5c, 0x82, 0x2e, 0xd1, 0xa9, 0x4e, 0xbe, 0x9d, 0xa9, 0x7b, 0xcb, 0x66, 0xe7,
  0x2c, 0x9b, 0x7e, 0x16, 0xf8, 0x9e, 0x34, 0x80, 0x18, 0x4f, 0x57, 0x69, 0x58, 0x6f, 0x70, 0x9d,
  0xac, 0xcc, 0xea, 0x97, 0x1d, 0xfe, 0x8a, 0xc2, 0xdb, 0x16, 0x08, 0xfc, 0x5e, 0xda, 0x82, 0xaf,
  0x6c, 0xb4, 0x16, 0x9b, 0x92, 0x79, 0xa0, 0x55, 0x79, 0x3b, 0xed, 0xc0, 0xe4, 0x3f, 0x6b, 0xcd,
  0xc4, 0x4c, 0xbf, 0x33, 0x79, 0xa2, 0xdf, 0x20, 0xe7, 0x67, 0x43, 0xf2, 0xcd, 0xa2, 0x02, 0x5d,
  0x7c, 0x4d, 0x4e, 0x26, 0xad, 0x01, 0xbb, 0x9b, 0x53, 0xfa, 0xc0, 0x7a, 0x0d, 0xfc, 0xd8, 0x63,
  0x39, 0x91, 0x6d, 0x6c, 0xd8, 0x2c, 0x5b, 0x22, 0xeb, 0x37, 0xda, 0xd1, 0x25, 0x5c, 0x53, 0x71,
  0xbc, 0x9b, 0xed, 0x3e, 0xf9, 0x6e, 0x6e, 0xc5, 0x2a, 0xe8, 0xdc, 0x38, 0xde, 0x9f, 0xf1, 0x0b,
  0xf4, 0x90, 0x1f, 0xea, 0x3d, 0xf1, 0x89, 0xdb, 0xf0, 0x93, 0x16, 0x9f, 0xba, 0xba, 0x1b, 0x82,
  0x6a, 0x0d, 0xe3, 0xa7, 0xf2, 0xa9, 0x42, 0x8f, 0xdf, 0x7c, 0xeb, 0xf5, 0x36, 0xab, 0x49, 0xad,
  0x74, 0xf6, 0xb2, 0x3f, 0x22, 0x97, 0xac, 0xef, 0x22, 0x8c, 0xf1, 0x08, 0xeb, 0xb0, 0xf5, 0x2d,
  0xc0, 0x29, 0x24, 0x8d, 0xfa, 0x60, 0xd0, 0xae, 0xac, 0xc6, 0xcb, 0xcb, 0x65, 0xaf, 0xb7, 0x6d,
  0x26, 0x9f, 0x8c, 0x42, 0xaf, 0x94, 0xe2, 0xd4, 0x72, 0x9f, 0xbb, 0x03, 0xbb, 0xa2, 0xd3, 0x2d,
  0x20, 0x8c, 0xf5, 0x7d, 0xaa, 0x0f, 0xb2, 0xa3, 0x3d, 0x80, 0xef, 0x35, 0x81, 0x99, 0x82, 0x31,
  0x6b, 0xa5, 0x4c, 0xbb, 0x1e, 0x51, 0xf5, 0x81, 0x5f, 0x5e, 0x91, 0x5f, 0x70, 0xfe, 0xb4, 0x59,
  0x0c, 0xa2, 0x31, 0x41, 0x2e, 0xd7, 0x41, 0x6e, 0x97, 0x8b, 0xed, 0x5a, 0x15, 0x6c, 0x41, 0xee,
  0x61, 0x3e, 0x3a, 0x9b, 0xb4, 0x2e, 0x41, 0x3f, 0xe5, 0xbf, 0x25, 0x35, 0x9c, 0x43, 0x15, 0xb6,
  0xa3, 0x2c, 0xc1, 0x46, 0xfb, 0x36, 0x60, 0xbb, 0x46, 0x5a, 0x61, 0x79, 0x90, 0x81, 0xaf, 0x67,
  0xe9, 0xde, 0x90, 0x4e, 0xad, 0x0d, 0xfa, 0x7b, 0x53, 0xa0, 0x1f, 0xc0, 0x7c, 0x80, 0x59, 0x54,
  0xa4, 0xaa, 0x81, 0x0a, 0x34, 0x7c, 0xaa, 0x6f, 0x44, 0xae, 0x89, 0xfb, 0x2e, 0x30, 0xef, 0x81,
  0x2e, 0x59, 0xae, 0x47, 0x7f, 0xeb, 0x9b, 0x66, 0xb3, 0xd5, 0x6b, 0x5c, 0x75, 0x16, 0xa3, 0x33,
  0xa3, 0xba, 0xe1, 0x26, 0xad, 0x54, 0x83, 0xdd, 0x16, 0xb2, 0x9a, 0xd4, 0x3a, 0x9b, 0xf0, 0x43,
  0xee, 0x61, 0x25, 0x5e, 0x3d, 0x82, 0x6e, 0xae, 0x8c, 0x7a, 0x6c, 0xab, 0x3b, 0xb9, 0xd2, 0x54,
  0xd0, 0xb8, 0x2a, 0xd5, 0xb3, 0x34, 0xa8, 0xe0, 0xc9, 0x07, 0x3e, 0xa3, 0x09, 0x6d, 0xee, 0x6e,
  0xff, 0x94, 0x92, 0x7a, 0xe9, 0x0a, 0xdb, 0x35, 0x75, 0xd3, 0xf6, 0xc3, 0x97, 0x9f, 0x70, 0x3e,
  0xe8, 0xd8, 0x3f, 0x18, 0x6c, 0xcd, 0xe7, 0x17, 0xeb, 0xb4, 0x29, 0x2f, 0xc3, 0xba, 0x74, 0xe0,
  0x77, 0xde, 0x36, 0x96, 0x4d, 0xf4, 0xa7, 0x6c, 0x60, 0xfc, 0xb6, 0x62, 0xb6, 0x1c, 0xe6, 0xd7,
  0x09, 0x7c, 0xa7, 0x9f, 0x17, 0xcf, 0xad, 0xba, 0xfb, 0x1f, 0xb4, 0x69, 0xad, 0xbf, 0xd3, 0xc0,
  0x7a, 0x6c, 0x7f, 0xdf, 0x5f, 0xbd, 0xd6, 0x03, 0x75, 0xc8, 0xfa, 0x5f, 0xec, 0xa0, 0x3e, 0x39,
  0x01, 0x2b, 0x8f, 0xec, 0x5f, 0x15, 0xfb, 0x38, 0x17, 0x97, 0xcd, 0x4d, 0x05, 0xc4, 0x54, 0xbb,
  0x90, 0x9c, 0x94, 0x5e, 0x5b, 0xc3, 0x1c, 0xb7, 0xd9, 0x53, 0x7f, 0xbb, 0xb5, 0xff, 0x00, 0x8b,
  0x54, 0xf1, 0x15, 0xf7, 0x96, 0x2e, 0x37, 0xa8, 0x8d, 0xb1, 0x94, 0xc6, 0x3b, 0xb1, 0x88, 0x62,
  0xa1, 0xd5, 0xe8, 0xf1, 0x2d, 0xb6, 0x0a, 0x7a, 0x28, 0x5b, 0xd8, 0x14, 0x1a, 0x05, 0xab, 0xfc,
  0x00, 0xcb, 0xa7, 0xda, 0xa4, 0x3c, 0xb4, 0x31, 0xe7, 0x80, 0xc7, 0x8b, 0xdb, 0xd2, 0x3e, 0x89,
  0x7a, 0x69, 0xab, 0xd1, 0xe6, 0x52, 0xbd, 0x7d, 0x92, 0xd6, 0xb7, 0xe4, 0xad, 0x87, 0x9e, 0xf7,
  0x54, 0xae, 0xcc, 0xca, 0x1b, 0x71, 0x59, 0xa3, 0x3e, 0x44, 0xd0, 0xc9, 0xc9, 0x5c, 0x49, 0xd7,
  0x20, 0x0d, 0xf4, 0xd1, 0x74, 0x63, 0x27, 0xa2, 0x2e, 0x90, 0xc6, 0xb1, 0xc7, 0xf9, 0x80, 0x73,
  0xa8, 0x8c, 0xfa, 0xc1, 0x46, 0xdc, 0xb3, 0x97, 0xeb, 0x9d, 0x32, 0xdb, 0x57, 0x07, 0xe2, 0xb0,
  0xa0, 0xa8, 0xc2, 0x5d, 0xab, 0xf1, 0x3c, 0xd8, 0xee, 0x77, 0x77, 0xa0, 0xa9, 0xc2, 0xbb, 0x34,
  0xd8, 0xce, 0x76, 0x77, 0x03, 0x4d, 0x2b, 0x6c, 0xd5, 0xa7, 0x6a, 0xab, 0xf6, 0xb2, 0x03, 0x3b,
  0xf7, 0x11, 0xca, 0x57, 0x06, 0xa2, 0x58, 0x50, 0xf4, 0xbb, 0x0f, 0xeb, 0x02, 0x76, 0xe5, 0xc0,
  0xf8, 0xe7, 0x58, 0xbe, 0x0d, 0x14, 0xe5, 0x9e, 0x3e, 0xcf, 0x07, 0x9f, 0x92, 0x81, 0x3d, 0xcb,
  0x87, 0x62, 0xfb, 0x4d, 0xa7, 0x81, 0xef, 0x27, 0x94, 0xa9, 0xb5, 0x5e, 0x8e, 0x03, 0xb9, 0x1d,
  0xe4, 0x85, 0xe7, 0x5e, 0xdf, 0xf3, 0x3d, 0x50, 0x6d, 0x3f, 0x82, 0xe5, 0x37, 0x90, 0xfc, 0xdf,
  0xe6, 0xc6, 0x59, 0xc7, 0x93, 0xba, 0xe1, 0xe8, 0x90, 0x72, 0xca, 0x4c, 0x57, 0x5e, 0xf3, 0x8d,
  0xca, 0xb2, 0xff, 0x5f, 0xd5, 0x53, 0x27, 0xe5, 0x4e, 0xb1, 0xad, 0xb6, 0x89, 0x1f, 0xe2, 0x25,
  0x79, 0x36, 0x60, 0xd3, 0xfd, 0x12, 0xac, 0x97, 0x0b, 0xb6, 0x84, 0xbe, 0x7f, 0xfe, 0x53, 0x7b,
  0x18, 0xdc, 0xb6, 0xfd, 0x08, 0x3a, 0x3c, 0xea, 0x85, 0x8b, 0x46, 0xdb, 0xbf, 0x87, 0x81, 0x74,
  0xa5, 0x3e, 0x97, 0x61, 0xb1, 0x5d, 0x2a, 0xec, 0x1b, 0xa9, 0x79, 0xaf, 0xcc, 0x05, 0x74, 0xf6,
  0xc9, 0xbc, 0x5e, 0xe7, 0xb4, 0xe7, 0x1a, 0x18, 0x26, 0xa0, 0x33, 0xb7, 0x6b, 0xfc, 0xe6, 0xa5,
  0xde, 0x1d, 0x66, 0x81, 0xa3, 0x1b, 0xa5, 0x2e, 0x67, 0x3c, 0xf4, 0xa6, 0x6c, 0xbf, 0x8d, 0xb6,
  0x65, 0x2e, 0x39, 0x1f, 0x94, 0x3b, 0x83, 0xb9, 0x55, 0x6f, 0x6b, 0x58, 0x3e, 0x96, 0xe1, 0xbe,
  0x59, 0x61, 0x8d, 0xfb, 0xe2, 0xb0, 0xd5, 0x56, 0xf3, 0x72, 0x7b, 0xde, 0xad, 0x25, 0x5b, 0xb5,
  0x36, 0xdf, 0x13, 0xc1, 0xd6, 0xd5, 0xcc, 0x81, 0xa2, 0x19, 0xcd, 0xcd, 0xe6, 0xbe, 0x33, 0x6b,
  0x67, 0x7b, 0x1b, 0x6b, 0xff, 0x0a, 0xf4, 0x17, 0x62, 0xef, 0xe0, 0xfe, 0x1d, 0xa6, 0xb5, 0xc5,
  0x5e, 0xbd, 0xdd, 0xef, 0xd5, 0x41, 0x07, 0x62, 0xdb, 0x8d, 0x27, 0xe0, 0xef, 0x57, 0xdc, 0xdf,
  0x00, 0xbe, 0x2e, 0xbd, 0x9c, 0xa9, 0x95, 0xe4, 0xeb, 0xec, 0xec, 0x8c, 0x1f, 0xad, 0xd8, 0x5e,
  0x33, 0x07, 0x8b, 0xd4, 0xf4, 0x2e, 0x77, 0xf9, 0xad, 0xdb, 0x5f, 0x5c, 0xce, 0xba, 0x1a, 0x67,
  0x1a, 0xa0, 0x93, 0xd4, 0xcf, 0xc6, 0x6c, 0x77, 0x7f, 0x57, 0x99, 0xf0, 0xa3, 0xe4, 0xfa, 0xe9,
  0x2c, 0x9b, 0xa9, 0x64, 0xe4, 0x6d, 0xd1, 0xd4, 0x39, 0xee, 0x9b, 0xb9, 0xa1, 0x4b, 0x39, 0x75,
  0x05, 0x72, 0xf5, 0xe7, 0x7c, 0x6e, 0xfb, 0xb4, 0x29, 0x14, 0xae, 0xc0, 0x2e, 0xb4, 0x37, 0x20,
  0x33, 0x93, 0xe2, 0x6b, 0x86, 0xec, 0x49, 0x96, 0x04, 0xf6, 0x2e, 0x09, 0x72, 0xa3, 0x64, 0xe9,
  0xe5, 0x64, 0x0f, 0xa6, 0xe6, 0xd9, 0x85, 0xa6, 0xfb, 0x99, 0xfb, 0x56, 0xb2, 0xc9, 0x7a, 0x36,
  0x30, 0xcf, 0x1a, 0xe1, 0x71, 0x06, 0x45, 0x2d, 0x74, 0xa3, 0x15, 0xeb, 0xa5, 0x71, 0xe3, 0xae,
  0xd9, 0x87, 0xfc, 0x62, 0x07, 0xbf, 0x07, 0xf8, 0x5d, 0x23, 0x3b, 0xd7, 0x29, 0xfc, 0xbe, 0xdb,
  0xc0, 0x77, 0x19, 0xf3, 0x59, 0xdd, 0xf9, 0x2e, 0x1a, 0x58, 0x5e, 0xa7, 0xce, 0x28, 0x12, 0xdb,
  0x80, 0xe5, 0x9f, 0x9c, 0xfa, 0x77, 0x98, 0x5f, 0x1a, 0x38, 0xdf, 0xa4, 0x3e, 0x4f, 0xda, 0xab,
  0x3a, 0xf0, 0x8b, 0x84, 0x10, 0x04, 0x9e, 0xfb, 0xcd, 0xba, 0xdf, 0x9c, 0x5b, 0xbf, 0xce, 0xdb,
  0xf5, 0x69, 0x7b, 0x04, 0x1e, 0xcd, 0x7f, 0xa1, 0xf8, 0x59, 0x3d, 0xd2, 0x50, 0xe8, 0xc9, 0x58,
  0x5b, 0x98, 0x70, 0x20, 0x47, 0x6b, 0xdc, 0x03, 0x0b, 0xea, 0xf4, 0x6c, 0x53, 0x1c, 0xb3, 0xf7,
  0x15, 0x76, 0x0f, 0xe3, 0xcd, 0xb6, 0x32, 0x1c, 0xab, 0xf1, 0x35, 0xb6, 0x3b, 0xe7, 0xda, 0x9b,
  0x72, 0x7f, 0x32, 0x30, 0x38, 0x61, 0x53, 0x69, 0xb0, 0xcf, 0x2f, 0x1c, 0x88, 0x93, 0xd6, 0x44,
  0x9a, 0x70, 0xd9, 0x61, 0x75, 0x3b, 0x99, 0xec, 0x8a, 0xf5, 0x49, 0x6d, 0xcd, 0xce, 0x8c, 0x62,
  0x0f, 0x85, 0xb6, 0xfa, 0x58, 0x7c, 0xd4, 0xea, 0x3a, 0xab, 0xad, 0x8b, 0xda, 0xf0, 0xce, 0x98,
  0x38, 0xe3, 0xf9, 0xc2, 0x96, 0x0d, 0xe2, 0x90, 0x23, 0xcf, 0x24, 0x8c, 0xd2, 0xe4, 0x79, 0x60,
  0xef, 0x72, 0xee, 0xf8, 0xb4, 0x69, 0xa8, 0x06, 0xeb, 0xd6, 0xab, 0xb2, 0x25, 0xcf, 0xf8, 0x6d,
  0x20, 0x1f, 0xf4, 0x3c, 0xfb, 0x1b, 0x05, 0x3b, 0xd9, 0x64, 0xb6, 0xbf, 0xd1, 0x9f, 0x00, 0x13,
  0xda, 0xf9, 0x46, 0x7f, 0x5f, 0x31, 0xe5, 0x7c, 0x83, 0x89, 0x43, 0xf6, 0xe9, 0x70, 0x2d, 0xe0,
  0x30, 0x94, 0x83, 0x8c, 0x51, 0xcd, 0xfd, 0x9e, 0x00, 0x3e, 0x25, 0xcd, 0xfd, 0xde, 0x40, 0x7e,
  0x71, 0xee, 0x7c, 0xd3, 0xe8, 0x5c, 0x37, 0x1f, 0xda, 0x7b, 0x44, 0x97, 0x80, 0xf3, 0x3d, 0xc1,
  0xf2, 0x05, 0xe7, 0x1b, 0xda, 0x43, 0x01, 0x94, 0x86, 0x25, 0x3b, 0xcd, 0x56, 0xd4, 0xc7, 0x67,
  0x98, 0x3d, 0xc2, 0xe3, 0xd5, 0xba, 0x56, 0xe2, 0xd7, 0x0d, 0x96, 0x7b, 0x64, 0x2b, 0x7d, 0x56,
  0x9c, 0x70, 0x7b, 0xb6, 0x32, 0x67, 0x47, 0x1b, 0x6e, 0x8d, 0xbd, 0x6f, 0xb4, 0xd9, 0x35, 0x5b,
  0xe2, 0xec, 0x3a, 0xf6, 0x6f, 0xf7, 0xf9, 0x51, 0x4a, 0x8f, 0x2a, 0xe5, 0x1d, 0x0b, 0xc6, 0xc3,
  0x73, 0x9b, 0x5b, 0xb2, 0xd5, 0x3e, 0x2a, 0xf1, 0x53, 0xb6, 0x5a, 0xb7, 0xcb, 0x54, 0x46, 0x19,
  0x90, 0xaf, 0x15, 0x49, 0x1d, 0x2d, 0x06, 0xbb, 0xe1, 0x53, 0x47, 0x7d, 0x2e, 0x72, 0x8a, 0xdc,
  0xe5, 0xea, 0xc3, 0xcc, 0x55, 0x73, 0x94, 0xb9, 0x5a, 0x13, 0xff, 0x7a, 0xa5, 0xc0, 0x8e, 0x26,
  0x5c, 0x0a, 0xdb, 0x7a, 0xde, 0x70, 0x2a, 0x5b, 0xc9, 0x21, 0xbc, 0x1d, 0x5b, 0xe1, 0x59, 0x89,
  0xc5, 0xef, 0x36, 0x7a, 0x5e, 0x15, 0xb6, 0x3a, 0xc7, 0xdf, 0x3a, 0x0b, 0x5c, 0x00, 0xb8, 0x35,
  0x49, 0x3d, 0x82, 0x23, 0x86, 0xbc, 0xa0, 0x1d, 0xf1, 0xb9, 0x27, 0xce, 0x60, 0x58, 0xa2, 0x60,
  0xc6, 0xa2, 0x18, 0x23, 0x14, 0x8d, 0xdf, 0xbc, 0x5f, 0xeb, 0x9a, 0x66, 0xbe, 0x31, 0x18, 0xc6,
  0x95, 0xbe, 0xfe, 0x8a, 0xb1, 0x8b, 0xf8, 0x3a, 0x26, 0x41, 0xa7, 0xe4, 0x35, 0x73, 0x8d, 0x51,
  0xd8, 0xe4, 0x35, 0x7b, 0xfd, 0x35, 0x9b, 0xcd, 0x92, 0xd7, 0xdc, 0xf5, 0xd7, 0x5c, 0x2e, 0x47,
  0x5e, 0xf3, 0xd7, 0x5f, 0xf3, 0xf9, 0x3c, 0x79, 0xbd, 0xbc, 0xfe, 0x7a, 0x79, 0x79, 0x49, 0x5e,
  0x0b, 0xd7, 0x5f, 0x0b, 0x85, 0x02, 0x79, 0x1d, 0x5d, 0x7f, 0x1d, 0x8d, 0x46, 0xe4, 0x55, 0xbc,
  0xfe, 0x2a, 0x8a, 0x22, 0x79, 0x95, 0xaf, 0xbf, 0xca, 0xb2, 0x4c, 0x5e, 0x31, 0xa0, 0x53, 0x92,
  0xc8, 0xab, 0x0e, 0xd5, 0xb2, 0x88, 0x83, 0x09, 0xd5, 0x52, 0x17, 0x14, 0xac, 0x76, 0xad, 0x4f,
  0x46, 0x42, 0x2c, 0x9b, 0x4b, 0x30, 0xf6, 0x7f, 0xa9, 0x8b, 0xab, 0xf8, 0x0d, 0x8d, 0x3d, 0x63,
  0x0e, 0x73, 0x69, 0x60, 0x1a, 0x80, 0x88, 0xdb, 0x85, 0x04, 0x5a, 0x28, 0x9d, 0xca, 0x24, 0x18,
  0xf7, 0x9f, 0xc3, 0x72, 0x53, 0x5a, 0x2e, 0x9f, 0x4e, 0x30, 0xf6, 0x7f, 0xfe, 0x42, 0xe6, 0xf4,
  0xfa, 0x1b, 0xc6, 0x71, 0xc1, 0xdb, 0xca, 0x7e, 0x83, 0x5a, 0x97, 0x59, 0x9a, 0x36, 0x5a, 0x5d,
  0xa7, 0x31, 0xe4, 0x8e, 0xfe, 0x93, 0xb2, 0xde, 0xb0, 0x0c, 0xe4, 0x5c, 0x91, 0x88, 0xbc, 0x6f,
  0x24, 0x22, 0x0f, 0x6b, 0x49, 0x34, 0xfc, 0x10, 0x5e, 0x17, 0x26, 0x0d, 0xe8, 0xc5, 0x60, 0xfc,
  0x37, 0xc6, 0xd4, 0xd6, 0xe2, 0xf4, 0x5c, 0x20, 0x91, 0xd8, 0xd7, 0x0b, 0x61, 0xa9, 0xac, 0xd6,
  0x2a, 0x09, 0xf0, 0xba, 0x79, 0x1f, 0x69, 0xd2, 0xce, 0x0d, 0x35, 0xf4, 0x04, 0xe3, 0xd1, 0xd8,
  0x79, 0x27, 0x24, 0x2f, 0x1d, 0xbf, 0xf1, 0x86, 0x8e, 0x55, 0x65, 0xf5, 0x55, 0xc6, 0xf8, 0xe4,
  0x04, 0x33, 0x90, 0x75, 0x49, 0x58, 0xc2, 0x8b, 0x21, 0x2c, 0x8d, 0x73, 0x43, 0xd6, 0x95, 0xb1,
  0x37, 0x94, 0x13, 0xb0, 0xbb, 0xf1, 0x83, 0x1a, 0xc7, 0xbd, 0xd1, 0xa1, 0xa2, 0x4c, 0x02, 0x77,
  0x9d, 0x08, 0x60, 0x82, 0xaa, 0x28, 0xa8, 0xaa, 0xb6, 0x36, 0xad, 0xee, 0x58, 0x59, 0x6b, 0x80,
  0x7d, 0x4e, 0x23, 0xa0, 0xad, 0x0c, 0x0c, 0xd1, 0x0e, 0x49, 0x35, 0x0e, 0x13, 0x0f, 0x4b, 0xd9,
  0xed, 0x09, 0xab, 0xf3, 0xa9, 0x32, 0x99, 0xaa, 0x18, 0x8d, 0x68, 0xf5, 0x99, 0x04, 0x1b, 0xaf,
  0x04, 0x1d, 0x30, 0xf3, 0x75, 0xfa, 0x95, 0xf6, 0xd4, 0x8e, 0x00, 0x25, 0xd1, 0xa0, 0x9e, 0xc0,
  0x50, 0x06, 0xa3, 0x77, 0x0d, 0x51, 0xd7, 0x54, 0xf5, 0x7c, 0x24, 0x4f, 0x85, 0x57, 0x05, 0x60,
  0x59, 0xd1, 0xb7, 0x78, 0xd0, 0x40, 0x50, 0x96, 0xb2, 0xfe, 0x73, 0x21, 0x60, 0x78, 0xe1, 0xf9,
  0xf9, 0x12, 0x23, 0x1b, 0xad, 0xa8, 0x6f, 0x8c, 0x8b, 0xb4, 0xb8, 0x62, 0x15, 0xa7, 0xb1, 0xce,
  0x38, 0xad, 0x28, 0x22, 0x30, 0x52, 0x72, 0x0c, 0x08, 0x22, 0xc6, 0xac, 0x22, 0x5b, 0xe0, 0xd6,
  0xd5, 0x36, 0xce, 0x9c, 0x59, 0x9c, 0xa4, 0xc0, 0x77, 0x3c, 0x49, 0xdf, 0x97, 0xf1, 0x7f, 0x9c,
  0x23, 0x32, 0xc0, 0x5a, 0x04, 0x9d, 0xb1, 0xaa, 0x6d, 0xae, 0x85, 0xb5, 0xa9, 0xdd, 0x84, 0x20,
  0x77, 0xbe, 0xbb, 0xb6, 0xf0, 0xf2, 0xc4, 0x73, 0x66, 0x49, 0x40, 0x27, 0x7e, 0xbb, 0xdd, 0x3c,
  0x11, 0xcf, 0xeb, 0x0f, 0x98, 0x5d, 0x39, 0xac, 0x44, 0x58, 0x35, 0xc5, 0x90, 0x98, 0xd1, 0xc0,
  0xf8, 0x4b, 0x20, 0x25, 0x68, 0x94, 0xf6, 0x1b, 0x03, 0x83, 0x8c, 0xf5, 0x29, 0x99, 0x0e, 0x62,
  0xb9, 0x49, 0x20, 0xac, 0xe1, 0x61, 0x4f, 0x3b, 0x98, 0xb4, 0xe0, 0x01, 0x8e, 0x31, 0xdb, 0x8a,
  0x1b, 0xcd, 0x9b, 0x23, 0x41, 0xbe, 0xd3, 0xf5, 0xc4, 0x0e, 0x76, 0x24, 0x6c, 0x98, 0xcb, 0x90,
  0x64, 0x0c, 0x61, 0x06, 0xe1, 0x44, 0xe3, 0x96, 0x01, 0x7d, 0xe4, 0x31, 0x1a, 0xa6, 0xea, 0x19,
  0xc7, 0xf7, 0x8b, 0xb9, 0xbc, 0xc3, 0xd0, 0xf8, 0x60, 0x9f, 0x03, 0xe1, 0xb7, 0x05, 0x02, 0xf2,
  0x55, 0x50, 0x03, 0x65, 0x69, 0xbc, 0x74, 0x68, 0xe1, 0xb1, 0xaa, 0xfb, 0xc3, 0xac, 0x03, 0x5d,
  0x76, 0x3a, 0x7a, 0x38, 0x63, 0x1c, 0xa6, 0xd0, 0x35, 0x13, 0x39, 0x22, 0x25, 0xc9, 0x93, 0xb8,
  0x27, 0x2e, 0xfe, 0xda, 0x29, 0x01, 0xb2, 0x2c, 0x6b, 0x40, 0x63, 0xf2, 0x16, 0x86, 0xe3, 0xa0,
  0x5e, 0xba, 0x40, 0x6b, 0x02, 0x31, 0x54, 0x37, 0x92, 0xdb, 0x37, 0x8c, 0x81, 0xa3, 0x07, 0x0b,
  0x45, 0x92, 0x54, 0x99, 0xc6, 0x26, 0x7b, 0xa3, 0xab, 0x43, 0x66, 0xcb, 0xe1, 0x40, 0x5f, 0x8c,
  0x90, 0xe0, 0x81, 0x98, 0x60, 0x27, 0x4a, 0xd5, 0x0a, 0x05, 0x3e, 0x04, 0xea, 0x8d, 0x04, 0x26,
  0x0d, 0x33, 0x36, 0xc7, 0x9c, 0x6c, 0xdf, 0x13, 0xe1, 0x6e, 0x1d, 0x60, 0x20, 0x8c, 0xe5, 0xa1,
  0x12, 0xa9, 0x43, 0x28, 0x94, 0x38, 0x00, 0x45, 0x09, 0x77, 0x52, 0x76, 0x89, 0x04, 0x1d, 0x6d,
  0xe5, 0xa0, 0x63, 0xb3, 0x9d, 0x35, 0x37, 0x47, 0x2b, 0xab, 0xcf, 0x07, 0x05, 0xae, 0x3c, 0x2c,
  0xcb, 0xf8, 0xb8, 0xcd, 0xed, 0xdd, 0xe1, 0x01, 0x80, 0x03, 0x72, 0x4c, 0xe3, 0x01, 0x8c, 0x64,
  0x3f, 0x81, 0x2e, 0x50, 0xca, 0xbf, 0xca, 0x27, 0x61, 0x08, 0x71, 0xe6, 0x8b, 0xb2, 0xc0, 0xa3,
  0x58, 0xc2, 0xc1, 0x98, 0x8d, 0x11, 0xdc, 0x87, 0x30, 0x2e, 0x3f, 0x82, 0x00, 0x08, 0x59, 0x67,
  0xab, 0x7c, 0xc7, 0x0e, 0x1c, 0x3e, 0xd0, 0x65, 0x5c, 0x80, 0x5e, 0x65, 0xef, 0xbc, 0xa3, 0xaf,
  0x44, 0xd2, 0xe1, 0xb7, 0x23, 0xd1, 0xe2, 0x6e, 0x0c, 0x79, 0x9a, 0x90, 0xef, 0xc8, 0xa9, 0x1c,
  0xeb, 0xc4, 0x0a, 0x86, 0xa3, 0x7b, 0x25, 0x34, 0xf3, 0xfe, 0x95, 0x1f, 0x8f, 0x41, 0xf0, 0x1b,
  0xce, 0x60, 0x9c, 0xd3, 0x40, 0x74, 0x8f, 0xf4, 0x45, 0xc8, 0xb6, 0x5c, 0x77, 0x30, 0x60, 0xce,
  0x19, 0x4c, 0xc7, 0xfe, 0x18, 0x0b, 0xd0, 0x6a, 0xa6, 0xd6, 0x74, 0x0a, 0xce, 0x37, 0x8f, 0x70,
  0x1e, 0x83, 0x22, 0x10, 0xff, 0xc7, 0x45, 0xde, 0x88, 0x33, 0xb2, 0x60, 0xc8, 0xe7, 0x20, 0x60,
  0x98, 0xf7, 0x0b, 0x1c, 0x55, 0x98, 0x65, 0x07, 0xf3, 0xe0, 0xc8, 0x42, 0xe2, 0x0b, 0x93, 0x3f,
  0x3a, 0x06, 0xd9, 0x78, 0x30, 0x96, 0xdf, 0x9e, 0xcc, 0x63, 0x55, 0xde, 0xde, 0x90, 0xb9, 0x7b,
  0xae, 0x98, 0xf2, 0xc2, 0xb0, 0xd7, 0xd8, 0xd9, 0xda, 0x30, 0x95, 0xf1, 0xee, 0xdc, 0x1a, 0x19,
  0x3b, 0xd9, 0x89, 0xb4, 0x4f, 0xbb, 0x51, 0xe3, 0x17, 0x57, 0x79, 0xef, 0xac, 0x49, 0x5d, 0x7c,
  0x33, 0x6e, 0x2c, 0x21, 0x75, 0x2e, 0xbf, 0x42, 0x3d, 0xc3, 0x5e, 0xd9, 0x0c, 0x53, 0xd8, 0x01,
  0xc2, 0xae, 0x28, 0xa1, 0x32, 0xc4, 0xe9, 0xa9, 0xbd, 0xd0, 0x42, 0xd3, 0xe2, 0x7c, 0xe7, 0xa6,
  0x5b, 0xdf, 0x21, 0xd1, 0xff, 0xa0, 0x6a, 0x20, 0x05, 0xc8, 0x89, 0x27, 0xf7, 0x14, 0x80, 0x77,
  0xb0, 0x20, 0x83, 0x92, 0x2b, 0xf3, 0x0d, 0xfb, 0x6d, 0x49, 0x4d, 0xb2, 0xcc, 0xf9, 0x8f, 0x2b,
  0x65, 0xc8, 0x41, 0x92, 0xaf, 0x16, 0x8e, 0x69, 0xd4, 0x84, 0x56, 0xd7, 0x99, 0x82, 0x37, 0x31,
  0x43, 0x13, 0xf3, 0x97, 0x24, 0x71, 0xbc, 0x1d, 0xa5, 0xec, 0xf5, 0xc6, 0x16, 0xdd, 0x74, 0xe9,
  0x18, 0x2b, 0xba, 0x61, 0xbe, 0x79, 0x57, 0xec, 0x34, 0xae, 0x42, 0x9e, 0x69, 0xf0, 0xfe, 0xd5,
  0xd4, 0x04, 0x2c, 0xe3, 0xc6, 0xde, 0x1f, 0x1d, 0xbc, 0x7c, 0x1c, 0xb0, 0xde, 0x5a, 0x4b, 0xee,
  0x15, 0x8c, 0xf9, 0x27, 0x54, 0x24, 0x7f, 0xd7, 0xb0, 0x67, 0xce, 0xbc, 0x40, 0xe4, 0x03, 0xbc,
  0x65, 0x53, 0x2e, 0x4f, 0x19, 0x29, 0x8f, 0x7c, 0x75, 0xa8, 0x58, 0x3c, 0xc5, 0xce, 0x21, 0x27,
  0x6e, 0x4b, 0x64, 0x0f, 0x27, 0x83, 0xa4, 0x01, 0x0d, 0x23, 0x93, 0x41, 0xfe, 0x0f, 0x88, 0xc4,
  0x50, 0x46, 0xa0, 0x9d, 0xbf, 0x30, 0xa6, 0x78, 0x40, 0xc8, 0x3d, 0x94, 0x00, 0xca, 0xe6, 0x82,
  0x9e, 0x43, 0xa2, 0x27, 0x2b, 0x32, 0x20, 0x64, 0xf3, 0x20, 0x7b, 0xbd, 0x5f, 0x4c, 0x06, 0xff,
  0xd1, 0x65, 0xd4, 0x50, 0xe4, 0x84, 0x7d, 0xd6, 0xc1, 0xcd, 0x72, 0x80, 0xcb, 0xba, 0xae, 0xe9,
  0x5e, 0xe8, 0x07, 0xf4, 0xfd, 0x3a, 0xca, 0x1c, 0x6b, 0x13, 0xc6, 0x70, 0xa1, 0x49, 0x78, 0x98,
  0x27, 0x40, 0x29, 0x3a, 0xd1, 0x56, 0x5b, 0x67, 0x59, 0x82, 0x57, 0xeb, 0x70, 0x8a, 0x75, 0x66,
  0xc5, 0xab, 0x7d, 0x01, 0x59, 0x40, 0x2c, 0x20, 0x55, 0x8e, 0x0e, 0xae, 0x16, 0xaa, 0xc3, 0x0d,
  0x89, 0x4c, 0x39, 0xba, 0x64, 0xe7, 0x0c, 0xaf, 0x76, 0xe3, 0x25, 0x39, 0x3d, 0x60, 0xf3, 0x15,
  0x75, 0x97, 0x37, 0xc6, 0x1e, 0xd6, 0x2c, 0x10, 0x05, 0x0f, 0x6f, 0x68, 0x78, 0xe2, 0xc9, 0x9b,
  0xa8, 0xd3, 0x25, 0xc4, 0x4e, 0xca, 0xd8, 0x49, 0xc0, 0xee, 0x87, 0x87, 0x73, 0x42, 0x3a, 0x77,
  0x86, 0xc7, 0xb7, 0xe2, 0x94, 0x28, 0x69, 0x8f, 0x50, 0x09, 0xd5, 0xd0, 0xbe, 0x2a, 0x8b, 0xc9,
  0xc6, 0x3e, 0x1d, 0x95, 0x21, 0x8a, 0xa2, 0x25, 0xd3, 0xf2, 0xf9, 0xa3, 0xa7, 0xaa, 0x48, 0x4f,
  0x7e, 0xae, 0xb4, 0xd5, 0x4f, 0x47, 0x2b, 0xc6, 0x79, 0x65, 0xcf, 0x86, 0xdc, 0xd5, 0xf1, 0x03,
  0x59, 0x76, 0x97, 0x83, 0xb5, 0x9d, 0x33, 0x59, 0xb6, 0x1c, 0x2d, 0xc0, 0xdb, 0x07, 0x20, 0x70,
  0x82, 0xc1, 0xba, 0xe1, 0xa9, 0x4c, 0x2c, 0x26, 0x6f, 0x13, 0xc0, 0x85, 0x47, 0x8b, 0xa9, 0xaf,
  0x5e, 0xa4, 0x2f, 0x53, 0xc7, 0x91, 0x06, 0x1a, 0x79, 0x8b, 0x12, 0x11, 0x8f, 0x9f, 0x5e, 0xe9,
  0x7f, 0x78, 0x04, 0x29, 0xf3, 0xa9, 0x33, 0x48, 0x47, 0x26, 0xac, 0xf7, 0x54, 0xd2, 0x85, 0xa1,
  0x2a, 0x20, 0x37, 0x2c, 0xdc, 0xde, 0xec, 0x33, 0xcf, 0xd7, 0xd1, 0xa8, 0x2b, 0x32, 0x84, 0x11,
  0x74, 0x79, 0x6d, 0xca, 0x84, 0x21, 0xd2, 0x59, 0x77, 0x2e, 0x90, 0x77, 0xca, 0x0b, 0xee, 0xb4,
  0x20, 0xaf, 0x21, 0x82, 0x3b, 0x17, 0x0f, 0xc8, 0xa8, 0xa3, 0xd2, 0xc2, 0xe6, 0xce, 0xf3, 0xb4,
  0xef, 0xac, 0x2c, 0x4c, 0x87, 0x89, 0xfc, 0x1b, 0x58, 0x47, 0xd6, 0x9a, 0x81, 0x27, 0xca, 0x04,
  0x48, 0x14, 0x2d, 0x03, 0xe1, 0xb4, 0xf2, 0xc7, 0xbc, 0x33, 0x07, 0xb0, 0xae, 0xdd, 0xf5, 0x87,
  0x50, 0x01, 0x58, 0x7c, 0xbd, 0x18, 0x1d, 0x6f, 0xc1, 0x52, 0x22, 0x50, 0xcf, 0x00, 0x8a, 0x28,
  0x12, 0x63, 0x1f, 0x68, 0xf5, 0x9e, 0x21, 0xb4, 0xc7, 0x71, 0xb5, 0x0d, 0xf4, 0x37, 0xeb, 0xa7,
  0x8b, 0x7d, 0xce, 0x36, 0x54, 0xc9, 0xa7, 0x3a, 0x08, 0x39, 0x15, 0x88, 0xea, 0xcc, 0x54, 0x90,
  0xc0, 0x52, 0xc3, 0x76, 0xed, 0xff, 0xac, 0x96, 0x89, 0xb1, 0x47, 0xfe, 0xa3, 0x89, 0x12, 0xfe,
  0xef, 0x58, 0x5f, 0xd1, 0x20, 0x26, 0x1f, 0x76, 0x3f, 0x5d, 0xa5, 0xc8, 0xea, 0x0f, 0xf1, 0x46,
  0x20, 0x50, 0xfa, 0xff, 0xb8, 0xa3, 0x83, 0x5c, 0xba, 0x1d, 0xbb, 0x3c, 0xe8, 0x18, 0x19, 0xc8,
  0x90, 0x11, 0x1f, 0x1f, 0x91, 0x74, 0xdf, 0x88, 0xd6, 0x14, 0x8a, 0xa1, 0x81, 0x87, 0x7c, 0xc5,
  0x79, 0xd8, 0x91, 0xca, 0x6c, 0x80, 0xaf, 0xbc, 0x83, 0x6b, 0xe1, 0x73, 0xcc, 0xe4, 0xf0, 0xa6,
  0xbc, 0x33, 0x5f, 0x37, 0x78, 0x1a, 0xd1, 0x55, 0x49, 0x2c, 0x55, 0x65, 0x2a, 0xb9, 0x49, 0xf6,
  0x9c, 0x41, 0x1b, 0xe5, 0x2b, 0x18, 0x90, 0xb4, 0xc2, 0x89, 0x13, 0xb2, 0x07, 0xa6, 0xfa, 0x68,
  0x61, 0x62, 0x5d, 0x72, 0xe8, 0xf4, 0xc3, 0xda, 0x5e, 0xc5, 0x33, 0xe3, 0xf2, 0x50, 0x9e, 0xe8,
  0xa7, 0x17, 0x23, 0x73, 0xe9, 0x85, 0x60, 0x1f, 0xb8, 0x85, 0x64, 0xd7, 0x7e, 0x28, 0xb8, 0x8a,
  0x4e, 0xda, 0x05, 0x90, 0x21, 0x34, 0xf3, 0x2c, 0x16, 0x57, 0x3e, 0x12, 0x1e, 0xaa, 0x8c, 0x07,
  0x7a, 0xc6, 0x01, 0x87, 0x6c, 0xa6, 0xa0, 0x34, 0x86, 0xe9, 0x51, 0x63, 0x45, 0x05, 0xf6, 0xbd,
  0x96, 0x74, 0x6d, 0x65, 0xf1, 0x6b, 0xcc, 0xcf, 0x9a, 0xa9, 0x54, 0xfc, 0xc8, 0x41, 0x6d, 0x58,
  0x7d, 0x9d, 0xd3, 0xf6, 0x80, 0x1c, 0x1e, 0x45, 0x3c, 0x7f, 0x55, 0x0c, 0x65, 0xa4, 0xa8, 0x28,
  0xa6, 0xa6, 0x60, 0x61, 0xca, 0x4b, 0xff, 0x29, 0x70, 0x3f, 0x4b, 0x65, 0x25, 0x60, 0x5a, 0xf8,
  0x5f, 0x9c, 0x92, 0xe5, 0xdc, 0xf0, 0x19, 0x56, 0x8e, 0x36, 0x78, 0x79, 0xaa, 0xf7, 0x19, 0xbb,
  0xb2, 0xeb, 0x2d, 0xb0, 0x55, 0xbc, 0x2c, 0x3d, 0xfc, 0x8e, 0x79, 0x22, 0x1a, 0x6d, 0xb6, 0x1d,
  0x0e, 0xdd, 0x42, 0x25, 0x8f, 0x9e, 0x79, 0x3d, 0x66, 0x16, 0x43, 0x35, 0xe1, 0xa0, 0x1e, 0x70,
  0xc6, 0x8b, 0x68, 0x9c, 0x6f, 0xfc, 0x1a, 0x23, 0x3d, 0x81, 0x0c, 0x19, 0x2e, 0xfa, 0x69, 0x8f,
  0x06, 0x9b, 0x39, 0x9c, 0x78, 0xb9, 0xa3, 0xcb, 0x0a, 0x82, 0x19, 0x79, 0xe0, 0x64, 0x9d, 0xca,
  0x1e, 0xf1, 0xe5, 0x33, 0xca, 0x44, 0xe7, 0x20, 0x33, 0x75, 0x87, 0x68, 0x2b, 0x1c, 0x9e, 0x13,
  0x66, 0x5e, 0x18, 0xbf, 0x78, 0x67, 0xf5, 0x12, 0x64, 0x8c, 0xac, 0xff, 0x96, 0xf0, 0xca, 0x22,
  0xe4, 0xfc, 0xdf, 0x7c, 0x87, 0xb0, 0xff, 0x34, 0xf7, 0x79, 0x55, 0x5d, 0xcf, 0x34, 0x80, 0xc1,
  0x66, 0xec, 0xff, 0x52, 0xc1, 0x39, 0xe0, 0xd1, 0xb2, 0x5c, 0x54, 0x40, 0xcd, 0xca, 0x18, 0x37,
  0x3e, 0x9f, 0x93, 0x3d, 0x0f, 0x57, 0xee, 0x7d, 0x10, 0x9e, 0x35, 0x01, 0x3b, 0x43, 0x2e, 0x9b,
  0xa0, 0xbe, 0xc6, 0xd0, 0x9c, 0xd0, 0xc4, 0xf7, 0x43, 0x8a, 0x38, 0xf2, 0xee, 0x60, 0x90, 0x33,
  0x81, 0x03, 0xf3, 0x96, 0xbe, 0x1f, 0x42, 0xe9, 0xeb, 0xb1, 0x26, 0xae, 0x8d, 0x43, 0x7a, 0xd3,
  0xf4, 0x50, 0xaa, 0x5f, 0x86, 0x0e, 0x99, 0xbb, 0x2e, 0x2a, 0xcb, 0x25, 0xba, 0x46, 0x57, 0x68,
  0xef, 0x10, 0x0f, 0x82, 0x0f, 0xfa, 0x41, 0x71, 0x20, 0x9e, 0xbf, 0xf8, 0xf1, 0xb5, 0x14, 0x4f,
  0xa6, 0xbb, 0xfc, 0x49, 0x46, 0x09, 0xff, 0x07, 0xe9, 0xdb, 0xad, 0xe1, 0x70, 0x62, 0xca, 0x37,
  0xa0, 0x78, 0xe6, 0x9e, 0xdc, 0x70, 0x71, 0xc8, 0x01, 0xef, 0x17, 0x2b, 0xc3, 0x34, 0x4e, 0x70,
  0x6b, 0x26, 0xc8, 0x5f, 0x85, 0xb8, 0xbd, 0xf4, 0x4a, 0xf2, 0x58, 0x58, 0xab, 0x26, 0x31, 0x57,
  0xb5, 0xc0, 0xe5, 0x0f, 0x9f, 0xe0, 0xf9, 0x03, 0xc7, 0xa4, 0x21, 0xbc, 0x42, 0x9f, 0xfe, 0x34,
  0x14, 0x82, 0xcb, 0xc7, 0xc0, 0xf4, 0xb0, 0x69, 0x78, 0x21, 0x2e, 0xc7, 0x1e, 0x7d, 0xde, 0xa7,
  0xc1, 0x5d, 0x5e, 0x3a, 0xba, 0x1a, 0x31, 0x76, 0x3f, 0x42, 0x25, 0x7c, 0xb2, 0x3a, 0x1e, 0xd5,
  0x2c, 0x9d, 0x64, 0x21, 0xb3, 0x12, 0xc6, 0x64, 0xa3, 0xa3, 0x4a, 0xe9, 0x77, 0x0e, 0x85, 0xba,
  0xb0, 0x41, 0xe4, 0x24, 0x98, 0x2c, 0x2a, 0x06, 0x07, 0x84, 0x10, 0x70, 0xc4, 0x43, 0xba, 0x38,
  0x15, 0xd4, 0xb1, 0x9f, 0x83, 0x2e, 0x2d, 0x8b, 0xec, 0x92, 0xba, 0x79, 0x25, 0x59, 0x0d, 0xa3,
  0x81, 0xc7, 0xe7, 0x4a, 0xa9, 0xf0, 0x19, 0x22, 0x00, 0x45, 0xf1, 0xaa, 0x96, 0x23, 0x3e, 0xd1,
  0x43, 0xcf, 0x55, 0x70, 0x09, 0xc9, 0x38, 0x8c, 0x6c, 0x27, 0x11, 0xe1, 0x1d, 0x68, 0x25, 0x64,
  0x9a, 0x5f, 0x18, 0xe2, 0x74, 0xae, 0xba, 0xfd, 0x44, 0x1f, 0x61, 0x26, 0x63, 0xad, 0xac, 0xd9,
  0xfc, 0x01, 0xd8, 0x94, 0x35, 0x4d, 0x5e, 0x0f, 0xab, 0xa5, 0x4e, 0xd7, 0xf2, 0x2c, 0x45, 0xd4,
  0x1f, 0x4d, 0x7a, 0xcc, 0xd8, 0x17, 0xee, 0x1c, 0xd0, 0xd1, 0x35, 0x39, 0x02, 0xbd, 0xb0, 0x14,
  0xb6, 0x94, 0x25, 0x3e, 0x53, 0x36, 0x28, 0x68, 0x60, 0x7e, 0x62, 0x40, 0x1c, 0xa7, 0x96, 0x6d,
  0x4b, 0xe5, 0xdd, 0xb5, 0x3b, 0xff, 0x81, 0xe2, 0x12, 0xc6, 0x7c, 0x48, 0x38, 0xea, 0xbe, 0x49,
  0x11, 0xf1, 0x00, 0x26, 0x19, 0x69, 0xc0, 0xba, 0x42, 0xca, 0x6e, 0xd6, 0xfe, 0xa4, 0x05, 0xed,
  0x7b, 0x27, 0x48, 0x85, 0x00, 0xfd, 0x90, 0x6e, 0x74, 0x97, 0x2d, 0x40, 0xae, 0x74, 0xea, 0xc8,
  0x30, 0x90, 0x6e, 0x53, 0xbf, 0x2d, 0xa5, 0x23, 0xf3, 0xff, 0x31, 0x5e, 0x5a, 0x1c, 0xed, 0x52,
  0x2e, 0xee, 0xa7, 0xff, 0x35, 0x79, 0x97, 0xa5, 0xcf, 0xd6, 0xbf, 0x8c, 0x7b, 0x89, 0x7e, 0x2d,
  0x8c, 0x4d, 0x59, 0x77, 0x8d, 0xbb, 0x48, 0x24, 0xc4, 0xb8, 0x0b, 0xa8, 0xc3, 0x1f, 0x35, 0x6e,
  0xc3, 0xf4, 0x3b, 0xf6, 0xec, 0x7a, 0x87, 0xe5, 0x08, 0xe9, 0xaf, 0xac, 0x09, 0xea, 0x8e, 0x6c,
  0xde, 0x75, 0x0a, 0x78, 0x4c, 0xa6, 0xeb, 0x03, 0xfd, 0xc4, 0x1a, 0x60, 0x8b, 0xa3, 0x50, 0x52,
  0x90, 0xff, 0x52, 0x21, 0x6a, 0xa1, 0xb5, 0x95, 0x91, 0xcb, 0x93, 0x9d, 0x0c, 0xcb, 0xa6, 0x08,
  0xcd, 0x3b, 0x96, 0x0e, 0xb2, 0xc5, 0xbb, 0x3d, 0x44, 0x94, 0xa7, 0xc3, 0xa9, 0xe9, 0xa7, 0x38,
  0xd9, 0x8a, 0x18, 0xad, 0x82, 0xee, 0x41, 0xfb, 0xae, 0x9a, 0x89, 0x73, 0x01, 0x8d, 0x0b, 0xd7,
  0xba, 0x72, 0x46, 0xde, 0xae, 0x04, 0xb0, 0x77, 0xa5, 0x03, 0x5a, 0x7a, 0xcc, 0x53, 0xb2, 0x35,
  0x37, 0x42, 0x1f, 0x8d, 0xe5, 0x51, 0xc0, 0x9a, 0x21, 0xf9, 0xb6, 0xf9, 0x74, 0xc4, 0x4e, 0x0a,
  0xaf, 0x62, 0x19, 0x83, 0x87, 0x62, 0xde, 0x18, 0xc5, 0x3d, 0x4e, 0xdf, 0x4c, 0xd8, 0x2c, 0x3b,
  0x0a, 0x30, 0xe4, 0xba, 0x22, 0x17, 0xec, 0x14, 0x88, 0xf5, 0xbf, 0x0b, 0x59, 0x52, 0x04, 0x46,
  0x50, 0x55, 0x06, 0xba, 0xcf, 0xc4, 0x5c, 0x1f, 0x48, 0x3e, 0x4f, 0x76, 0x30, 0x69, 0xaa, 0xbb,
  0xf5, 0x88, 0xde, 0xdc, 0xf8, 0x1b, 0x43, 0xb6, 0xe9, 0x88, 0xf1, 0x63, 0xe9, 0x4c, 0xc4, 0x99,
  0xf4, 0x7e, 0x02, 0xde, 0x65, 0x21, 0x4f, 0x6b, 0x7a, 0xb7, 0x66, 0x6c, 0x6b, 0xf6, 0xe2, 0xf2,
  0xef, 0x9e, 0xfd, 0x4d, 0xb2, 0xc5, 0xee, 0xdf, 0x47, 0xcc, 0x59, 0xfb, 0x88, 0x5e, 0xfb, 0x10,
  0xe7, 0x88, 0xdf, 0xb9, 0xeb, 0x18, 0x89, 0x7e, 0xfb, 0xdd, 0x5b, 0x88, 0x9a, 0x6f, 0x74, 0x7a,
  0x9d, 0xc0, 0x36, 0x9d, 0xc9, 0x5d, 0x11, 0x74, 0xbf, 0x52, 0x54, 0x5b, 0xe2, 0x22, 0x68, 0xab,
  0x7a, 0xae, 0xbc, 0x49, 0x5a, 0x37, 0xe9, 0xe1, 0x4e, 0x3d, 0xa3, 0x2d, 0xa1, 0x09, 0xe9, 0x36,
  0xa2, 0x2d, 0xef, 0xe1, 0x37, 0x16, 0xc7, 0x4b, 0xd8, 0x96, 0x9a, 0x75, 0x9d, 0xda, 0x77, 0x49,
  0x79, 0x65, 0x44, 0x55, 0x30, 0x0c, 0x28, 0x40, 0xb7, 0x1c, 0x22, 0x0c, 0x01, 0x03, 0xdf, 0x8e,
  0x47, 0x28, 0xf2, 0xa3, 0x2e, 0xbc, 0x0a, 0x5d, 0x52, 0x85, 0x69, 0xca, 0x32, 0xf0, 0xe5, 0x97,
  0xef, 0x49, 0xa8, 0xfa, 0xe3, 0x7b, 0xd2, 0x01, 0xc5, 0x78, 0x61, 0x59, 0x57, 0xfb, 0x44, 0x18,
  0x05, 0x5a, 0x86, 0x6e, 0x47, 0xfc, 0xd9, 0xb8, 0xf9, 0xe4, 0x49, 0x25, 0x85, 0x6c, 0xa3, 0x38,
  0x50, 0xd4, 0x9d, 0x25, 0x91, 0x1f, 0xbd, 0x5a, 0xef, 0x9e, 0xa7, 0x0d, 0x33, 0xf6, 0x8f, 0xa7,
  0xa8, 0x65, 0x13, 0x23, 0x00, 0x4a, 0x25, 0xe8, 0xbb, 0xa8, 0x2a, 0xe2, 0x1c, 0x6f, 0x0d, 0x5c,
  0x82, 0xf1, 0x79, 0x01, 0x53, 0x88, 0xd8, 0x97, 0x17, 0x78, 0xf1, 0x1e, 0x73, 0xcb, 0x44, 0x93,
  0x51, 0xe8, 0xdc, 0x77, 0xc5, 0x86, 0x40, 0xee, 0x45, 0x8a, 0xfc, 0xf8, 0xe5, 0xeb, 0x56, 0xce,
  0xa5, 0x53, 0x37, 0xdf, 0x93, 0xca, 0x8f, 0xef, 0x2b, 0x0f, 0xd2, 0xf4, 0x9e, 0xa5, 0xc8, 0x8f,
  0xaa, 0xb6, 0x90, 0xbf, 0x27, 0x57, 0xd0, 0x7d, 0xda, 0xd0, 0xef, 0x69, 0xb1, 0xc5, 0x56, 0x78,
  0xcb, 0x61, 0x78, 0xb4, 0xf1, 0x6c, 0x6e, 0x74, 0xbc, 0xf1, 0x22, 0xad, 0xfc, 0x47, 0xdb, 0x37,
  0x64, 0xd3, 0x04, 0x46, 0x36, 0x8e, 0x36, 0x9e, 0x12, 0x32, 0xc7, 0x1b, 0xef, 0x5a, 0xb5, 0x03,
  0xad, 0xfb, 0xc7, 0xe4, 0x70, 0x68, 0xfc, 0xc1, 0x0c, 0xde, 0x71, 0x2f, 0xa2, 0xc0, 0x34, 0x22,
  0x9e, 0xa6, 0xac, 0x05, 0x29, 0x72, 0x0c, 0x42, 0x1a, 0xf0, 0x3e, 0xd5, 0x42, 0xe6, 0x83, 0xfc,
  0xec, 0x07, 0xf9, 0xb9, 0x0f, 0xf2, 0xf3, 0x1f, 0xe4, 0x5f, 0xba, 0xf9, 0x47, 0xe9, 0x41, 0x76,
  0x5f, 0x35, 0x93, 0xce, 0x0f, 0x7c, 0x71, 0x47, 0x90, 0xa4, 0x90, 0xd7, 0x9a, 0x97, 0x2a, 0x78,
  0x87, 0x24, 0x90, 0xc9, 0x19, 0x5f, 0x53, 0x9b, 0x4c, 0x54, 0xb9, 0x06, 0x62, 0x0f, 0xa7, 0xf4,
  0xef, 0xe7, 0xa2, 0x2e, 0xac, 0x6d, 0xeb, 0xe0, 0x30, 0x1e, 0xa0, 0x50, 0xfc, 0x18, 0x05, 0x8b,
  0x1d, 0xff, 0x18, 0x16, 0xe1, 0xbc, 0xec, 0xa1, 0x17, 0x95, 0x1f, 0x82, 0x61, 0xfa, 0x89, 0x8e,
  0xc9, 0x28, 0xf2, 0x1d, 0xf4, 0xc8, 0x3e, 0x4d, 0x24, 0x90, 0xeb, 0xf7, 0xf9, 0x47, 0x7e, 0x1c,
  0xa6, 0x59, 0x52, 0x6c, 0xa4, 0xbb, 0x9d, 0x77, 0x85, 0x09, 0x63, 0x2d, 0x2a, 0x47, 0xa9, 0x5e,
  0x54, 0x35, 0x43, 0x76, 0xf0, 0xa6, 0x50, 0x02, 0x48, 0x5a, 0x33, 0xfd, 0x38, 0x9e, 0xa1, 0xdb,
  0x13, 0x58, 0xc0, 0xbe, 0xb1, 0x12, 0xef, 0xcc, 0xb4, 0xae, 0x8c, 0x63, 0xe0, 0x3f, 0x09, 0xe4,
  0xf9, 0x2e, 0x58, 0xd3, 0xb3, 0xeb, 0x10, 0x61, 0x50, 0x06, 0x82, 0xf4, 0x1e, 0x8f, 0xed, 0xeb,
  0x49, 0x8f, 0x14, 0x04, 0x82, 0xda, 0x80, 0x11, 0x6f, 0x4f, 0x7b, 0x7f, 0x88, 0x28, 0x1e, 0x3e,
  0x38, 0x41, 0x97, 0xe0, 0x25, 0x9f, 0x13, 0xd9, 0xfc, 0x69, 0xe3, 0x87, 0x77, 0x89, 0xc5, 0xb4,
  0xf8, 0x1b, 0xa8, 0x04, 0x8c, 0x9c, 0x30, 0x13, 0xea, 0x2d, 0xe8, 0xa4, 0xba, 0x6c, 0xae, 0x75,
  0x44, 0x40, 0x16, 0xf4, 0x9e, 0xb2, 0xc0, 0x6d, 0xbe, 0x98, 0xa9, 0xfd, 0x14, 0x57, 0xf1, 0x84,
  0x79, 0x2b, 0x69, 0xe2, 0x7a, 0x01, 0xb2, 0xe2, 0x02, 0xc0, 0xf0, 0xaa, 0x8c, 0xaf, 0xdc, 0xae,
  0x26, 0xc5, 0x14, 0xc3, 0x82, 0x49, 0xbb, 0xfc, 0xcf, 0x63, 0x24, 0xb8, 0x8e, 0x04, 0xb6, 0x76,
  0x22, 0xf1, 0x44, 0xfa, 0xf6, 0x56, 0xfb, 0xe5, 0x97, 0x98, 0x7c, 0x14, 0x78, 0x44, 0x4c, 0x43,
  0x31, 0x40, 0xee, 0x17, 0x31, 0x7d, 0x1b, 0x39, 0x93, 0x97, 0xa2, 0x26, 0xc9, 0xfd, 0x4e, 0xad,
  0xa8, 0xc1, 0xaa, 0xbe, 0x84, 0x52, 0x31, 0x19, 0x43, 0x7c, 0xd6, 0x72, 0x3c, 0x61, 0xbd, 0x40,
  0x3f, 0x12, 0xe6, 0x05, 0xd5, 0x85, 0x7a, 0xda, 0xea, 0x96, 0xbe, 0x01, 0x32, 0x46, 0xdc, 0x9b,
  0xfe, 0xc3, 0x93, 0x01, 0x18, 0x2c, 0xd7, 0xaa, 0xfa, 0xe5, 0x76, 0xbb, 0x50, 0xa1, 0xb3, 0xbf,
  0xfc, 0x42, 0x7f, 0x2f, 0x04, 0x50, 0xb7, 0xcc, 0x58, 0x3c, 0x41, 0x3f, 0x6f, 0x97, 0xf2, 0x86,
  0x79, 0x6a, 0xdc, 0x57, 0x4d, 0x73, 0xd5, 0x91, 0x5f, 0xd6, 0xb2, 0x61, 0x5a, 0x39, 0x17, 0xda,
  0x12, 0x99, 0x65, 0x67, 0xa0, 0x0a, 0x2b, 0x4e, 0xd1, 0x97, 0x7e, 0x6b, 0x13, 0x3d, 0x16, 0x7f,
  0x53, 0xc6, 0xb1, 0xdc, 0xad, 0x05, 0xfb, 0x82, 0x14, 0x44, 0x79, 0x20, 0xff, 0xf2, 0x4b, 0x26,
  0x95, 0x72, 0xd2, 0x0d, 0x22, 0x22, 0xe8, 0x78, 0x68, 0x09, 0xf9, 0x46, 0x76, 0x2b, 0x18, 0xd0,
  0x53, 0x43, 0xee, 0x01, 0xd1, 0x2e, 0x40, 0x07, 0x51, 0xcc, 0x58, 0xf2, 0x3d, 0x9d, 0x04, 0xa2,
  0x68, 0x93, 0x9f, 0x64, 0x9b, 0xe6, 0x56, 0xbe, 0x30, 0xa6, 0xca, 0x18, 0x31, 0x05, 0x78, 0xce,
  0x07, 0xf4, 0xca, 0x74, 0x48, 0x12, 0x4f, 0x68, 0x9e, 0x62, 0xda, 0x85, 0x2a, 0x2f, 0x27, 0xe6,
  0xf4, 0x47, 0xca, 0x2d, 0x74, 0x76, 0xab, 0xf9, 0x08, 0x74, 0x7b, 0x85, 0x4f, 0xc2, 0xa5, 0xd2,
  0xad, 0x27, 0xf3, 0xfd, 0xdd, 0xe9, 0xfa, 0x4a, 0x5e, 0xc6, 0x22, 0x15, 0xbe, 0x17, 0x49, 0x44,
  0xbc, 0xcb, 0xed, 0x3f, 0xc5, 0x0c, 0x8c, 0x97, 0x83, 0xe3, 0x99, 0x9a, 0xf8, 0x92, 0xb2, 0x29,
  0x79, 0x61, 0xc8, 0x4b, 0x50, 0x8e, 0xa0, 0x39, 0xe4, 0xad, 0x5b, 0x98, 0x07, 0x36, 0xb3, 0x05,
  0x39, 0x34, 0x91, 0x96, 0xb3, 0xf1, 0xc4, 0x97, 0xf4, 0xbb, 0xc3, 0xc3, 0xf2, 0x12, 0x83, 0xc3,
  0x7e, 0x1e, 0xb0, 0x72, 0xfc, 0xed, 0x20, 0x29, 0x15, 0x77, 0xab, 0x81, 0xfa, 0x76, 0xac, 0x5e,
  0x08, 0xb7, 0xbb, 0xf5, 0x0c, 0x4f, 0x79, 0xc1, 0xb0, 0x58, 0x1a, 0xc7, 0xd4, 0xcf, 0xf4, 0xb7,
  0x5f, 0x52, 0xc7, 0xeb, 0x80, 0x52, 0x15, 0x56, 0xc3, 0xd3, 0x29, 0x1a, 0xa4, 0xfb, 0xd3, 0x3b,
  0x3f, 0x70, 0x6e, 0x5a, 0xd3, 0x51, 0x03, 0x1e, 0x00, 0xdd, 0x53, 0x94, 0x63, 0xc9, 0x5e, 0xb7,
  0x97, 0x9c, 0x24, 0x22, 0xdf, 0xd1, 0x84, 0xa1, 0x1e, 0x99, 0xdb, 0xe8, 0xd7, 0xf1, 0x18, 0x37,
  0xa2, 0xa2, 0x3f, 0x20, 0x13, 0x24, 0x0b, 0xe4, 0xfc, 0x88, 0xc4, 0xdd, 0x2a, 0xb5, 0x66, 0x39,
  0xbc, 0xca, 0x78, 0x1c, 0xfd, 0x01, 0x99, 0x4e, 0x95, 0x77, 0x64, 0x3d, 0x9b, 0xd5, 0x61, 0x3a,
  0x58, 0xa3, 0x03, 0xd3, 0xc9, 0xc3, 0x03, 0x29, 0x0f, 0xdb, 0xa5, 0x12, 0x87, 0x54, 0xb8, 0xf1,
  0x5e, 0x1e, 0x4c, 0x5f, 0x10, 0x2c, 0x68, 0x46, 0xa0, 0x0f, 0x8d, 0x05, 0x15, 0x03, 0x08, 0xe0,
  0x43, 0x59, 0xdd, 0x30, 0x7f, 0xc3, 0x8c, 0x95, 0xe1, 0xa6, 0x2f, 0xb5, 0xa6, 0xbc, 0xe9, 0xca,
  0x13, 0x27, 0xc9, 0x2a, 0xa3, 0x18, 0x0f, 0x4b, 0x4f, 0x29, 0x95, 0x75, 0x3f, 0x14, 0xe3, 0xfe,
  0xd5, 0xfb, 0x85, 0x8b, 0x85, 0xf7, 0xdb, 0x92, 0x93, 0x6e, 0x92, 0xb1, 0x5b, 0x8a, 0x5d, 0xe0,
  0x3e, 0x7f, 0x4a, 0x6f, 0xa2, 0x76, 0x64, 0x11, 0x21, 0x99, 0xfa, 0x9a, 0x54, 0xec, 0x4c, 0x46,
  0x9b, 0x00, 0x1a, 0xc4, 0xf5, 0x8d, 0xb8, 0xfd, 0x4a, 0xb6, 0x3a, 0x7e, 0xb3, 0x92, 0x6d, 0xe3,
  0x11, 0x33, 0x48, 0x71, 0x3b, 0x63, 0xa5, 0x6d, 0x64, 0x9d, 0xa6, 0x23, 0x54, 0x3b, 0x79, 0xa9,
  0x96, 0xd6, 0x3a, 0x24, 0x5e, 0xa6, 0xb0, 0x2f, 0x3d, 0x01, 0xdf, 0x53, 0x4e, 0x5e, 0x59, 0x90,
  0xe4, 0x40, 0xbb, 0x34, 0x2c, 0x56, 0x96, 0xca, 0x5b, 0x4f, 0x49, 0x11, 0x52, 0x3d, 0x9f, 0x86,
  0xf0, 0x2a, 0x4b, 0x2d, 0x10, 0x15, 0xb2, 0x69, 0x78, 0x4b, 0xad, 0x75, 0xb4, 0x3a, 0x69, 0x06,
  0xa4, 0x9f, 0xa7, 0xad, 0x0c, 0x58, 0x61, 0xcc, 0xfe, 0x0a, 0x26, 0x80, 0xec, 0x05, 0x22, 0x4f,
  0x8a, 0x60, 0x26, 0x62, 0x41, 0xc0, 0x4d, 0x95, 0x25, 0xef, 0x17, 0x74, 0x06, 0xaa, 0x2c, 0xd7,
  0x06, 0xe9, 0x11, 0xa4, 0x80, 0xbd, 0x04, 0x63, 0x65, 0xe5, 0x5a, 0x6f, 0x76, 0xcf, 0xc5, 0x86,
  0x26, 0x79, 0x88, 0x4e, 0xbf, 0x3d, 0xc3, 0x86, 0xcd, 0x6f, 0x3c, 0x15, 0x10, 0xa4, 0xbd, 0x02,
  0x40, 0x52, 0x32, 0x89, 0x8e, 0x12, 0xc3, 0x64, 0xc8, 0xb6, 0x24, 0x76, 0xa8, 0x83, 0x2f, 0x3d,
  0x8c, 0x3d, 0x06, 0xd9, 0x61, 0xae, 0x57, 0xb1, 0xa8, 0xc7, 0x09, 0x1e, 0x21, 0xc5, 0x22, 0xbf,
  0x45, 0x13, 0xcc, 0xdb, 0x7b, 0xdc, 0xd3, 0x43, 0x85, 0x72, 0xc3, 0xdb, 0xbb, 0x4d, 0x8e, 0x31,
  0x62, 0xf9, 0xc6, 0xfc, 0x8d, 0x21, 0xd7, 0x8f, 0x5f, 0xbf, 0xe1, 0x2d, 0x99, 0xd7, 0x11, 0x49,
  0xd0, 0xe7, 0x91, 0x04, 0x33, 0x9a, 0x5c, 0xbf, 0xad, 0x75, 0xf5, 0x3a, 0x12, 0x79, 0x4f, 0x80,
  0x59, 0xb8, 0x9a, 0x0a, 0x50, 0x60, 0x02, 0x66, 0xf7, 0x65, 0x02, 0x94, 0x28, 0xfc, 0x85, 0x74,
  0xea, 0x72, 0xc0, 0x74, 0x28, 0x06, 0xdf, 0x7f, 0x83, 0x94, 0xc5, 0x8a, 0xb9, 0x7e, 0x23, 0x19,
  0xc6, 0xf5, 0xdb, 0x0a, 0x56, 0x69, 0x59, 0xbf, 0xb6, 0x18, 0x49, 0x9f, 0x8c, 0xae, 0xed, 0x4e,
  0xbf, 0xac, 0x21, 0xcb, 0xce, 0x98, 0xca, 0x5b, 0x2b, 0xe3, 0x1d, 0xc9, 0x81, 0x71, 0xb4, 0xd7,
  0x34, 0x67, 0x25, 0x2e, 0x40, 0x47, 0xbd, 0xa6, 0x79, 0xcc, 0xdf, 0x10, 0x77, 0xe6, 0x6f, 0x8e,
  0xa4, 0x80, 0xc5, 0x45, 0x52, 0xe5, 0x81, 0xb3, 0x37, 0x57, 0x24, 0xab, 0x4d, 0x2c, 0x4e, 0x7a,
  0xa5, 0x8c, 0x99, 0xd8, 0x17, 0x67, 0x25, 0xa5, 0xbb, 0x76, 0xcc, 0x2f, 0xbf, 0x30, 0xb8, 0x70,
  0x95, 0x70, 0xac, 0x63, 0x18, 0x1c, 0xe3, 0x19, 0xfb, 0x1f, 0x4c, 0x16, 0x77, 0x05, 0x49, 0x65,
  0xd0, 0x77, 0xc8, 0x9a, 0x56, 0x37, 0x60, 0xd1, 0xc2, 0xf9, 0x8f, 0x94, 0x64, 0x10, 0x03, 0x1f,
  0x02, 0x30, 0xa5, 0xd4, 0x18, 0x86, 0x93, 0x43, 0x87, 0x69, 0x45, 0xe9, 0xc2, 0x6e, 0xd2, 0x5a,
  0xb8, 0x2f, 0x88, 0x4d, 0x8b, 0x03, 0xd5, 0xd2, 0x61, 0x79, 0xd0, 0xcd, 0x9d, 0x53, 0xe1, 0x26,
  0x08, 0x0e, 0x6f, 0x33, 0xdd, 0x15, 0xc7, 0x13, 0xc0, 0xec, 0x6f, 0x04, 0x0b, 0x86, 0x11, 0x7b,
  0x38, 0x38, 0x31, 0x18, 0xac, 0x0b, 0x32, 0x4c, 0x17, 0x38, 0x4a, 0xcc, 0xed, 0xed, 0x2d, 0x43,
  0x47, 0x8a, 0xe0, 0x85, 0xcf, 0xdf, 0x18, 0x32, 0xa8, 0x74, 0x54, 0xb1, 0x38, 0x0e, 0xc5, 0x05,
  0x1d, 0x88, 0x1b, 0x2b, 0x57, 0xf5, 0x66, 0x51, 0x3a, 0xdb, 0x59, 0xc8, 0xa0, 0xd2, 0x05, 0xf4,
  0x59, 0xdf, 0x75, 0xc9, 0x14, 0xd3, 0x74, 0x56, 0x55, 0x63, 0x51, 0xf7, 0x8e, 0xdf, 0x28, 0x69,
  0x0a, 0x84, 0x73, 0x8c, 0x88, 0xa1, 0x5b, 0x60, 0x57, 0xe5, 0xbb, 0x6c, 0xad, 0x9d, 0xf0, 0x7e,
  0x76, 0x16, 0x47, 0x54, 0xe4, 0x5f, 0x95, 0xdf, 0xac, 0x3e, 0x5b, 0x5e, 0x02, 0x80, 0xac, 0x32,
  0xff, 0x64, 0x22, 0xc4, 0x8d, 0x04, 0x8a, 0x0f, 0x3a, 0x0d, 0x22, 0x08, 0x2b, 0xa4, 0x4d, 0x68,
  0x70, 0x2a, 0xd1, 0x96, 0x80, 0xef, 0xe5, 0x4f, 0x02, 0x22, 0xc3, 0x10, 0x25, 0x11, 0xad, 0xd1,
  0x04, 0x29, 0x12, 0x72, 0x0c, 0x01, 0x2a, 0x90, 0x77, 0xe2, 0xad, 0xce, 0x59, 0x2f, 0x94, 0x7e,
  0x76, 0xfd, 0x91, 0x53, 0xdf, 0x73, 0x58, 0xc1, 0xae, 0x67, 0xb9, 0x5e, 0x02, 0x35, 0x00, 0xdb,
  0xc4, 0x21, 0x52, 0xfe, 0x32, 0x0b, 0xd3, 0x2a, 0x93, 0x22, 0x58, 0xe4, 0x83, 0xcd, 0x9a, 0xe7,
  0x23, 0x98, 0xad, 0xee, 0x10, 0x93, 0xe9, 0x86, 0x84, 0xa7, 0xa5, 0x94, 0x3d, 0xb0, 0xb4, 0x45,
  0x11, 0x34, 0xaa, 0xd5, 0x2e, 0x10, 0x0a, 0x96, 0x51, 0xe4, 0xa9, 0x9a, 0x29, 0x2f, 0x62, 0xd1,
  0x0d, 0x88, 0xa7, 0xbe, 0x02, 0x8c, 0x03, 0x60, 0xea, 0xdd, 0x87, 0x26, 0x90, 0x4d, 0x07, 0x53,
  0x59, 0x19, 0xef, 0x90, 0x71, 0xe2, 0x87, 0x8c, 0x66, 0x71, 0x15, 0x39, 0x47, 0x40, 0xf9, 0xd6,
  0xc6, 0x45, 0x3c, 0x4f, 0x47, 0x13, 0x51, 0x3c, 0x0a, 0x13, 0xf5, 0xe1, 0x28, 0x9e, 0x8f, 0x31,
  0x7d, 0x4c, 0xce, 0xcd, 0xf8, 0xd2, 0x33, 0x98, 0x9e, 0xc9, 0x64, 0x82, 0xe9, 0x59, 0x4c, 0xcf,
  0x66, 0xb3, 0xc1, 0xf4, 0x1c, 0xa6, 0xe7, 0x72, 0xb9, 0x60, 0x7a, 0x1e, 0xd3, 0xf3, 0xf9, 0x7c,
  0x30, 0xfd, 0x12, 0xd3, 0x2f, 0x2f, 0x2f, 0x83, 0xe9, 0x05, 0x4c, 0x2f, 0x14, 0x0a, 0xc1, 0xf4,
  0x11, 0xa6, 0x8f, 0x46, 0xa3, 0x60, 0xba, 0x88, 0xe9, 0xa2, 0x28, 0x06, 0xd3, 0x65, 0x4c, 0x97,
  0x65, 0x39, 0x98, 0x2e, 0x61, 0xba, 0x24, 0x49, 0xc1, 0x74, 0x9d, 0xb4, 0x9b, 0x3d, 0xa0, 0x8f,
  0x06, 0xe9, 0xa1, 0x27, 0x75, 0x82, 0x05, 0x8d, 0x91, 0x45, 0x49, 0x42, 0x1a, 0x6f, 0xfa, 0xd4,
  0xca, 0x38, 0xa0, 0x81, 0x39, 0x0a, 0x03, 0xee, 0x39, 0x9b, 0x73, 0x58, 0x41, 0xb0, 0x6b, 0x1c,
  0x3f, 0xf5, 0x73, 0x58, 0x69, 0x6a, 0x57, 0x3a, 0x72, 0x04, 0x08, 0x6b, 0x58, 0xbc, 0xe4, 0xe1,
  0x26, 0xdb, 0xbf, 0xe7, 0x88, 0xdd, 0xa0, 0x07, 0x68, 0xa5, 0x6b, 0xa6, 0x06, 0xa2, 0x88, 0x41,
  0xb1, 0x35, 0x56, 0x54, 0x58, 0x66, 0x68, 0x61, 0xaa, 0x09, 0xa1, 0xa8, 0x77, 0xf9, 0x5b, 0x59,
  0xe1, 0x3c, 0xf7, 0xf2, 0xf9, 0xc4, 0xe6, 0x73, 0x48, 0xad, 0xad, 0x1c, 0xe9, 0x40, 0x04, 0x3c,
  0xa9, 0x10, 0xa7, 0x09, 0x6f, 0xf4, 0xc7, 0x01, 0x02, 0xcd, 0x2e, 0x56, 0x66, 0x2c, 0x52, 0x86,
  0x16, 0x19, 0x5c, 0x74, 0x2f, 0x98, 0x96, 0x8a, 0x91, 0xce, 0x0c, 0xf1, 0x98, 0x33, 0x8f, 0xf7,
  0x7c, 0x89, 0xa9, 0xb5, 0xbe, 0x44, 0x6c, 0x88, 0x47, 0xa6, 0x17, 0x6d, 0xd6, 0x52, 0xd5, 0xec,
  0xb2, 0xef, 0x74, 0x3d, 0x40, 0xc1, 0xeb, 0x8a, 0xed, 0x1b, 0x9a, 0x00, 0xd9, 0x44, 0x18, 0x93,
  0x95, 0x3c, 0x68, 0xc4, 0x45, 0x45, 0x03, 0x64, 0xe9, 0x85, 0x38, 0x55, 0x54, 0x09, 0xf4, 0x11,
  0x0b, 0x1c, 0xc8, 0x55, 0x26, 0xa6, 0x50, 0x2d, 0x40, 0x61, 0xbe, 0x43, 0x5d, 0xbf, 0x64, 0xb5,
  0xfb, 0x26, 0x4a, 0xae, 0x7c, 0x75, 0x7d, 0xd9, 0xc4, 0x95, 0x05, 0x95, 0x23, 0x30, 0x78, 0x76,
  0xc0, 0x54, 0x3c, 0xe2, 0xc1, 0x14, 0x7e, 0xa8, 0xe6, 0xd4, 0x55, 0x35, 0x13, 0x6c, 0x01, 0xcc,
  0x5a, 0x93, 0x65, 0xaf, 0x67, 0x79, 0x57, 0xac, 0x44, 0xa2, 0x1c, 0xf5, 0x4d, 0x45, 0x75, 0x44,
  0x8e, 0x88, 0x8b, 0x38, 0x18, 0x75, 0xb1, 0x08, 0xdd, 0x7d, 0x01, 0x7d, 0x11, 0xf4, 0x03, 0xd7,
  0xa2, 0x73, 0x50, 0x83, 0x8a, 0x04, 0x8f, 0x58, 0xda, 0xa1, 0x11, 0x65, 0x30, 0xd7, 0xa2, 0xf1,
  0xd8, 0x81, 0xc1, 0x05, 0x36, 0x41, 0x15, 0x80, 0x38, 0x68, 0x00, 0x99, 0x3c, 0xa9, 0x27, 0x5d,
  0x08, 0x92, 0xc4, 0x63, 0x20, 0xde, 0xbd, 0x62, 0x98, 0xf2, 0x52, 0xd6, 0x63, 0x11, 0x37, 0x0e,
  0x87, 0x5a, 0x96, 0x80, 0x49, 0xb8, 0x12, 0x60, 0x83, 0x3b, 0x90, 0xa0, 0x07, 0xe3, 0x11, 0x11,
  0x5f, 0xc1, 0x42, 0xa0, 0x14, 0xb5, 0x1c, 0xcf, 0xb8, 0xb6, 0x39, 0x2c, 0x16, 0xce, 0x8a, 0xa0,
  0x98, 0x44, 0xe3, 0x84, 0x9f, 0x91, 0x7b, 0x81, 0x9d, 0xa9, 0x2b, 0xa2, 0x45, 0x94, 0xbb, 0x18,
  0xa6, 0x1d, 0x4a, 0xdd, 0x00, 0xc1, 0x41, 0xc0, 0xd7, 0xac, 0x85, 0xde, 0x76, 0x71, 0x05, 0xf8,
  0xc5, 0xe0, 0x76, 0x45, 0x74, 0x7f, 0x34, 0x05, 0x10, 0xd6, 0xae, 0x1f, 0xcc, 0x5e, 0x88, 0x7d,
  0x0c, 0x63, 0xe7, 0x1e, 0xb2, 0x8d, 0x93, 0x85, 0x9c, 0x23, 0xda, 0xf0, 0x70, 0xde, 0x85, 0xa5,
  0x3b, 0xb6, 0x52, 0x84, 0xa1, 0x27, 0x2b, 0x80, 0xc4, 0x91, 0x88, 0xad, 0xfe, 0x10, 0x8a, 0x50,
  0x0d, 0x36, 0xce, 0x50, 0x8b, 0xec, 0xc6, 0x83, 0xff, 0xaf, 0xd8, 0x27, 0x6f, 0x23, 0x67, 0x40,
  0x20, 0x1b, 0xce, 0x01, 0x3d, 0xd0, 0x5a, 0x06, 0x6a, 0x10, 0x42, 0x24, 0xb0, 0x43, 0xa2, 0xa3,
  0x26, 0xbb, 0xb2, 0xc4, 0x52, 0x9f, 0x41, 0x71, 0xfb, 0x42, 0x4a, 0x78, 0x9b, 0x25, 0x8a, 0x48,
  0x82, 0x71, 0x3d, 0xb7, 0x09, 0x07, 0x13, 0xcc, 0x56, 0xba, 0x18, 0x46, 0x49, 0x3b, 0x5a, 0xc3,
  0x84, 0x9f, 0x45, 0x8a, 0x1a, 0xf2, 0xd3, 0x05, 0x1d, 0xb0, 0x58, 0x94, 0x9e, 0x96, 0x88, 0x7a,
  0x19, 0x06, 0xca, 0x1d, 0x6a, 0x6d, 0x20, 0x22, 0x15, 0x28, 0x45, 0x81, 0x86, 0x4d, 0x20, 0x32,
  0x9e, 0x76, 0x27, 0x11, 0x35, 0x93, 0x72, 0xfd, 0x8d, 0x57, 0x61, 0x9c, 0x6a, 0x9b, 0x1e, 0x3a,
  0x15, 0x63, 0x68, 0xd6, 0x26, 0x18, 0x12, 0x24, 0xee, 0xef, 0x34, 0x31, 0x3c, 0xc3, 0x04, 0x87,
  0xe5, 0x8d, 0x24, 0x4d, 0x6f, 0x2f, 0x48, 0x28, 0x4c, 0xb5, 0xd7, 0xb8, 0xc7, 0xfe, 0x01, 0x2c,
  0x9a, 0xea, 0x1d, 0x5e, 0x0a, 0x1b, 0xd4, 0x0e, 0xf2, 0x02, 0x8a, 0x07, 0x36, 0x4e, 0x84, 0x82,
  0xdf, 0xc8, 0xa7, 0xbf, 0x16, 0x58, 0xda, 0x6f, 0x27, 0x28, 0x1d, 0xfd, 0xf6, 0xa8, 0xd1, 0x44,
  0x69, 0xae, 0x36, 0x1e, 0x03, 0x49, 0xaa, 0x64, 0x83, 0xf4, 0x58, 0x79, 0x9c, 0xcc, 0xb8, 0x4a,
  0xd8, 0xdd, 0x87, 0xa4, 0x70, 0x09, 0xc0, 0x58, 0x9a, 0x2b, 0x3c, 0x30, 0xd5, 0x36, 0x8a, 0xaa,
  0x82, 0xd1, 0x6b, 0x52, 0xe4, 0x2c, 0xe4, 0x47, 0x3b, 0xc6, 0x8a, 0x86, 0x71, 0xcb, 0xfa, 0x3b,
  0x19, 0x89, 0xdc, 0x24, 0x93, 0xdb, 0x30, 0xf6, 0x25, 0xbd, 0xb5, 0x78, 0x97, 0xd6, 0x46, 0xd1,
  0x72, 0x95, 0x4a, 0x1d, 0x4e, 0x4c, 0x2c, 0xca, 0x63, 0x83, 0x74, 0x68, 0x2c, 0x8d, 0xc8, 0x19,
  0xaa, 0x28, 0x18, 0xce, 0x4b, 0x99, 0x16, 0x35, 0x35, 0x86, 0x68, 0x4d, 0x30, 0x62, 0xb0, 0xaa,
  0x48, 0x5f, 0x80, 0x23, 0x3c, 0x93, 0xdd, 0x55, 0xb0, 0xb0, 0x13, 0x07, 0x20, 0x8f, 0x0e, 0xa9,
  0xaf, 0x4b, 0x9f, 0x28, 0xe5, 0xf6, 0x92, 0x8e, 0xad, 0x3d, 0x45, 0xfd, 0xdd, 0x42, 0x8b, 0x4f,
  0xd7, 0x36, 0xb1, 0xb9, 0xbc, 0xc3, 0x55, 0x1c, 0x44, 0xec, 0x7a, 0xa9, 0x98, 0x84, 0x68, 0x96,
  0xdc, 0xb1, 0x7c, 0x2a, 0xff, 0xfe, 0x6e, 0xea, 0x3f, 0xbe, 0x9b, 0x92, 0xed, 0x6c, 0x25, 0x47,
  0x0a, 0x23, 0x3f, 0xfe, 0xe7, 0x0d, 0x5e, 0xde, 0xbf, 0x27, 0x4d, 0xc9, 0x9b, 0x49, 0xce, 0x10,
  0x62, 0x26, 0xbc, 0xbc, 0xff, 0xcf, 0x1b, 0x82, 0xb4, 0xca, 0x24, 0x01, 0xca, 0xbf, 0x0f, 0xb0,
  0x58, 0x69, 0xe4, 0x00, 0x2f, 0x75, 0x5d, 0x2b, 0x56, 0xc3, 0x64, 0x79, 0x5c, 0xa2, 0x97, 0xd5,
  0x32, 0x73, 0x96, 0x44, 0x54, 0x7c, 0x27, 0x87, 0x1d, 0xad, 0x96, 0xfe, 0x45, 0x3c, 0xe9, 0xe6,
  0xbf, 0x22, 0x3f, 0xec, 0x52, 0xde, 0x92, 0xc6, 0x4a, 0x58, 0xfa, 0x0a, 0xe2, 0x5f, 0x7b, 0xf9,
  0x17, 0xba, 0x96, 0x31, 0xe7, 0xff, 0x8e, 0x2a, 0xc0, 0xf6, 0x6b, 0xd0, 0x46, 0x66, 0xb0, 0x06,
  0x02, 0x57, 0x81, 0x89, 0x0f, 0xdc, 0xb5, 0xd1, 0x15, 0x53, 0xfe, 0x27, 0xa3, 0xa1, 0x07, 0x62,
  0x29, 0x31, 0x30, 0x5e, 0x82, 0xc1, 0x90, 0xc9, 0x8e, 0xc7, 0xa3, 0xff, 0xe9, 0xab, 0x4c, 0x9b,
  0xb4, 0x87, 0x39, 0xee, 0x27, 0x65, 0x92, 0xd0, 0x92, 0xb6, 0x47, 0x33, 0xa8, 0xfb, 0x07, 0xd4,
  0xb2, 0x09, 0x28, 0x21, 0xcb, 0x68, 0x42, 0x5c, 0x5a, 0xeb, 0x6c, 0x50, 0x43, 0x39, 0xdc, 0xad,
  0x00, 0x85, 0xc5, 0x2b, 0x70, 0xc4, 0xe5, 0xd1, 0x61, 0x76, 0x9c, 0xf1, 0x74, 0xa0, 0x6d, 0x55,
  0xc8, 0x33, 0xd6, 0x90, 0xe4, 0xe0, 0xfe, 0xd1, 0x88, 0xd3, 0xb2, 0x9e, 0x6e, 0xd9, 0xbb, 0x1a,
  0xa1, 0xb0, 0x0e, 0xba, 0x6c, 0xf9, 0x4e, 0xc2, 0x7a, 0x1d, 0xa6, 0x0a, 0x44, 0x43, 0xb7, 0x44,
  0x8e, 0xf6, 0xdd, 0xd3, 0x7b, 0xaf, 0x36, 0x03, 0xd6, 0xf5, 0x02, 0x74, 0x92, 0x04, 0xa3, 0x5b,
  0x2e, 0x17, 0xea, 0xca, 0x78, 0x95, 0xf5, 0x91, 0x66, 0xc8, 0xd6, 0xb7, 0xb5, 0x34, 0x07, 0x46,
  0x25, 0x0c, 0x1e, 0xd3, 0xe1, 0x1b, 0x0f, 0x03, 0xbe, 0x14, 0xb5, 0xb4, 0x4b, 0xd2, 0x34, 0xea,
  0x73, 0x20, 0x9f, 0x92, 0x53, 0x5c, 0xe0, 0x5c, 0x34, 0xe8, 0x9a, 0x76, 0x0f, 0xab, 0x2d, 0xfe,
  0xfd, 0x3a, 0x5b, 0x23, 0xa7, 0x6e, 0xc1, 0x2f, 0xf8, 0x7b, 0xb4, 0xe7, 0xaa, 0x55, 0x27, 0x1a,
  0x3f, 0xb0, 0xb9, 0x63, 0x58, 0x31, 0x1e, 0x6a, 0x78, 0x5b, 0xa3, 0xbb, 0xd6, 0x55, 0xaa, 0xb3,
  0x43, 0xa1, 0x7f, 0x4f, 0x4d, 0x73, 0x75, 0x9d, 0x4c, 0xfe, 0xcf, 0x1b, 0x51, 0x97, 0xdf, 0x93,
  0x36, 0xe4, 0x7f, 0x5f, 0x47, 0x9c, 0xf7, 0xc8, 0xa7, 0xf0, 0xd0, 0x45, 0x6f, 0xeb, 0xc4, 0x1b,
  0x25, 0x8c, 0xf0, 0x14, 0xf4, 0x48, 0x15, 0x96, 0xf3, 0xe3, 0x30, 0xe8, 0xee, 0x4f, 0x17, 0x07,
  0xce, 0x2b, 0x57, 0xdd, 0x7e, 0x58, 0x0a, 0xc9, 0x35, 0x65, 0x49, 0x47, 0x3d, 0xf4, 0x33, 0xb4,
  0x77, 0xc3, 0xcd, 0xa2, 0xa3, 0xe5, 0x50, 0xfd, 0x42, 0xdf, 0x6e, 0x2c, 0x0d, 0x85, 0x7e, 0xc5,
  0xfd, 0x82, 0xce, 0xf6, 0xb8, 0x9d, 0x98, 0x61, 0x0e, 0xa9, 0xdd, 0x93, 0x55, 0xb7, 0x2e, 0xb4,
  0x7f, 0xa2, 0x66, 0xe9, 0x9c, 0x51, 0x28, 0xa4, 0xfe, 0x1e, 0x07, 0x7c, 0x83, 0xe7, 0xb3, 0x22,
  0xe1, 0xd0, 0xad, 0x4d, 0xdc, 0xc3, 0xfe, 0x3b, 0xa0, 0x7d, 0x14, 0x08, 0xeb, 0xb7, 0x3b, 0x8d,
  0x2d, 0x3e, 0xf5, 0xba, 0x8f, 0xbf, 0x38, 0x1f, 0xee, 0x34, 0xa4, 0xf1, 0xd9, 0xb8, 0xc8, 0xd4,
  0x98, 0x05, 0x59, 0x21, 0x37, 0xc2, 0x92, 0x48, 0xb4, 0xa9, 0xf0, 0x2a, 0xa3, 0x1c, 0x03, 0xfa,
  0x30, 0xc2, 0x72, 0xb7, 0x01, 0xa6, 0x42, 0xe5, 0xd5, 0x94, 0x91, 0x42, 0x13, 0x0b, 0xfa, 0xf8,
  0xc0, 0x68, 0xc4, 0xb0, 0x01, 0x98, 0x78, 0xa2, 0xba, 0x96, 0x64, 0x23, 0x16, 0xf5, 0x06, 0x2f,
  0xc4, 0xe3, 0x6f, 0xae, 0x1c, 0x74, 0xd7, 0xe9, 0x48, 0x89, 0xee, 0x6b, 0x48, 0x0c, 0xae, 0xc0,
  0x16, 0xb6, 0xb8, 0xe1, 0x10, 0x49, 0xd8, 0x6b, 0xb4, 0x5d, 0xc9, 0xd5, 0x21, 0x51, 0x2f, 0xb0,
  0x71, 0x40, 0x12, 0x59, 0x1d, 0x8b, 0xbf, 0x25, 0x93, 0xef, 0x87, 0x42, 0xcd, 0x03, 0xe2, 0xc8,
  0x66, 0x88, 0xa7, 0xc4, 0xd1, 0xdd, 0x19, 0xbb, 0x5d, 0x19, 0x94, 0xbe, 0xb7, 0xe3, 0x10, 0xc9,
  0x56, 0x89, 0x07, 0xde, 0xf1, 0x6d, 0x1b, 0x4f, 0x47, 0xc2, 0xf8, 0xc1, 0xa1, 0x5b, 0x38, 0xc3,
  0xd9, 0x5d, 0x0e, 0xf0, 0xdc, 0xe5, 0x1f, 0xe0, 0xb9, 0xe2, 0x21, 0xcf, 0x79, 0xa1, 0x1f, 0xb2,
  0x9d, 0x4f, 0x86, 0x3a, 0xa6, 0x27, 0xe3, 0x5b, 0x3a, 0x00, 0xce, 0xbf, 0x43, 0xb6, 0x83, 0xc9,
  0xd1, 0x0a, 0xf2, 0xaf, 0xc2, 0x60, 0x1c, 0xb6, 0x67, 0x5f, 0x78, 0x21, 0xcc, 0xe5, 0xae, 0x3c,
  0x09, 0x89, 0x0c, 0x60, 0xec, 0x73, 0x13, 0x34, 0x44, 0x20, 0x5d, 0x10, 0x48, 0x88, 0x00, 0x2b,
  0x49, 0xe8, 0xf1, 0xc7, 0xee, 0xf8, 0x76, 0x8f, 0xff, 0x7d, 0x54, 0xc8, 0x40, 0xe9, 0x35, 0xe0,
  0xfa, 0x99, 0xc5, 0x01, 0xba, 0xf5, 0x14, 0x03, 0xee, 0x76, 0xf5, 0x7b, 0x6d, 0x34, 0x43, 0xdf,
  0x7b, 0x04, 0x80, 0x44, 0xae, 0xe1, 0x77, 0xbc, 0x85, 0x9f, 0x15, 0xfe, 0xc9, 0xaa, 0xda, 0xd2,
  0x24, 0x45, 0xdf, 0xdf, 0xa9, 0x35, 0xee, 0x2e, 0x2b, 0x50, 0x27, 0x44, 0x73, 0x05, 0x03, 0x85,
  0xfe, 0x89, 0xb8, 0x98, 0x47, 0xb3, 0x0a, 0x82, 0x5f, 0x09, 0xaa, 0x17, 0x7e, 0x58, 0x67, 0xd0,
  0x37, 0x60, 0x41, 0x82, 0x2e, 0xd1, 0x4d, 0xe4, 0xcf, 0xe3, 0xc0, 0xe9, 0x4a, 0xec, 0xb0, 0x77,
  0x23, 0x5d, 0xf9, 0xa0, 0x59, 0x72, 0xcc, 0x0d, 0x2a, 0xbb, 0x4d, 0x62, 0x8b, 0x50, 0xff, 0xc2,
  0x3d, 0x12, 0x81, 0x8e, 0x9c, 0xe3, 0x20, 0xc4, 0x9d, 0x68, 0x9a, 0x76, 0xf5, 0x7f, 0xa4, 0x6d,
  0x27, 0xc6, 0xc7, 0x28, 0x77, 0x57, 0xb2, 0x2c, 0x85, 0x20, 0x6d, 0xd3, 0xcc, 0xd8, 0x7e, 0x06,
  0x77, 0x02, 0xe5, 0x34, 0xc1, 0x3c, 0x86, 0xe5, 0x01, 0x12, 0x35, 0xb4, 0x5a, 0xa1, 0x9b, 0xbb,
  0x13, 0x88, 0x28, 0x9f, 0x42, 0xc4, 0x81, 0xf4, 0xc7, 0x91, 0xb9, 0xd7, 0x74, 0xd4, 0xcf, 0x83,
  0x78, 0xe0, 0x1f, 0xa5, 0xbd, 0x66, 0x94, 0xcf, 0xf1, 0x82, 0xb5, 0x78, 0x0c, 0x43, 0xfa, 0xb3,
  0x52, 0x23, 0xcc, 0x35, 0x73, 0x9e, 0x7e, 0xb7, 0xd7, 0xcd, 0xb0, 0xc1, 0xec, 0x91, 0xfa, 0xc4,
  0x3d, 0x46, 0x62, 0x7c, 0x51, 0xa7, 0x25, 0x12, 0xd2, 0x03, 0xe5, 0x1a, 0xdd, 0x5b, 0x11, 0x51,
  0x5c, 0x8e, 0x09, 0x7d, 0x16, 0xca, 0xf2, 0x34, 0x81, 0x80, 0x45, 0x0c, 0x87, 0x2a, 0x50, 0x73,
  0x21, 0x7c, 0x40, 0x51, 0xa8, 0x20, 0x7b, 0x2b, 0xa0, 0x21, 0xfb, 0x61, 0x0d, 0x1f, 0x13, 0x52,
  0xda, 0xff, 0x79, 0x46, 0xb6, 0x1c, 0x8c, 0x9f, 0x24, 0x7b, 0xab, 0x6b, 0x91, 0x9d, 0xec, 0x23,
  0x7f, 0x59, 0x19, 0x96, 0x3b, 0x12, 0x47, 0x01, 0xc4, 0x9e, 0xe1, 0xd9, 0x57, 0x3c, 0xea, 0x64,
  0xc2, 0x63, 0x2b, 0xe1, 0x0e, 0x26, 0x84, 0x10, 0xe2, 0x5c, 0x22, 0x3e, 0x1a, 0xc3, 0x56, 0x13,
  0xb0, 0x90, 0xdf, 0xcd, 0x44, 0x3c, 0x40, 0xf4, 0xd4, 0x08, 0x55, 0xda, 0xdf, 0x19, 0x5c, 0xf6,
  0x8e, 0x96, 0xbf, 0x3d, 0x4c, 0xf3, 0xb8, 0xa4, 0x2c, 0x40, 0x8e, 0x4b, 0xca, 0xeb, 0x86, 0x3d,
  0xb4, 0x9b, 0x57, 0xc6, 0x3d, 0x09, 0xf6, 0xf2, 0xcb, 0x68, 0x82, 0x2e, 0x2c, 0x46, 0x5d, 0xd4,
  0x4b, 0x40, 0x3f, 0x31, 0x54, 0xcd, 0x84, 0x25, 0x09, 0x7d, 0xd8, 0xe4, 0x14, 0x33, 0x4d, 0x08,
  0x15, 0xb5, 0x64, 0x89, 0x0a, 0x9b, 0x24, 0x2b, 0x83, 0xcc, 0x11, 0x8b, 0xb3, 0x63, 0xbe, 0x1d,
  0xe8, 0x1f, 0x3f, 0x80, 0x8e, 0xe7, 0xe9, 0x78, 0x9c, 0xf9, 0x85, 0x49, 0x6d, 0x53, 0x69, 0x8b,
  0x56, 0x1e, 0xbd, 0x05, 0x9b, 0x46, 0x55, 0x08, 0x96, 0xa5, 0xb1, 0x32, 0x71, 0x91, 0x00, 0xca,
  0x9d, 0x01, 0xed, 0xcf, 0x22, 0x17, 0xb6, 0x03, 0xce, 0x25, 0x9d, 0xa7, 0x7a, 0xd7, 0x5b, 0x14,
  0x14, 0x35, 0x46, 0x5e, 0xac, 0xcc, 0xdd, 0x17, 0xa6, 0x0f, 0x65, 0x29, 0xc1, 0x98, 0x05, 0xfa,
  0xd0, 0xb0, 0xaf, 0xa4, 0xcf, 0x53, 0xd9, 0xde, 0x0c, 0xb7, 0x9b, 0x84, 0x2c, 0xc5, 0xbc, 0x08,
  0xb8, 0xf9, 0xec, 0x51, 0x75, 0x3b, 0x29, 0xe0, 0xe2, 0x6d, 0xc9, 0x02, 0x1f, 0x06, 0xb4, 0x15,
  0x17, 0x58, 0x38, 0xf6, 0xc7, 0x39, 0xd9, 0xdd, 0xa6, 0x9e, 0x5a, 0x3b, 0xe1, 0xae, 0x61, 0x59,
  0x8c, 0x91, 0xdd, 0xd5, 0xbf, 0xd9, 0x1e, 0x41, 0x7b, 0x23, 0x41, 0x5f, 0x4a, 0x11, 0x5b, 0x3e,
  0x90, 0x34, 0xe6, 0x6d, 0x4a, 0x64, 0x83, 0x41, 0xfe, 0x7d, 0xbd, 0x66, 0x40, 0x5f, 0x21, 0xa8,
  0x42, 0xee, 0x05, 0x72, 0x7f, 0x43, 0x30, 0xa7, 0x17, 0x63, 0x55, 0x03, 0x41, 0x17, 0x23, 0xef,
  0x30, 0x37, 0x25, 0x6d, 0x01, 0xb3, 0xe6, 0x1f, 0x4c, 0x3e, 0x45, 0xae, 0x13, 0xa0, 0xf3, 0x4e,
  0xd2, 0x68, 0xcf, 0xb1, 0xe2, 0xd4, 0x5f, 0x31, 0x58, 0x2f, 0x7b, 0x69, 0x4f, 0xd5, 0xcd, 0x14,
  0xf7, 0x19, 0x68, 0x01, 0x61, 0x64, 0xc4, 0x68, 0x65, 0xba, 0xc5, 0x3c, 0x8d, 0xc3, 0x0c, 0xb2,
  0x80, 0xdb, 0xbd, 0x24, 0xf9, 0x36, 0x61, 0x1c, 0x47, 0x3b, 0xd9, 0xb1, 0x45, 0xc7, 0x63, 0xcc,
  0xda, 0x22, 0x76, 0xfd, 0xea, 0x29, 0x0f, 0xb9, 0xdc, 0x3d, 0x70, 0x79, 0xcb, 0xe3, 0x6e, 0xc6,
  0x31, 0x17, 0x53, 0x14, 0x0a, 0x80, 0xa8, 0x74, 0x74, 0xbf, 0x90, 0x4d, 0x03, 0xf7, 0x94, 0x46,
  0x84, 0xca, 0xe6, 0x18, 0x39, 0xfe, 0x8e, 0x37, 0x4b, 0x15, 0x49, 0xe8, 0xc2, 0x2d, 0x93, 0xce,
  0xc6, 0x09, 0x5b, 0x56, 0xe5, 0x6d, 0x88, 0xa9, 0xe4, 0xe4, 0xb8, 0x2a, 0x88, 0x61, 0xea, 0xa1,
  0x9b, 0x1f, 0x88, 0x8d, 0x2d, 0xe5, 0xe8, 0xd0, 0xb8, 0xe6, 0x2f, 0xd4, 0x21, 0x1d, 0xa6, 0xb1,
  0x25, 0xbf, 0x62, 0x54, 0xc7, 0x6f, 0x5e, 0xa1, 0x09, 0xf9, 0x17, 0xc6, 0x7a, 0x44, 0x37, 0x37,
  0x63, 0x97, 0x20, 0x9a, 0xd3, 0x97, 0xb6, 0x2d, 0x6f, 0xea, 0x3b, 0x77, 0x8f, 0x24, 0x40, 0xc8,
  0xc8, 0x57, 0xe4, 0x44, 0x7f, 0xed, 0x54, 0xe2, 0x32, 0xee, 0x6e, 0xe5, 0x80, 0xc9, 0x21, 0x4e,
  0x99, 0x98, 0x1c, 0x3f, 0x01, 0x63, 0x3c, 0x16, 0x84, 0x54, 0x2a, 0xe2, 0x56, 0xb2, 0xad, 0xbf,
  0xa6, 0xd0, 0x8c, 0x79, 0x51, 0x86, 0x89, 0x1e, 0xe8, 0x41, 0xca, 0x37, 0x8c, 0x99, 0xd0, 0xd5,
  0x97, 0xe6, 0x19, 0xba, 0x2b, 0x5b, 0x3e, 0xbd, 0x7d, 0x24, 0x4a, 0xb4, 0xa5, 0xa3, 0x23, 0xec,
  0xed, 0x8c, 0x3e, 0x19, 0x75, 0x09, 0x09, 0xec, 0x65, 0xd8, 0xd0, 0x99, 0x2f, 0xb7, 0x4c, 0xe6,
  0x00, 0xe9, 0x63, 0x9a, 0xc6, 0xa3, 0x77, 0xf8, 0xfe, 0xfb, 0xaa, 0x1a, 0x6e, 0x12, 0x54, 0xaa,
  0x36, 0x6b, 0x59, 0x46, 0x22, 0x8d, 0xb3, 0x43, 0x4f, 0x83, 0x71, 0x9d, 0x4c, 0x4e, 0x14, 0x73,
  0xba, 0x1e, 0x61, 0x54, 0x43, 0x92, 0x55, 0x74, 0x51, 0xd3, 0xb4, 0xb9, 0x22, 0x27, 0x71, 0x77,
  0x2f, 0xb9, 0x51, 0xe6, 0x8a, 0xeb, 0x19, 0xa5, 0xe6, 0xc4, 0xd8, 0x71, 0xb8, 0x7b, 0xc5, 0x0c,
  0xa4, 0x77, 0x88, 0x74, 0xf7, 0x48, 0x9a, 0x2f, 0x58, 0xd8, 0x51, 0x41, 0xe8, 0x32, 0x1a, 0x4a,
  0x19, 0x22, 0xe9, 0x61, 0xdd, 0xa2, 0x3e, 0x9a, 0x91, 0x1d, 0xf4, 0x21, 0xda, 0x33, 0xec, 0xeb,
  0x18, 0x38, 0xc7, 0xca, 0xf2, 0x2e, 0x45, 0x91, 0x22, 0x4a, 0x4c, 0xb0, 0xc3, 0x3a, 0xf2, 0x48,
  0xa3, 0x8b, 0x8e, 0x8d, 0x20, 0xdd, 0x14, 0x75, 0xed, 0xd4, 0x77, 0xb7, 0xf7, 0xc1, 0xc8, 0xfa,
  0x48, 0x92, 0xb4, 0x1f, 0x09, 0x76, 0xb3, 0xeb, 0xe9, 0xa7, 0xa7, 0xa7, 0x34, 0x46, 0xcb, 0x71,
  0xc5, 0xda, 0x21, 0x5b, 0xb0, 0xe4, 0xa2, 0xd6, 0xe0, 0xf9, 0x3c, 0x65, 0xfb, 0x44, 0x99, 0x33,
  0x25, 0xc4, 0x55, 0xe4, 0xa9, 0x7d, 0xd4, 0x63, 0x14, 0x0a, 0x4f, 0xf6, 0x02, 0xf4, 0xd9, 0xa7,
  0x41, 0x90, 0xfe, 0xab, 0xe1, 0x00, 0xb6, 0xf7, 0x8e, 0xb9, 0xc8, 0xc1, 0x9e, 0xdb, 0x92, 0x9c,
  0x36, 0x26, 0x9b, 0x36, 0xba, 0x71, 0xd4, 0x0f, 0xef, 0x58, 0x22, 0xa0, 0x2b, 0x8c, 0xd4, 0xb5,
  0x1e, 0x0b, 0xf7, 0xdb, 0x44, 0x3c, 0x5a, 0xff, 0xa7, 0x4a, 0x3a, 0x6a, 0xb9, 0xb7, 0xb4, 0xe5,
  0xc1, 0xc3, 0x12, 0xb8, 0x6a, 0xf6, 0x6b, 0xcc, 0xdf, 0x68, 0x84, 0xd7, 0xcf, 0xa2, 0x57, 0x45,
  0x0b, 0x06, 0xc6, 0xf8, 0x4f, 0x32, 0x44, 0x41, 0xfc, 0x35, 0xa1, 0x78, 0x9a, 0x0c, 0x2e, 0x18,
  0x6e, 0xee, 0x76, 0x17, 0x2c, 0x7e, 0xdb, 0x94, 0xb5, 0x13, 0x93, 0x60, 0x76, 0xee, 0x2b, 0x0d,
  0x5d, 0xec, 0xda, 0x41, 0x6c, 0xe4, 0x10, 0x9d, 0x13, 0x86, 0xb6, 0xb9, 0x09, 0x10, 0x0e, 0xc3,
  0x47, 0x88, 0x44, 0xb4, 0x76, 0x09, 0x80, 0x9f, 0xc9, 0xd6, 0xaa, 0x44, 0x42, 0xcf, 0x64, 0x03,
  0x06, 0x23, 0x98, 0xf4, 0x6b, 0xea, 0x37, 0xd0, 0xf1, 0x65, 0xc6, 0x3f, 0x06, 0xd8, 0x52, 0xec,
  0x60, 0x4b, 0x2f, 0xb8, 0x91, 0x87, 0x0b, 0x38, 0x0c, 0xbd, 0xa0, 0x03, 0x25, 0xdd, 0x6d, 0x3a,
  0x5b, 0x4a, 0xa9, 0x76, 0xf7, 0x8d, 0x58, 0x74, 0xa9, 0x11, 0xe2, 0x46, 0xe3, 0xcc, 0x7f, 0xfe,
  0xc3, 0x78, 0x33, 0x14, 0x5d, 0xfb, 0xf9, 0x73, 0x33, 0x95, 0x65, 0xf5, 0xe7, 0x4f, 0x43, 0x30,
  0xad, 0x2b, 0x1d, 0x8e, 0x94, 0xa3, 0x03, 0xf4, 0xf3, 0x27, 0x11, 0x47, 0x27, 0xcb, 0x44, 0xe3,
  0x5e, 0x5c, 0x09, 0x69, 0x6d, 0xea, 0x00, 0xa2, 0x0a, 0x8c, 0xd5, 0x13, 0x66, 0xec, 0x42, 0x32,
  0x86, 0x44, 0xf2, 0x3b, 0x64, 0x3f, 0xb9, 0xb9, 0x6b, 0x9f, 0x3e, 0x89, 0xff, 0x4a, 0x47, 0xf2,
  0x37, 0x37, 0xc2, 0x98, 0x3a, 0xb4, 0x4f, 0x6f, 0x5f, 0x7e, 0x89, 0x39, 0x23, 0x4a, 0xbc, 0x5d,
  0xf1, 0xe0, 0x54, 0x90, 0x74, 0x61, 0xe2, 0x1d, 0x86, 0x2f, 0x56, 0x79, 0xe8, 0xf8, 0xe1, 0x88,
  0x04, 0x0d, 0xb4, 0xdf, 0x83, 0x2d, 0xae, 0x27, 0x56, 0x9f, 0x2d, 0x0d, 0x72, 0xa1, 0xbd, 0xca,
  0x31, 0xb4, 0x3a, 0xfd, 0xf2, 0x8c, 0x84, 0xad, 0x1d, 0xdb, 0x6c, 0x35, 0xb7, 0xd0, 0xa9, 0x7f,
  0xff, 0xcf, 0x1b, 0x55, 0xb8, 0x70, 0x39, 0x8b, 0x05, 0xa9, 0x0e, 0xca, 0xd5, 0x16, 0x8c, 0xad,
  0xd5, 0xf6, 0xdf, 0x07, 0x9d, 0xb5, 0x5a, 0xb4, 0x3a, 0x7b, 0xba, 0xaf, 0x24, 0xe8, 0x72, 0x1b,
  0x32, 0xaa, 0x04, 0x3e, 0x4c, 0x1b, 0x5b, 0x03, 0x34, 0x94, 0xc9, 0x32, 0x26, 0x6d, 0x61, 0xe6,
  0x11, 0xe4, 0x51, 0xf6, 0x9e, 0xc5, 0x8c, 0x7f, 0x48, 0xdb, 0xe4, 0x26, 0x0e, 0x03, 0x52, 0xc6,
  0x6b, 0xaa, 0xe8, 0xf2, 0x4e, 0x5b, 0x8d, 0x59, 0x53, 0xf2, 0x07, 0x93, 0xc2, 0x96, 0x0d, 0xd0,
  0x01, 0x41, 0xcb, 0xfc, 0xe5, 0x17, 0xc6, 0xce, 0xf8, 0x0e, 0x53, 0xf8, 0x9c, 0x49, 0xd3, 0xcc,
  0x1f, 0x56, 0xe6, 0x18, 0xde, 0x2e, 0xd2, 0x19, 0x8b, 0x74, 0x1f, 0xef, 0x45, 0x33, 0xe7, 0x40,
  0x6e, 0x6a, 0x0d, 0x21, 0x46, 0x69, 0x80, 0x38, 0x26, 0x5f, 0x81, 0xfd, 0x69, 0xcf, 0xce, 0xb5,
  0x65, 0x31, 0x9d, 0x24, 0x7d, 0x34, 0xb5, 0xda, 0x46, 0x4f, 0x6e, 0x87, 0x8f, 0x71, 0xd3, 0xdc,
  0x2e, 0xf1, 0x39, 0xce, 0xa4, 0xde, 0x87, 0xb8, 0x33, 0x8f, 0x50, 0x2e, 0x1d, 0x28, 0x43, 0xc4,
  0x1f, 0xcf, 0xd8, 0xfb, 0xc3, 0xbe, 0x0d, 0x12, 0xee, 0xfe, 0xa1, 0x78, 0x57, 0x6b, 0x56, 0x48,
  0x21, 0x27, 0x08, 0x25, 0x6a, 0x3b, 0x40, 0xdd, 0x31, 0xc5, 0x80, 0x5a, 0x6b, 0xb9, 0x24, 0x0b,
  0xee, 0x23, 0x1e, 0x66, 0xb4, 0x07, 0x7b, 0x1a, 0xba, 0x88, 0x9b, 0xda, 0x2a, 0x6a, 0x0f, 0xbd,
  0xbb, 0xc5, 0xed, 0x04, 0xe9, 0x61, 0x4f, 0xa6, 0xa0, 0x47, 0x46, 0x0e, 0xa2, 0x06, 0x31, 0x27,
  0xc4, 0x21, 0xaa, 0x99, 0x01, 0x70, 0xde, 0xca, 0x54, 0x75, 0xc4, 0xfd, 0x88, 0x29, 0x8e, 0x5f,
  0xce, 0xd7, 0xd4, 0x2a, 0xd8, 0x94, 0x2f, 0xb8, 0x24, 0xcc, 0x0a, 0xf0, 0x15, 0x40, 0x75, 0x9c,
  0x73, 0x83, 0x0a, 0x1c, 0x75, 0x86, 0xa4, 0x5b, 0x1e, 0x02, 0x27, 0x08, 0xf9, 0x8b, 0xf5, 0x6a,
  0x2d, 0xce, 0xe1, 0x11, 0x50, 0x18, 0xed, 0xe2, 0x44, 0x2e, 0x13, 0x8c, 0x9c, 0xa8, 0x66, 0x4f,
  0x75, 0x5b, 0x25, 0xde, 0x00, 0x5f, 0xa7, 0x33, 0xf9, 0x14, 0x09, 0xda, 0x08, 0x17, 0x2d, 0x5f,
  0x28, 0x8e, 0x38, 0x15, 0x7c, 0xc5, 0x69, 0x2c, 0x34, 0xfd, 0x26, 0x22, 0x19, 0x72, 0x7f, 0xdc,
  0x06, 0xb2, 0xad, 0x84, 0xb8, 0x4f, 0x2c, 0xdb, 0xc1, 0x24, 0x29, 0x77, 0x43, 0xde, 0x87, 0x0c,
  0xf4, 0xdb, 0x1f, 0x89, 0x7d, 0x83, 0xe8, 0x12, 0x7b, 0xda, 0x5d, 0x93, 0x58, 0x1a, 0x67, 0x42,
  0xe9, 0x14, 0xd6, 0xc5, 0xd0, 0x98, 0xa9, 0x13, 0x9b, 0x50, 0x2d, 0x0c, 0x13, 0xf2, 0x7b, 0xc4,
  0x6d, 0x82, 0x1c, 0xec, 0x43, 0x85, 0x83, 0x21, 0x5c, 0x44, 0xa7, 0x1f, 0x3d, 0x98, 0xee, 0xc2,
  0x20, 0xc8, 0x3a, 0xf1, 0xbc, 0x34, 0x54, 0x9a, 0xc0, 0xc5, 0x98, 0x55, 0xbc, 0x60, 0xd2, 0x06,
  0xfb, 0xa7, 0x38, 0xd5, 0x0a, 0x83, 0xb2, 0xd1, 0x76, 0x22, 0xed, 0x5c, 0xb1, 0x40, 0x0e, 0x0a,
  0x63, 0xa4, 0x08, 0xee, 0x0f, 0x44, 0x1d, 0xfb, 0xc8, 0xf1, 0x55, 0xa0, 0x3d, 0x75, 0x58, 0x38,
  0xe7, 0x2b, 0xfc, 0x37, 0x27, 0x0c, 0x7e, 0x73, 0x60, 0x02, 0x28, 0xc6, 0xc3, 0x68, 0x06, 0x5a,
  0x50, 0x0c, 0x2f, 0x08, 0xa5, 0xfc, 0x6b, 0xa9, 0x24, 0x24, 0x05, 0xc9, 0x80, 0xa1, 0xef, 0xda,
  0x98, 0x21, 0x9f, 0x18, 0x1c, 0x1d, 0xd5, 0x48, 0x8d, 0x28, 0x21, 0x11, 0xab, 0xeb, 0xc2, 0xee,
  0x42, 0x31, 0xc8, 0x2f, 0x05, 0xe2, 0x99, 0x43, 0xce, 0xf6, 0xdf, 0x31, 0x31, 0xb7, 0x04, 0xa2,
  0x35, 0xa9, 0x50, 0xb7, 0x24, 0xca, 0x41, 0x5c, 0x1a, 0x1a, 0x00, 0x00, 0x06, 0x0a, 0xe2, 0x8f,
  0x37, 0x94, 0x08, 0x77, 0x6a, 0x39, 0xc2, 0x0a, 0xb8, 0x8b, 0x6f, 0xa0, 0xb8, 0x46, 0xed, 0x8d,
  0x71, 0x94, 0x39, 0x67, 0x87, 0x4c, 0xb5, 0x80, 0x51, 0xac, 0x48, 0x44, 0xcc, 0x1f, 0x69, 0x0c,
  0x7a, 0x71, 0x58, 0x83, 0x6c, 0x8b, 0x44, 0x0f, 0xa2, 0xf6, 0xdc, 0x5d, 0xf2, 0x4f, 0xd6, 0x7a,
  0xc3, 0x78, 0x05, 0xfd, 0xa7, 0xb5, 0xc3, 0xfd, 0x13, 0x03, 0x17, 0xa8, 0xaf, 0x20, 0x8e, 0xc1,
  0x35, 0x2e, 0x22, 0x0c, 0x73, 0x1a, 0xe2, 0x01, 0x14, 0x4f, 0xe5, 0x63, 0xd8, 0x2c, 0x34, 0xa8,
  0xb5, 0x5e, 0xfd, 0x21, 0x7c, 0xfc, 0xc2, 0xf2, 0x58, 0x1d, 0x6b, 0x2b, 0x0e, 0x57, 0x08, 0x4c,
  0xfd, 0xb9, 0x12, 0x76, 0x78, 0x80, 0x9d, 0x46, 0x19, 0xd9, 0xc4, 0xf2, 0x2d, 0x47, 0xa4, 0x1e,
  0x60, 0x44, 0xeb, 0xdf, 0x78, 0x08, 0xda, 0x93, 0x17, 0x2b, 0xdc, 0x34, 0x63, 0x16, 0xb2, 0x39,
  0xd5, 0x24, 0xc6, 0xde, 0xe5, 0xa4, 0x9e, 0x15, 0x4b, 0xcb, 0xc5, 0xcd, 0x3b, 0x60, 0xb6, 0x0b,
  0xd2, 0x9a, 0x69, 0xd5, 0xf0, 0xee, 0x6d, 0x1e, 0x36, 0x76, 0xb2, 0x6a, 0x34, 0xf1, 0x09, 0xf0,
  0x9e, 0x0d, 0xc5, 0x40, 0x2f, 0x3f, 0xae, 0xec, 0x1e, 0xa4, 0xfa, 0x7b, 0xcc, 0xf8, 0x8f, 0xf4,
  0x9f, 0xd4, 0xbf, 0xa4, 0x33, 0x29, 0x9e, 0x9c, 0xf8, 0xdb, 0xa5, 0x8e, 0xf3, 0xe3, 0xed, 0x78,
  0x3f, 0x5d, 0x88, 0x51, 0x3c, 0x98, 0xf5, 0x2f, 0x12, 0x9a, 0x14, 0xda, 0x7d, 0x6f, 0xad, 0x68,
  0xc2, 0xfb, 0x65, 0xd5, 0x20, 0xdb, 0xa9, 0xce, 0x00, 0xf0, 0xe4, 0x70, 0xa4, 0xf4, 0x79, 0xfa,
  0xcf, 0xe5, 0x9d, 0xf1, 0x07, 0x68, 0x8f, 0xd5, 0x4e, 0xd1, 0x9d, 0x80, 0xf5, 0xd0, 0xc2, 0x7d,
  0x43, 0x3e, 0x83, 0xdc, 0x93, 0x84, 0xc7, 0xda, 0x37, 0xfe, 0x2a, 0x84, 0xba, 0xc1, 0x4a, 0x8e,
  0x43, 0xc6, 0x53, 0x90, 0x8a, 0x40, 0xfb, 0xc8, 0x8f, 0x9b, 0x47, 0x62, 0x66, 0x5c, 0x6d, 0x0b,
  0x20, 0x78, 0xa2, 0xeb, 0x80, 0x44, 0xd0, 0xa6, 0xbb, 0xef, 0x1e, 0x49, 0x44, 0x7c, 0xbb, 0xed,
  0x07, 0x94, 0x59, 0xac, 0x55, 0x53, 0x51, 0x01, 0x19, 0x35, 0xea, 0xeb, 0xa6, 0x85, 0xc4, 0x52,
  0xde, 0xfc, 0xa4, 0x9d, 0x44, 0xb0, 0xf4, 0xc4, 0x66, 0x34, 0x11, 0x5a, 0xd4, 0x58, 0x8f, 0x02,
  0x28, 0x7b, 0x9e, 0x64, 0xd2, 0xba, 0x01, 0x06, 0x85, 0x3c, 0x23, 0x6f, 0x41, 0x2c, 0x18, 0x09,
  0xf4, 0x64, 0x93, 0x53, 0x33, 0x18, 0x29, 0xe5, 0x2b, 0x0e, 0xdd, 0xa0, 0xb0, 0x7e, 0xb5, 0x10,
  0x00, 0xcb, 0xf4, 0xb7, 0x60, 0x3f, 0x4e, 0xf4, 0x85, 0x0c, 0x0c, 0x69, 0x45, 0x96, 0x0e, 0x90,
  0x75, 0x08, 0xac, 0x4a, 0x3f, 0x1d, 0x8c, 0x0f, 0x9b, 0x0b, 0xa9, 0xe5, 0xd6, 0x70, 0x0a, 0xa6,
  0x7f, 0x43, 0xb7, 0x8b, 0x35, 0x7e, 0x61, 0xcf, 0x21, 0x90, 0x83, 0x96, 0xb0, 0x79, 0x07, 0x72,
  0xa0, 0xd9, 0x60, 0x90, 0x81, 0xfd, 0x38, 0xd4, 0xfe, 0x3c, 0x26, 0x9f, 0x46, 0xc6, 0x81, 0x1d,
  0xc4, 0xc5, 0xfd, 0xb4, 0xd0, 0xfa, 0x54, 0x3b, 0xbe, 0x31, 0x32, 0x94, 0x25, 0x68, 0xba, 0xe1,
  0x0c, 0x67, 0x21, 0x03, 0x88, 0x78, 0x7a, 0xe2, 0x36, 0xe9, 0x9d, 0x02, 0x9e, 0x23, 0xb4, 0x92,
  0x77, 0x72, 0x04, 0x44, 0x55, 0xe0, 0x34, 0x0d, 0x6d, 0xc0, 0xdb, 0xac, 0x0f, 0x37, 0x2b, 0x46,
  0xc1, 0x2f, 0xa9, 0x7c, 0x9f, 0xfe, 0x48, 0x0d, 0x86, 0xb1, 0xc3, 0xa7, 0xec, 0xe5, 0x08, 0x15,
  0xa3, 0x24, 0xa9, 0x60, 0x25, 0x10, 0x31, 0x10, 0x75, 0xcb, 0x5a, 0xe2, 0x0c, 0x8a, 0xb5, 0x1e,
  0xba, 0xbd, 0xe8, 0x8d, 0x17, 0xce, 0x76, 0x8a, 0x8e, 0xc3, 0xc3, 0x83, 0xd9, 0x4e, 0x7c, 0x08,
  0x14, 0xa0, 0xae, 0x53, 0x0a, 0x25, 0xe1, 0x6d, 0xd9, 0xa3, 0x36, 0x5b, 0x25, 0x41, 0x08, 0x59,
  0x00, 0xaa, 0xb2, 0x20, 0xe1, 0x12, 0x5c, 0xa4, 0x36, 0xff, 0x79, 0x0f, 0xb4, 0x2d, 0xb4, 0x10,
  0xf1, 0xe0, 0x83, 0x42, 0x7d, 0x91, 0x04, 0xe9, 0x1b, 0x46, 0x9c, 0xa2, 0xff, 0xd7, 0xbc, 0xed,
  0xf7, 0xca, 0xe7, 0x85, 0xa8, 0x1f, 0x1a, 0x18, 0xf0, 0x61, 0xa4, 0xb0, 0x15, 0x31, 0xf2, 0x6a,
  0xe9, 0x82, 0xb6, 0x0a, 0x74, 0x5c, 0x11, 0x00, 0xcd, 0x68, 0x49, 0x8f, 0x64, 0xcc, 0x3f, 0xa5,
  0x01, 0x9d, 0xa8, 0x74, 0xac, 0x0a, 0xf9, 0xeb, 0x2e, 0x44, 0x3c, 0xfe, 0xee, 0x86, 0xd0, 0xfb,
  0x80, 0xaa, 0x36, 0x58, 0x51, 0x9f, 0x6d, 0x28, 0xbc, 0xca, 0x07, 0xed, 0x68, 0x6b, 0xc4, 0x0d,
  0xab, 0xfe, 0x2e, 0x05, 0xea, 0x93, 0x15, 0x08, 0x5e, 0x30, 0x6c, 0x87, 0x35, 0xbc, 0x5c, 0x47,
  0xc6, 0x14, 0x19, 0x09, 0x15, 0x58, 0x57, 0x1e, 0xbe, 0x45, 0x92, 0x78, 0x54, 0x91, 0x44, 0x31,
  0xfd, 0x1c, 0x2b, 0xaa, 0x4a, 0x38, 0x39, 0x72, 0x8d, 0x7f, 0xf1, 0x25, 0x11, 0x49, 0xd2, 0x13,
  0xfe, 0xf6, 0xad, 0x08, 0xb8, 0xe6, 0x59, 0xf9, 0x90, 0x9d, 0xb2, 0x85, 0x7f, 0x32, 0x89, 0x81,
  0x3c, 0x78, 0x5f, 0xcf, 0x08, 0x23, 0xfd, 0x31, 0xfa, 0x6e, 0x33, 0x55, 0xc4, 0x29, 0xee, 0x71,
  0x92, 0xcb, 0x28, 0x68, 0x84, 0x95, 0x84, 0x71, 0xe2, 0x80, 0x3e, 0xbc, 0x80, 0x32, 0x6d, 0x4e,
  0x21, 0x97, 0x44, 0xd3, 0x5a, 0x48, 0x3a, 0x53, 0x1d, 0x63, 0xd0, 0x79, 0x55, 0x58, 0x01, 0x23,
  0xc4, 0xcc, 0x84, 0x4f, 0xd1, 0x22, 0x4b, 0xd5, 0xad, 0x7d, 0x34, 0xd4, 0x17, 0x75, 0x05, 0x4b,
  0xc9, 0xf2, 0xdc, 0xfc, 0x21, 0x07, 0x57, 0x0f, 0xcb, 0x04, 0x49, 0x87, 0x4b, 0x18, 0x2b, 0x37,
  0xe5, 0xcc, 0x77, 0x47, 0xaa, 0x91, 0x93, 0x01, 0x87, 0x4d, 0x91, 0x64, 0xdc, 0x92, 0x96, 0x7e,
  0x4a, 0xf2, 0x68, 0x3d, 0xb1, 0x66, 0xf2, 0x91, 0x32, 0xb7, 0xbf, 0xfe, 0xe6, 0x4d, 0x1b, 0xdf,
  0xa6, 0x3c, 0x9f, 0x63, 0xd5, 0x9f, 0xbd, 0x32, 0x60, 0x92, 0xaf, 0x97, 0xa6, 0xaf, 0x90, 0xd9,
  0xef, 0xdc, 0x8f, 0x65, 0x53, 0x9c, 0xde, 0x04, 0xa8, 0x84, 0x17, 0xd0, 0xfd, 0xc4, 0x53, 0xfd,
  0x6e, 0x67, 0x48, 0x28, 0x80, 0x7d, 0xea, 0x53, 0xf9, 0x4e, 0xad, 0x31, 0xdc, 0x1e, 0x34, 0x62,
  0x61, 0xa3, 0x1f, 0xb7, 0xc3, 0x04, 0x30, 0x4a, 0x20, 0x40, 0x35, 0x8a, 0x3e, 0xdd, 0x6b, 0xc0,
  0x3b, 0xa8, 0xe0, 0xed, 0x36, 0x84, 0x84, 0xef, 0x61, 0x48, 0x41, 0x33, 0xc6, 0x4f, 0xc0, 0xc5,
  0xbe, 0x44, 0x20, 0xa0, 0xd4, 0x90, 0xae, 0x22, 0xb7, 0x21, 0x3a, 0x63, 0x74, 0x2c, 0x81, 0xe2,
  0x6e, 0x45, 0xa3, 0xa6, 0xaf, 0x32, 0x17, 0xe9, 0xcb, 0xc2, 0x45, 0xfa, 0x22, 0x9d, 0xc4, 0x13,
  0x03, 0x61, 0x3b, 0x29, 0x01, 0xf5, 0xc9, 0x07, 0x2a, 0xe3, 0xba, 0x93, 0x3e, 0x5d, 0xe7, 0xc6,
  0x87, 0x5d, 0x87, 0x08, 0x05, 0x0c, 0x80, 0x04, 0x0b, 0x7d, 0x05, 0x42, 0xc5, 0xf0, 0xb1, 0x98,
  0xbf, 0x35, 0x8f, 0xfe, 0xf5, 0xcf, 0x43, 0xfd, 0xcb, 0x5e, 0x33, 0x16, 0xca, 0x12, 0xa6, 0x10,
  0x59, 0xe6, 0x0c, 0xb2, 0xf5, 0xe6, 0x03, 0x41, 0x75, 0x2d, 0xac, 0x1f, 0x58, 0x25, 0x83, 0x34,
  0x0a, 0x82, 0xfa, 0x35, 0xe5, 0x55, 0x5d, 0xc2, 0xf4, 0x87, 0x20, 0x04, 0x7f, 0xcb, 0xe1, 0x13,
  0xc2, 0x7d, 0x3b, 0x59, 0xdb, 0xb5, 0x07, 0xfe, 0xf5, 0x4f, 0x34, 0x08, 0xbc, 0x97, 0x37, 0x60,
  0x08, 0x68, 0x30, 0xed, 0x5f, 0x17, 0x34, 0xc5, 0xa7, 0xe1, 0xda, 0x43, 0x91, 0x39, 0x80, 0x6e,
  0x11, 0xc5, 0xe2, 0x0a, 0x1f, 0x69, 0xec, 0x4a, 0x59, 0xab, 0x52, 0x06, 0x14, 0x22, 0xbb, 0xfc,
  0x61, 0xc9, 0xa9, 0x66, 0x98, 0x4b, 0xea, 0xd1, 0x21, 0x95, 0xfc, 0x44, 0xb3, 0x61, 0xf9, 0x4a,
  0x9c, 0x02, 0xe7, 0x60, 0x49, 0xd5, 0xf1, 0x23, 0x68, 0x7f, 0x54, 0xcf, 0xd7, 0x5f, 0x92, 0xf2,
  0x6b, 0xe6, 0x37, 0x1f, 0x65, 0x2c, 0x4e, 0xa3, 0x78, 0x91, 0x83, 0x20, 0x07, 0x3a, 0x98, 0x6f,
  0xa4, 0xc3, 0xa6, 0xf7, 0xaf, 0x91, 0x24, 0x69, 0x04, 0x96, 0xaa, 0x0d, 0x15, 0xda, 0x38, 0x99,
  0xcf, 0xd3, 0x37, 0x9f, 0xaa, 0x4a, 0x3d, 0x68, 0x64, 0x2e, 0x7b, 0x2a, 0x67, 0x52, 0xa9, 0x43,
  0x9e, 0xfb, 0x23, 0x98, 0xe1, 0x4e, 0xbf, 0xd3, 0xc3, 0x33, 0xe6, 0x4f, 0xa1, 0x7a, 0x00, 0xeb,
  0x53, 0xb8, 0xdb, 0xe4, 0x0e, 0x8a, 0x30, 0x79, 0x2b, 0x8b, 0x6b, 0xac, 0x4d, 0x80, 0x48, 0x04,
  0x8a, 0x4f, 0xca, 0xda, 0x82, 0xd7, 0x03, 0xcc, 0x96, 0xd1, 0x98, 0xe8, 0x25, 0x42, 0x10, 0xb6,
  0x5b, 0xce, 0x03, 0xef, 0x63, 0x31, 0x0d, 0xb2, 0x94, 0x17, 0xa0, 0x96, 0xe3, 0x50, 0x59, 0x27,
  0x94, 0x03, 0x23, 0xe9, 0x40, 0xf4, 0x8c, 0x6f, 0xd3, 0x09, 0xf3, 0xd6, 0x11, 0xe4, 0x09, 0xfd,
  0x36, 0x94, 0x7e, 0x6b, 0x3f, 0xe7, 0x91, 0x1e, 0x8e, 0x63, 0xfa, 0xed, 0x6d, 0x2a, 0xcc, 0x0e,
  0x73, 0x57, 0x30, 0x2f, 0x21, 0xfd, 0x75, 0x63, 0xfa, 0x8f, 0x14, 0x5e, 0xe4, 0x43, 0x57, 0x8d,
  0xdb, 0xf4, 0x81, 0x60, 0xc4, 0x47, 0xbf, 0x45, 0x0d, 0xe2, 0x43, 0x58, 0xfa, 0xf7, 0x50, 0x34,
  0xf4, 0x7f, 0xdc, 0x1e, 0x70, 0xc7, 0xfb, 0x29, 0x82, 0x00, 0xa8, 0x71, 0x18, 0x20, 0x48, 0xf7,
  0xab, 0x1b, 0x7a, 0x28, 0xb6, 0x56, 0x51, 0x7b, 0x85, 0xfe, 0x9e, 0x3b, 0x56, 0x08, 0x1f, 0xbb,
  0xd4, 0xd9, 0x59, 0x88, 0x69, 0x69, 0x3f, 0xd4, 0x92, 0x16, 0x6f, 0x09, 0x3f, 0xf4, 0x37, 0xbd,
  0xd8, 0x3a, 0xcc, 0x7c, 0xf5, 0xb4, 0x1d, 0xc3, 0xd2, 0x40, 0xcc, 0xff, 0xfc, 0x27, 0x06, 0x7a,
  0xc4, 0x11, 0xaa, 0x7a, 0x1f, 0x4a, 0xfe, 0x20, 0x89, 0xbd, 0x0f, 0x9d, 0xbf, 0x41, 0xba, 0x05,
  0x9a, 0x3d, 0xc2, 0x34, 0x30, 0x2e, 0xbe, 0xa3, 0x81, 0x61, 0xcf, 0x91, 0xaa, 0x9f, 0xc0, 0xc9,
  0x67, 0xae, 0xb9, 0xfa, 0x55, 0xa8, 0x89, 0xef, 0x7d, 0x1c, 0x6e, 0x0f, 0xd7, 0x11, 0x0f, 0x1a,
  0x0b, 0xcf, 0x0a, 0x49, 0x7e, 0x3f, 0xca, 0x6b, 0xef, 0x3e, 0x33, 0xd3, 0x77, 0x62, 0xd3, 0x9e,
  0xee, 0xde, 0x12, 0x4e, 0xa2, 0xff, 0xbc, 0xa5, 0x9d, 0x9a, 0x48, 0x7b, 0x4d, 0x4f, 0x86, 0xf2,
  0x09, 0x3a, 0xa1, 0x71, 0x9b, 0x56, 0xb6, 0xed, 0x46, 0x16, 0xef, 0xf8, 0x2a, 0x3a, 0xa9, 0x3e,
  0xc5, 0x13, 0x37, 0x3f, 0x05, 0x72, 0x83, 0x88, 0x93, 0x7f, 0x41, 0xd3, 0x82, 0x1a, 0xa4, 0x87,
  0xf5, 0x3c, 0xac, 0x84, 0xf0, 0x5b, 0xba, 0xb6, 0x50, 0x0c, 0x19, 0x66, 0xb2, 0x0c, 0xc3, 0x00,
  0x26, 0x85, 0x2e, 0x13, 0x49, 0x74, 0xfb, 0x23, 0xc0, 0x73, 0x18, 0xcf, 0x80, 0x61, 0xb7, 0xba,
  0xbf, 0x37, 0xb1, 0xc3, 0x92, 0xf8, 0x50, 0x28, 0x31, 0x6c, 0x81, 0x9c, 0xb9, 0x8c, 0x45, 0x7b,
  0x0f, 0xd1, 0x78, 0xd8, 0x00, 0x79, 0x70, 0xb7, 0xee, 0x33, 0x3b, 0x59, 0xe8, 0x03, 0xb2, 0x78,
  0x9f, 0x0f, 0xc9, 0xe3, 0x7d, 0xec, 0x99, 0x7c, 0x7e, 0x1e, 0x92, 0x69, 0x86, 0xc8, 0xc2, 0x04,
  0xb9, 0x9a, 0xc6, 0x93, 0x4a, 0xc5, 0xfd, 0x3a, 0xf1, 0x46, 0x4d, 0xf9, 0xeb, 0xe8, 0x44, 0x06,
  0x53, 0x90, 0x36, 0x78, 0x4d, 0x7f, 0x12, 0xef, 0x71, 0xbc, 0x50, 0x64, 0x09, 0xd4, 0x3e, 0x24,
  0x1b, 0xcc, 0xc0, 0xb5, 0xe7, 0x74, 0x0d, 0x75, 0x33, 0x84, 0x0b, 0x54, 0x6a, 0xc9, 0xe8, 0xa4,
  0xc8, 0x41, 0xd7, 0x8f, 0xb9, 0x97, 0x9c, 0x5a, 0xe4, 0xfa, 0xae, 0x83, 0x5a, 0x1e, 0x36, 0x4f,
  0xc8, 0xba, 0x7e, 0xfb, 0xc3, 0x1a, 0x42, 0x78, 0x8f, 0xdb, 0x58, 0x4b, 0x87, 0x58, 0x1f, 0xa5,
  0xdb, 0xe7, 0xbb, 0xd3, 0x42, 0x07, 0xc5, 0x4f, 0x8c, 0x37, 0x2b, 0xe1, 0xd1, 0x19, 0x29, 0xb4,
  0x43, 0x21, 0xf0, 0x4e, 0x41, 0x63, 0x25, 0x89, 0x5e, 0x51, 0xfb, 0x59, 0x70, 0xa2, 0xf1, 0x21,
  0x3c, 0xdc, 0x89, 0x3a, 0x02, 0xee, 0x23, 0x37, 0xe6, 0x9a, 0xe9, 0x37, 0xef, 0x9a, 0x0f, 0x8f,
  0xcd, 0x68, 0xe2, 0x40, 0xf8, 0x3b, 0xde, 0x15, 0xd7, 0x88, 0xb7, 0x1f, 0xe0, 0x3b, 0x9f, 0x25,
  0x16, 0xbf, 0x20, 0x61, 0x91, 0xae, 0x76, 0x80, 0x83, 0xf3, 0x46, 0xb8, 0x13, 0xf2, 0xc6, 0x0a,
  0xb0, 0x98, 0xba, 0x8b, 0xf9, 0x61, 0x78, 0xb7, 0x66, 0x0e, 0x91, 0x0c, 0x1e, 0x3b, 0xd7, 0x0f,
  0xb0, 0x8b, 0xfb, 0x10, 0xf0, 0x7c, 0x58, 0xfc, 0x64, 0x8e, 0xfd, 0x52, 0x2c, 0x68, 0x26, 0x4e,
  0xf5, 0xd8, 0x36, 0x68, 0xd7, 0x83, 0xac, 0xc1, 0x03, 0xe4, 0xb7, 0xcc, 0xd6, 0x35, 0x1b, 0xde,
  0xb4, 0xf4, 0x3b, 0xb9, 0x08, 0x8e, 0x1e, 0x5b, 0xa3, 0xbe, 0xc2, 0xdb, 0xa8, 0x77, 0xf3, 0x01,
  0x1f, 0x6f, 0x85, 0x0c, 0xad, 0x90, 0xa4, 0x35, 0x7e, 0x9c, 0x28, 0x3a, 0xb6, 0x60, 0x7b, 0x2f,
  0x99, 0x3b, 0x55, 0xdc, 0x86, 0x6c, 0x5d, 0x3d, 0x77, 0xb4, 0xa0, 0x21, 0x92, 0x82, 0x51, 0x7a,
  0x4b, 0x72, 0xd4, 0xfa, 0x23, 0x72, 0xa7, 0x2a, 0x6c, 0x28, 0x64, 0x53, 0xb2, 0x6e, 0x56, 0x8e,
  0xd2, 0x3b, 0x9d, 0x4f, 0x56, 0xa1, 0xc8, 0x7f, 0xba, 0x82, 0x68, 0xd0, 0xf2, 0x80, 0x0d, 0x9e,
  0x6f, 0x3e, 0xd9, 0xd3, 0x11, 0xed, 0xc0, 0x8f, 0xc0, 0x61, 0xae, 0x53, 0x15, 0x6c, 0xda, 0xd8,
  0x67, 0xb2, 0xf0, 0xa0, 0xf9, 0x89, 0x0a, 0xa6, 0xd5, 0x61, 0x72, 0xa8, 0xd8, 0xd7, 0x05, 0xb2,
  0x37, 0x7d, 0xb2, 0xaa, 0xdd, 0x94, 0x75, 0x88, 0xf8, 0x04, 0x2b, 0x58, 0xe3, 0x60, 0x1f, 0x37,
  0x3b, 0xd5, 0x65, 0x45, 0x22, 0x65, 0x15, 0xe9, 0x64, 0x29, 0x69, 0x36, 0x27, 0xc5, 0xd0, 0x0f,
  0x76, 0xee, 0x6c, 0xfc, 0x7c, 0x50, 0xc5, 0x0c, 0x54, 0xb1, 0x37, 0xe9, 0x4e, 0x56, 0x7b, 0x15,
  0x48, 0xad, 0x8f, 0xf9, 0x5d, 0xa2, 0x9d, 0xf4, 0x5c, 0x1d, 0x7c, 0xa2, 0xf4, 0x7b, 0xda, 0x22,
  0x9d, 0x75, 0x0b, 0x00, 0xbd, 0x4f, 0x60, 0x7a, 0x82, 0x88, 0xef, 0x19, 0xab, 0xc6, 0x14, 0xef,
  0x16, 0xf8, 0x11, 0x09, 0x99, 0xeb, 0x74, 0xde, 0x9e, 0x9c, 0xef, 0x01, 0x61, 0x8e, 0x64, 0xf0,
  0xce, 0x7e, 0x53, 0xdf, 0xf9, 0x9c, 0x44, 0xf8, 0x38, 0x2e, 0x4b, 0xaa, 0x36, 0xfe, 0xa4, 0xae,
  0x2a, 0x90, 0x0e, 0x41, 0x73, 0xc9, 0xf1, 0x62, 0x79, 0xea, 0xfb, 0x65, 0x1d, 0x28, 0x1a, 0x22,
  0x58, 0x6d, 0x4c, 0xb0, 0x59, 0xfb, 0x39, 0xd8, 0xbe, 0xa4, 0xdb, 0x96, 0x7e, 0x5f, 0x85, 0x17,
  0x1a, 0x75, 0xaf, 0x61, 0x99, 0x5f, 0xc5, 0xdf, 0x4e, 0x38, 0xd1, 0xbc, 0x7d, 0x01, 0xce, 0x4a,
  0xdd, 0x1c, 0xd1, 0x97, 0x61, 0xd9, 0xb1, 0x80, 0xe1, 0x79, 0x9a, 0xa9, 0x60, 0x3c, 0x6c, 0x96,
  0x6e, 0x64, 0x83, 0x22, 0x85, 0xaf, 0x41, 0x4e, 0x6d, 0xe9, 0xd6, 0x53, 0x5b, 0x91, 0x8e, 0xe8,
  0xbb, 0x47, 0x74, 0xdd, 0x0f, 0xda, 0x9e, 0x9e, 0x6e, 0xfb, 0xa3, 0x73, 0x4a, 0x62, 0xfc, 0x57,
  0x45, 0xfa, 0xcd, 0x8d, 0xa5, 0xf6, 0x61, 0x3a, 0xfd, 0x2b, 0x31, 0x95, 0x5f, 0xd5, 0xdf, 0x8d,
  0x2a, 0x09, 0xab, 0x11, 0xad, 0x48, 0x77, 0x2f, 0x6a, 0x00, 0xec, 0xaf, 0xa5, 0xa2, 0xfe, 0x17,
  0x93, 0x11, 0x17, 0x50, 0x1f, 0x29, 0x0f, 0x96, 0xe8, 0x3f, 0x47, 0xcc, 0x3f, 0x82, 0xb1, 0x4d,
  0xcd, 0xa3, 0x58, 0xca, 0x7f, 0x39, 0x9a, 0xff, 0x07, 0x8f, 0xf9, 0x48, 0xfc, 0x4b, 0x86, 0x3c,
  0xf4, 0xa8, 0x88, 0x17, 0xed, 0x91, 0xf8, 0x57, 0x62, 0x3d, 0xfe, 0x2b, 0xb1, 0x16, 0x83, 0xb8,
  0x8e, 0xff, 0x52, 0x5c, 0x47, 0xa2, 0x3a, 0x39, 0x8d, 0x2d, 0x31, 0x87, 0x6f, 0xa3, 0xf8, 0x17,
  0x97, 0x04, 0xfd, 0x7c, 0x82, 0x7f, 0x80, 0x04, 0x2f, 0xdf, 0xbe, 0xc2, 0x23, 0x08, 0x89, 0xe8,
  0x07, 0xce, 0x19, 0xd5, 0x4f, 0x65, 0x75, 0x12, 0xb2, 0xce, 0x04, 0x1e, 0x5c, 0x1b, 0x66, 0x20,
  0xe6, 0x67, 0xdf, 0xd5, 0x9b, 0xd9, 0xf1, 0xe5, 0xc0, 0x7e, 0x8c, 0xb3, 0xdb, 0xe8, 0xd7, 0xe8,
  0x59, 0xa0, 0x99, 0x5f, 0x67, 0x61, 0x11, 0x09, 0x41, 0xb2, 0x7c, 0x57, 0xcf, 0xd3, 0xf1, 0x37,
  0x84, 0x90, 0x88, 0x9e, 0x70, 0xe0, 0x9c, 0xc8, 0xc2, 0xba, 0xf1, 0x53, 0x44, 0xf8, 0x83, 0x1c,
  0x7a, 0x6b, 0xfc, 0xb5, 0x83, 0x3c, 0xfa, 0x60, 0x8e, 0xff, 0x95, 0x83, 0x3c, 0x52, 0x3f, 0x1e,
  0x64, 0x52, 0x4d, 0x4a, 0xac, 0xb4, 0x63, 0xfd, 0xc4, 0xe7, 0x77, 0x72, 0x82, 0x2a, 0x05, 0xf1,
  0xf8, 0x98, 0x0b, 0xf0, 0x62, 0xeb, 0xd8, 0xec, 0x2c, 0x1d, 0xff, 0x07, 0xa8, 0xcc, 0xc9, 0x63,
  0xb2, 0xcb, 0x7e, 0x2c, 0x5e, 0x53, 0xa5, 0xb3, 0x28, 0x93, 0x4a, 0xd8, 0x6f, 0xd1, 0x33, 0x80,
  0x72, 0x16, 0xfd, 0xfb, 0x29, 0x32, 0xe1, 0xe3, 0x72, 0xdc, 0xe9, 0x72, 0x76, 0x4b, 0x89, 0xe8,
  0xe9, 0x72, 0xff, 0x2f, 0x73, 0xac, 0x1b, 0xec, 0x7e, 0x52, 0x69, 0x3b, 0x09, 0x23, 0xe0, 0xae,
  0x38, 0x0d, 0x0a, 0x9f, 0xa0, 0x7f, 0xc3, 0x03, 0x3b, 0x90, 0xf5, 0x07, 0xdc, 0xa1, 0x9f, 0xc5,
  0xb7, 0xaf, 0xab, 0x47, 0xdc, 0x25, 0x87, 0xa8, 0x62, 0x59, 0x02, 0xf1, 0xc2, 0xa6, 0xd7, 0x85,
  0x9b, 0xf1, 0x5f, 0xc1, 0x91, 0x25, 0xe1, 0x67, 0x3f, 0x7f, 0x0f, 0xaa, 0x07, 0x55, 0x02, 0x18,
  0x1f, 0xe4, 0xff, 0x57, 0x10, 0xef, 0xa2, 0x5f, 0xd5, 0x0c, 0x5e, 0xa7, 0x13, 0xf6, 0xfc, 0x49,
  0xd2, 0xe2, 0x63, 0xc5, 0x02, 0x92, 0x06, 0xad, 0x10, 0x50, 0x17, 0x8c, 0x8d, 0xc9, 0x87, 0xd2,
  0x82, 0x89, 0x39, 0x53, 0x91, 0xfc, 0x61, 0x26, 0x3c, 0x69, 0x64, 0x43, 0x75, 0x6e, 0x2a, 0x3a,
  0xf5, 0x04, 0xaa, 0xbb, 0xb5, 0x3f, 0x68, 0xfa, 0x04, 0x91, 0xf1, 0x49, 0x26, 0xff, 0x27, 0x16,
  0x5d, 0xc8, 0xa6, 0xf0, 0x2b, 0xfd, 0xbb, 0x27, 0x92, 0x4c, 0xaf, 0xfb, 0x57, 0x70, 0x8f, 0x30,
  0x1a, 0xbf, 0x10, 0x4c, 0x53, 0x8f, 0x45, 0xec, 0x23, 0x53, 0x09, 0x6c, 0xb5, 0xe4, 0x16, 0xf9,
  0x83, 0xa3, 0xfb, 0x29, 0xd9, 0x12, 0x52, 0x1f, 0xb8, 0x42, 0xbc, 0xbd, 0xf5, 0xc8, 0x93, 0x23,
  0x74, 0xf3, 0x99, 0xaf, 0xad, 0x2a, 0xdb, 0xe5, 0x99, 0x87, 0x7e, 0x8f, 0x81, 0xba, 0x76, 0x55,
  0x1a, 0xdb, 0x86, 0xec, 0x95, 0xa2, 0xa6, 0x2d, 0x79, 0xfd, 0xed, 0x58, 0x7f, 0x2c, 0x73, 0xfc,
  0xc8, 0xe3, 0x61, 0xd6, 0xd4, 0x7f, 0x51, 0x72, 0xa5, 0xfe, 0x0a, 0xc9, 0xf5, 0x4e, 0x3d, 0xa3,
  0xe8, 0x10, 0x3d, 0xc5, 0x75, 0xd6, 0x2d, 0x6d, 0xf4, 0x92, 0x04, 0x28, 0x7c, 0xb1, 0x90, 0x0d,
  0x43, 0xc0, 0xcb, 0x69, 0x83, 0xf7, 0x51, 0x7d, 0xa2, 0x4d, 0x97, 0x3e, 0x7f, 0x58, 0x4c, 0xfe,
  0x89, 0x79, 0xfc, 0xfb, 0x91, 0xfa, 0x9d, 0x72, 0xf1, 0x2f, 0x93, 0x89, 0xbf, 0x1f, 0xd3, 0xcf,
  0x09, 0xc2, 0x3f, 0x29, 0x04, 0xff, 0xac, 0x00, 0xfc, 0x93, 0xc2, 0xef, 0x8f, 0x08, 0xbe, 0x13,
  0xb2, 0xe7, 0xbf, 0x23, 0xf0, 0xdc, 0x40, 0xd0, 0x83, 0xe6, 0xc8, 0x1f, 0xc1, 0x4e, 0x67, 0xb2,
  0x09, 0x72, 0xd9, 0xed, 0x75, 0x82, 0xde, 0x16, 0x76, 0x9d, 0x4e, 0xa6, 0x98, 0x18, 0x6b, 0x18,
  0xd0, 0x37, 0x3c, 0x3d, 0x79, 0xa4, 0xfa, 0xc7, 0x5c, 0x5a, 0x0c, 0xbb, 0x59, 0x2e, 0xf8, 0xf8,
  0xcb, 0x86, 0xf3, 0xa7, 0x7d, 0xdb, 0xd9, 0x67, 0x7b, 0xe8, 0xdd, 0x09, 0x63, 0x7c, 0x5b, 0x32,
  0x27, 0x64, 0xcc, 0xef, 0x93, 0x2b, 0xfe, 0x83, 0x0c, 0xba, 0x1e, 0xc5, 0x1d, 0xb7, 0x33, 0xc7,
  0x13, 0xe9, 0x87, 0xfb, 0xe1, 0x05, 0x41, 0xde, 0xbf, 0x86, 0x17, 0x47, 0x69, 0xea, 0xbd, 0xcf,
  0xc0, 0x83, 0xcb, 0xc7, 0x31, 0x7d, 0x07, 0x7b, 0x5d, 0x81, 0x7d, 0x1b, 0xc3, 0xfd, 0x3b, 0x58,
  0xa2, 0x2e, 0x0b, 0xa6, 0x6c, 0xe1, 0x13, 0xa3, 0x1b, 0x20, 0xbe, 0x3d, 0x7b, 0xc3, 0x87, 0x86,
  0xd7, 0x55, 0xe9, 0xfe, 0x05, 0x10, 0x59, 0x90, 0x2e, 0xe8, 0x59, 0x81, 0x22, 0x5e, 0x9e, 0x11,
  0x73, 0xa6, 0xeb, 0x71, 0xc4, 0xec, 0x4d, 0xbd, 0x37, 0x20, 0x0d, 0x8d, 0xcc, 0xd2, 0xc6, 0xf4,
  0x8a, 0x0b, 0x7a, 0x69, 0xeb, 0x67, 0xf1, 0xb5, 0xd6, 0xac, 0x1b, 0x04, 0xc3, 0x90, 0xc3, 0xd1,
  0xf8, 0xf7, 0x2c, 0xff, 0x9b, 0xd8, 0x13, 0x39, 0x75, 0x40, 0x52, 0x74, 0x6e, 0x07, 0x5c, 0xdd,
  0xbe, 0x2d, 0x46, 0x3b, 0xb2, 0x90, 0xc4, 0x55, 0x78, 0xbc, 0xe4, 0x14, 0x2b, 0xef, 0xe3, 0x54,
  0x41, 0x8b, 0x14, 0xef, 0xff, 0x54, 0x96, 0x8c, 0x14, 0x9c, 0x3c, 0xe1, 0x71, 0x1a, 0x3a, 0xbd,
  0x5e, 0x84, 0xbc, 0x84, 0xc7, 0x0a, 0x86, 0x87, 0x4a, 0x1d, 0xe9, 0x2f, 0x2f, 0x29, 0x26, 0x76,
  0xf7, 0x27, 0xbd, 0xd1, 0xed, 0xa0, 0xcf, 0xff, 0xb7, 0xf5, 0xe7, 0x70, 0x21, 0xf4, 0xe1, 0x71,
  0x24, 0xdc, 0x3a, 0x34, 0xf9, 0xcc, 0xe1, 0x25, 0x4f, 0xd0, 0x87, 0x66, 0xd8, 0xbb, 0xbc, 0x9e,
  0xeb, 0x67, 0xa0, 0x41, 0x7a, 0x07, 0x20, 0xf6, 0x3d, 0x81, 0x53, 0x38, 0x48, 0xc6, 0x0f, 0x0f,
  0x17, 0xe0, 0xe3, 0x1c, 0x30, 0x88, 0xe0, 0xe9, 0x84, 0x08, 0x39, 0x60, 0x70, 0x28, 0x94, 0x42,
  0x0f, 0x17, 0x44, 0xbc, 0x87, 0x0b, 0xf0, 0x82, 0xaf, 0xe0, 0xe1, 0x82, 0xc8, 0x41, 0x43, 0x07,
  0x7f, 0x67, 0x0e, 0x8f, 0xf6, 0xda, 0x7d, 0x8a, 0x1d, 0x48, 0x4d, 0x5c, 0x41, 0xb1, 0x9e, 0xfb,
  0x47, 0xe7, 0xc8, 0x51, 0xd1, 0x1c, 0x9e, 0x11, 0x25, 0x28, 0x91, 0x90, 0x74, 0x92, 0x96, 0x71,
  0xfe, 0x0e, 0x90, 0xff, 0xb1, 0x37, 0x8f, 0xec, 0x93, 0x21, 0x44, 0x14, 0x58, 0x40, 0xdd, 0x3f,
  0x4c, 0x77, 0x24, 0xa6, 0xc4, 0x15, 0xc2, 0x76, 0x61, 0xcf, 0x7e, 0x90, 0xe7, 0xf1, 0x2e, 0x09,
  0x81, 0xb9, 0x89, 0x9b, 0x7d, 0x87, 0xa7, 0x52, 0xde, 0x22, 0xf2, 0x42, 0x50, 0xf0, 0x62, 0xbc,
  0xc8, 0x54, 0xde, 0xfd, 0x2f, 0xbe, 0xe3, 0x91, 0xe0, 0xc8, 0xfb, 0x21, 0xd1, 0x97, 0x30, 0x41,
  0x00, 0xc6, 0x07, 0xbc, 0xe7, 0xac, 0x70, 0xfe, 0x18, 0x6b, 0xff, 0x7e, 0x16, 0x20, 0xef, 0x3d,
  0x0a, 0xe0, 0xdb, 0xa0, 0x23, 0x0c, 0x43, 0xff, 0x6e, 0x9a, 0x6a, 0x26, 0x4c, 0x2d, 0x61, 0xae,
  0x12, 0x2b, 0xf1, 0x36, 0x1a, 0x0d, 0x72, 0x9e, 0x3c, 0x8a, 0xf9, 0x38, 0xcd, 0xda, 0xfa, 0x3b,
  0xe6, 0x5f, 0x3f, 0x2a, 0xf4, 0x36, 0xaa, 0x3f, 0x0c, 0xef, 0xe8, 0xd9, 0x59, 0x7a, 0x26, 0x67,
  0x7c, 0x0c, 0xce, 0x8b, 0x71, 0x1a, 0x1f, 0xff, 0x9d, 0x2c, 0x47, 0xd1, 0x21, 0x6b, 0x45, 0x6c,
  0x75, 0x10, 0xdd, 0x19, 0x88, 0x60, 0xf7, 0x0c, 0xcf, 0x31, 0x11, 0xe1, 0x7d, 0x9c, 0xa6, 0x42,
  0x1a, 0x43, 0xa8, 0x8b, 0x9f, 0xf6, 0x19, 0x62, 0x7f, 0xf8, 0x85, 0x8f, 0x85, 0xac, 0x6b, 0x75,
  0x8e, 0xfe, 0x89, 0x49, 0xef, 0xe1, 0x23, 0x02, 0x34, 0x10, 0x5b, 0x8d, 0x01, 0x8f, 0x90, 0x1a,
  0x14, 0x8d, 0x98, 0x16, 0x42, 0x6e, 0x63, 0x3d, 0x5a, 0x28, 0xa6, 0xf7, 0xcc, 0x6e, 0xb8, 0xaa,
  0x2a, 0x5f, 0xac, 0x74, 0x72, 0xa0, 0xb1, 0x44, 0xaf, 0xfb, 0x0f, 0x0d, 0xb1, 0x0a, 0x39, 0xd4,
  0x18, 0x78, 0xe8, 0x35, 0x3a, 0x88, 0x4b, 0x89, 0xce, 0x14, 0x94, 0x57, 0x65, 0xeb, 0x93, 0xe2,
  0x1d, 0x52, 0xcb, 0x2e, 0x7f, 0x18, 0x0f, 0x4b, 0x36, 0x73, 0x12, 0xb8, 0x6c, 0x1e, 0xd3, 0x0b,
  0x93, 0x49, 0x72, 0x68, 0x90, 0xa1, 0xa7, 0x06, 0x0f, 0x62, 0x6a, 0xdc, 0x62, 0xc7, 0x0e, 0x5c,
  0x7a, 0x9f, 0xcf, 0x1c, 0xbe, 0x0c, 0x76, 0xf7, 0x33, 0x07, 0x31, 0x83, 0x44, 0xfc, 0xe4, 0xa1,
  0xcc, 0x60, 0xb5, 0x93, 0x07, 0x34, 0xfd, 0xbd, 0xfd, 0x5d, 0x87, 0x35, 0x03, 0x24, 0xf8, 0xdc,
  0xc1, 0xcd, 0x4f, 0xd0, 0xe1, 0xc3, 0x43, 0x9c, 0xc1, 0x0e, 0xfe, 0xfe, 0x03, 0x9d, 0xde, 0xe7,
  0x2f, 0x39, 0xdc, 0xe9, 0x03, 0xf8, 0xbb, 0x0e, 0x7a, 0x7a, 0x9f, 0x63, 0x61, 0x62, 0xde, 0xe7,
  0x2f, 0x3a, 0x00, 0xfa, 0x21, 0xc2, 0xc7, 0x0e, 0x83, 0xfa, 0xf0, 0x3d, 0x62, 0x2d, 0xfd, 0x8e,
  0x43, 0xa2, 0xde, 0xe7, 0xd3, 0x07, 0x46, 0x43, 0x90, 0x3f, 0x72, 0x78, 0xf4, 0x13, 0xd8, 0x86,
  0x1c, 0x2a, 0x3d, 0x28, 0xf7, 0x7e, 0x4c, 0xae, 0xa1, 0xd8, 0xcd, 0x7c, 0xe6, 0xc0, 0xa9, 0xfd,
  0x38, 0xaa, 0x16, 0x91, 0xbc, 0xf6, 0x81, 0x4e, 0x2a, 0x86, 0x2d, 0xe7, 0xdc, 0x31, 0x27, 0xd3,
  0x5f, 0x7b, 0xb8, 0xf3, 0x10, 0xb2, 0x75, 0xd0, 0x33, 0x73, 0x3a, 0xba, 0x2f, 0xb0, 0x9c, 0xd9,
  0x37, 0xfb, 0x2d, 0x71, 0x85, 0xbe, 0xa5, 0x0b, 0x68, 0x2a, 0xee, 0xfd, 0x0b, 0xaa, 0xc9, 0x91,
  0x26, 0xed, 0xf0, 0x17, 0xff, 0x10, 0xc6, 0x8f, 0xff, 0x1f, 0xfc, 0x21, 0xf2, 0x81, 0xcc, 0xcf,
  0x00, 0x00
};



/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Shared resources
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/

void mWebServer::WebSend_JSON_RootStatus_Table(AsyncWebServerRequest *request){

  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
  
  JsonBuilderI->Start();
    pCONT->Tasker_Interface(FUNC_WEB_APPEND_ROOT_STATUS_TABLE_IFCHANGED);
  JsonBuilderI->End();

  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

}


void mWebServer::Web_Base_Page_Draw(AsyncWebServerRequest *request){
        
  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
  
  JsonBuilderI->Start();
    WebAppend_Root_Draw_PageTitleFields();
  JsonBuilderI->End();

  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

} //end function


void mWebServer::WebSend_JSON_WebServer_TopBar(AsyncWebServerRequest *request){
    
  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;} 

  char buffer[30];

  JsonBuilderI->Start();
  JsonBuilderI->Array_Start("info_row");// Class name
    for(int row=0;row<4;row++){
    JsonBuilderI->Level_Start();
      JsonBuilderI->Add("id",row);
      switch(row){
        case 0:
          JsonBuilderI->Add_FP("ih",PSTR("\"%s U%s\""), pCONT->mt->mtime.hhmmss_ctr, pCONT->mt->uptime.hhmmss_ctr);
          JsonBuilderI->Add("fc", pCONT->mt->uptime.seconds_nonreset<SEC_IN_HOUR?PSTR("#ff0000"):PSTR("#ffffff"));    
        break;
        case 1:{        
          int8_t wifi_perc = pCONT_wif->GetRSSPercentage();
          char colour_ctr[7];
          if(wifi_perc<20){      sprintf_P(colour_ctr,PSTR("%s"),PSTR("#ff0000")); }
          else if(wifi_perc<30){ sprintf_P(colour_ctr,PSTR("%s"),PSTR("#fcba03")); }
          else{                  sprintf_P(colour_ctr,PSTR("%s"),PSTR("#ffffff")); }
          JsonBuilderI->Add_FP("ih",PSTR("\"%s %d%% (%d&nbsp;dBm)\""), WiFi.SSID().c_str(),wifi_perc,pCONT_wif->GetRSSdBm());
          JsonBuilderI->Add("fc", colour_ctr);    
        }break;
        case 2:
          JsonBuilderI->Add("ihr",pCONT_set->firmware_version.current.name_ctr);
          JsonBuilderI->Add("fc", pCONT_sup->GetVersionColour(buffer));    

        break;
        case 3:
            JsonBuilderI->Add_FP("ih",PSTR("\"%dc %d %s|%s PT(%s) LPS(%d)\""), pCONT_set->Settings.bootcount, ESP.getFreeHeap(), F(__DATE__), F(__TIME__), pCONT_set->boot_status.module_template_used ? "Y" : "N", pCONT_sup->activity.cycles_per_sec);
    
        break;
      } //end switch 
   JsonBuilderI->Level_End();
   } // end for

  JsonBuilderI->Array_End();
  
  // JsonBuilderI->Array_Start("debug_line");// Class name
  //   JsonBuilderI->Level_Start();
  //     JsonBuilderI->Add_FP("ih",PSTR("\"%dc %d %s|%s PT(%s) LPS(%d)\""), pCONT_set->Settings.bootcount, ESP.getFreeHeap(), F(__DATE__), F(__TIME__), pCONT_set->boot_status.module_template_used ? "Y" : "N", pCONT_sup->activity.cycles_per_sec);
  //   JsonBuilderI->Level_End();
  // JsonBuilderI->Array_End();
  JsonBuilderI->End();


  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

} // end function




void mWebServer::WebSend_JSON_WebServer_StatusPopoutData(AsyncWebServerRequest *request){
    
  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;} 

  char buffer[30];

  JsonBuilderI->Start();
  JsonBuilderI->Array_Start("info_row");// Class name
    for(int row=0;row<4;row++){
    JsonBuilderI->Level_Start();
          JsonBuilderI->Add("id",row);
      switch(row){
        case 0:
          JsonBuilderI->Add_FP("ih",PSTR("\"%s U%s\""), pCONT->mt->mtime.hhmmss_ctr, pCONT->mt->uptime.hhmmss_ctr);
          JsonBuilderI->Add("fc", pCONT->mt->uptime.seconds_nonreset<SEC_IN_HOUR?PSTR("#ff0000"):PSTR("#ffffff"));    
        break;
        case 1:{        
          int8_t wifi_perc = pCONT_wif->GetRSSPercentage();
          char colour_ctr[7];
          if(wifi_perc<20){      sprintf_P(colour_ctr,PSTR("%s"),PSTR("#ff0000")); }
          else if(wifi_perc<30){ sprintf_P(colour_ctr,PSTR("%s"),PSTR("#fcba03")); }
          else{                  sprintf_P(colour_ctr,PSTR("%s"),PSTR("#ffffff")); }
          JsonBuilderI->Add_FP("ih",PSTR("\"%s %d%% (%d&nbsp;dBm)\""), WiFi.SSID().c_str(),wifi_perc,pCONT_wif->GetRSSdBm());
          JsonBuilderI->Add("fc", colour_ctr);   
          // JsonBuilderI->Add("fc", "red");    
        }break;
        case 2:
          JsonBuilderI->Add("ihr",pCONT_set->firmware_version.current.name_ctr);
          JsonBuilderI->Add("fc", pCONT_sup->GetVersionColour(buffer));    
        break;
        case 3:
            JsonBuilderI->Add_FP("ih",PSTR("\"%dc %d %s|%s PT(%s) LPS(%d)\""), pCONT_set->Settings.bootcount, ESP.getFreeHeap(), F(__DATE__), F(__TIME__), pCONT_set->boot_status.module_template_used ? "Y" : "N", pCONT_sup->activity.cycles_per_sec);
        break;
      } //end switch 
    JsonBuilderI->Level_End();
    } // end for

  JsonBuilderI->Array_End();
  
  // JsonBuilderI->Array_Start("debug_line");// Class name
  //   JsonBuilderI->Level_Start();
  //     JsonBuilderI->Add_FP("ih",PSTR("\"%dc %d %s|%s PT(%s) LPS(%d)\""), pCONT_set->Settings.bootcount, ESP.getFreeHeap(), F(__DATE__), F(__TIME__), pCONT_set->boot_status.module_template_used ? "Y" : "N", pCONT_sup->activity.cycles_per_sec);
  //   JsonBuilderI->Level_End();
  // JsonBuilderI->Array_End();
  JsonBuilderI->End();


  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

} // end function



/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Root Page
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/

void mWebServer::HandlePage_Root(AsyncWebServerRequest *request){

  //AddLog_P(LOG_LEVEL_TEST,PSTR(D_LOG_ASYNC WEB_HANDLER_SCRIPT_WEB_DATA_FETCHER_RUNTIME_URLS_RATES_VAR "Sf::%s"),"HandlePage_Root");

  // if (CaptivePortal(request)) { return; }  // If captive portal redirect instead of displaying the page.

  // if (WifiIsInManagerMode()) {
  //   #ifndef FIRMWARE_MINIMAL
  //     if (
  //         (pCONT_set->Settings.web_password[0] != 0) && 
  //         !(request->hasParam("USER1")) && !(request->hasParam("PASS1")
  //       ) && HTTP_MANAGER_RESET_ONLY != webserver_state) {
  //       HandleWifiLogin(request);
  //     } else {
  //       if (!(pCONT_set->Settings.web_password[0] != 0) || 
  //           (((request->arg("USER1") == WEB_USERNAME ) && (request->arg("PASS1") == pCONT_set->Settings.web_password )) || HTTP_MANAGER_RESET_ONLY == webserver_state)) {
  //         HandleWifiConfiguration(request);
  //       } else {
  //         // wrong user and pass
  //         HandleWifiLogin(request);
  //       }
  //     }
  //   #endif  // Not FIRMWARE_MINIMAL
  //   return;
  // }
    
  AsyncWebServerResponse *response = request->beginResponse_P(200, CONTENT_TYPE_TEXT_HTML_ID, PAGE_ROOT, PAGE_ROOT_L);
  response->addHeader("Content-Encoding","gzip");
  request->send(response);

}


void mWebServer::Web_Root_Draw(AsyncWebServerRequest *request){
        
  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
  
  JsonBuilderI->Start();
    WebAppend_Root_Draw_PageTitleFields();
    WebAppend_Root_Draw_PageTable();
    WebAppend_Root_Draw_PageButtons();
  JsonBuilderI->End();

  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

} //end function


void mWebServer::Web_Root_Draw_Modules(AsyncWebServerRequest *request){
        
  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
  
  JsonBuilderI->Start();
   WebAppend_Root_Draw_ModuleTable();
    WebAppend_Root_Draw_ModuleButtons();
  JsonBuilderI->End();
  
  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  
  
} //end function


//append to internal buffer if any root messages table
void mWebServer::WebAppend_Root_Draw_ModuleButtons(){

  JsonBuilderI->Array_Start("container_4");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("ihr");           // function
        JsonBuilderI->AppendBuffer("\"");
        pCONT->Tasker_Interface(FUNC_WEB_APPEND_ROOT_BUTTONS);
      JsonBuilderI->AppendBuffer("\"");
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();

}

void mWebServer::WebAppend_Root_Draw_PageButtons(){
  
  // JsonBuilderI->Array_Start("container_5");// Class name
  //   JsonBuilderI->Level_Start();
  //     JsonBuilderI->AddKey("ihr");           // function
  //       JsonBuilderI->AppendBuffer("\"");
  //       WebAppend_Button_Spaced(BUTTON_CONSOLE);
  //       WebAppend_Button(BUTTON_SYSTEM_SETTINGS);
  //     JsonBuilderI->AppendBuffer("\"");
  //   JsonBuilderI->Level_End();
  // JsonBuilderI->Array_End();

}


void mWebServer::Web_Root_UpdateURLs(AsyncWebServerRequest *request){
  
  JsonBuilderI->Start();
    JsonBuilderI->Level_Start("function");
      JsonBuilderI->Level_Start("Parse_Urls");
        pCONT->Tasker_Interface(FUNC_WEB_APPEND_RUNTIME_ROOT_URLS);
      JsonBuilderI->Level_End();
    JsonBuilderI->Level_End();
  JsonBuilderI->End();

  request->send_P(200, CONTENT_TYPE_APPLICATION_JSON_ID, data_buffer.payload.ctr);
  
}



void mWebServer::WebAppend_Root_Draw_PageTitleFields(){

  JsonBuilderI->Array_Start("page_title");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->Add("ihr",pCONT_set->Settings.system_name.friendly);
      JsonBuilderI->Add("fc", D_COLOUR_PAGE_TITLE);           
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();

  // char buffer[10];
  // JsonBuilderI->Array_Start("row_version_data");// Class name
  //   JsonBuilderI->Level_Start();
  //     JsonBuilderI->Add("ihr",pCONT_set->firmware_version.current.name_ctr);
  //     JsonBuilderI->Add("fc", pCONT_sup->GetVersionColour(buffer));           
  //   JsonBuilderI->Level_End();
  // JsonBuilderI->Array_End();

  // JsonBuilderI->Level_Start("function");
  //     JsonBuilderI->Add("SetTitle",pCONT_set->Settings.system_name.friendly);
  // JsonBuilderI->Level_End();  

  
  // JsonBuilderI->Array_Start("function");// Class name
  //   JsonBuilderI->Level_Start();
  //     JsonBuilderI->Add("SetTitle","Heelo");//pCONT_set->Settings.system_name.friendly);
  //   JsonBuilderI->Level_End();
  // JsonBuilderI->Array_End();


}

void mWebServer::WebAppend_Root_Draw_PageTable(){

  JsonBuilderI->Array_Start("container_2");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("ihr");           // function
        JsonBuilderI->AppendBuffer("\"{t}");
        pCONT->Tasker_Interface(FUNC_WEB_ADD_ROOT_TABLE_ROWS);
      JsonBuilderI->AppendBuffer("{t2}\"");
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();

}


void mWebServer::WebAppend_Root_Draw_ModuleTable(){

  JsonBuilderI->Array_Start("container_3");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("ihr");           // function
        JsonBuilderI->AppendBuffer("\"");
        pCONT->Tasker_Interface(FUNC_WEB_ADD_ROOT_MODULE_TABLE_CONTAINER);
      JsonBuilderI->AppendBuffer("\"");
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();

}


/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Console Page
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/

void mWebServer::HandlePage_Console(AsyncWebServerRequest *request){

  fConsole_active = true;

  if (!HttpCheckPriviledgedAccess()) { return; }
  
  if (request->hasParam("c2")) {      // Console refresh requested
    HandleConsoleRefresh(request);
    return;
  }

  // request->send_P(200,CONTENT_TYPE_TEXT_HTML_ID,PAGE_ROOT);
  
  AsyncWebServerResponse *response = request->beginResponse_P(200, CONTENT_TYPE_TEXT_HTML_ID, PAGE_ROOT, PAGE_ROOT_L);

  response->addHeader("Content-Encoding","gzip");
  
  request->send(response);
}


void mWebServer::Web_Console_Draw(AsyncWebServerRequest *request){
        
  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
  
  JsonBuilderI->Start();
    
  JsonBuilderI->Array_Start("container_1");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("ihr");           // function
        JsonBuilderI->AppendBuffer("\"");
        JsonBuilderI->AppendBuffer(PSTR("<fieldset><legend><b>&nbsp;Web Commands&nbsp;</b></legend>"));
        JsonBuilderI->AppendBuffer(PSTR("<textarea readonly='' id='console_textbox' cols='340' wrap='off' name='console_textbox'></textarea>"
          "<br><br>"
          "<form method='get' onsubmit='return l(1);'>"
              "<input id='c1'  style='background:#1d1d1d' placeholder='Enter Module Name eg pixels' autofocus='' name='c1'>"
              "<br>"
          "</form>")
        );
        JsonBuilderI->AppendBuffer(PSTR(
          "<form method='get' onsubmit='return l(1);'>"
          "<input id='com_web' name='com_web' style='background:#1d1d1d' placeholder='" "Enter command eg {name:value} or name value'" "' autofocus><br/>"
            "<button  class='buttonh bform1' type='submit'>Execute command</button>"
          "</form>"
        ));            
      JsonBuilderI->AppendBuffer(PSTR("</fieldset>"));
      // topic = module name only, in code, add "set/modulename"
      //payload = json message for multple inputs, OR, single input where {"a":"b"} can simply be "a b"

      JsonBuilderI->AppendBuffer(PSTR("<fieldset>"));
        JsonBuilderI->AppendBuffer(PSTR("<legend><b>&nbsp;MQTT Commands&nbsp;</b></legend>"));
        JsonBuilderI->AppendBuffer(PSTR(
        "<form method='get' onsubmit='return l(1);'>"
        "<input id='com_top' name='com_top' style='background:#1d1d1d' placeholder='" "Enter topic" "' autofocus><br/>"
        "</form>" ));
        JsonBuilderI->AppendBuffer(PSTR(
        "<form method='get' onsubmit='return l(1);'>"
        "<input id='com_pay' name='com_pay' style='background:#1d1d1d' placeholder='" "Enter payload" "' autofocus><br/>"
        "<button class='buttonh bform1' type='submit'>Execute Command</button>"
        "</form>"  ));
      JsonBuilderI->AppendBuffer(PSTR("</fieldset>"));

      JsonBuilderI->AppendBuffer("\"");
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();

  JsonBuilderI->Array_Start("container_5");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("ihr");           // function
        JsonBuilderI->AppendBuffer("\"");
        WebAppend_Button_Spaced(BUTTON_MAIN);
      JsonBuilderI->AppendBuffer("\"");
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();
    
  JsonBuilderI->Array_Start("function");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("Parse_AddScript");
        JsonBuilderI->AppendBuffer("\"");
        JsonBuilderI->AppendBuffer(PSTR(
          "set_console_as_page();"
          "enable_get_console_data();"
        )
      );
      JsonBuilderI->AppendBuffer("\"");
    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();
    
  JsonBuilderI->End();

  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

} //end function

void mWebServer::HandleConsoleRefresh(AsyncWebServerRequest *request)
{
  bool cflg = true;
  uint8_t counter = 0;                // Initial start, should never be 0 again

  // String svalue = request->arg("c1");
  // if (svalue.length() && (svalue.length() < INPUT_BUFFER_SIZE)) {
  //   AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_COMMAND "%s"), svalue.c_str());
  //   ExecuteWebCommand((char*)svalue.c_str(), SRC_WEBCONSOLE);
  // }

  char stmp[8];
  WebGetArg(request,"c2", stmp, sizeof(stmp));
  if (strlen(stmp)) { counter = atoi(stmp); }

  BufferWriterI->Start();

  BufferWriterI->Append_P(
    PSTR(
      "%d" //web_log_index
      "}1"
      "%d" //reset_web_log_flag
      "}1")
    , pCONT_set->web_log_index, reset_web_log_flag);

  if (!reset_web_log_flag) {
    counter = 0;                  //reset counter from webpage 
    reset_web_log_flag = true;
  }
  if (counter != pCONT_set->web_log_index) {   //if webpage counter does not match internal counter
    if (!counter) {    //and counter is not FIRST position
      counter = pCONT_set->web_log_index;  //use internal counter
      cflg = false;     //no NEW line
    }

    // get the webindex, and get all internal indexes until internal catches up with web
    do {
      char* tmp;
      size_t len;
      pCONT->mso->GetLog(counter, &tmp, &len);
      if (len) { //if there is new log data
      // and is not larger than buffer
        if (len > sizeof(data_buffer.payload.ctr) -2) { len = sizeof(data_buffer.payload.ctr); }
        char stemp[len +1]; //leak!
        strlcpy(stemp, tmp, len);
        // add new line if not first, then text
        BufferWriterI->Append_P(PSTR("%s%s"), (cflg) ? "\n" : "", stemp);
        cflg = true;
      }
      counter++; //internal counter
      if (!counter) { counter++; }  // Skip log index 0 as it is not allowed
      if(counter>100) break;
    } while (counter != pCONT_set->web_log_index);

  }

  BufferWriterI->Append_P(PSTR("}1"));
  
  request->send(200,CONTENT_TYPE_TEXT_HTML_ID,data_buffer.payload.ctr);
 
}

void mWebServer::Console_JSON_Data(AsyncWebServerRequest *request){

  if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
  
  JsonBuilderI->Start();
    
  JsonBuilderI->Array_Start("function");// Class name
    JsonBuilderI->Level_Start();
      JsonBuilderI->AddKey("Append_Console");

        char buffer[500];
        // sprintf(buffer, "{'link':1,'text':'hello','reset':0}");
        sprintf(buffer, "{\\\"link\\\":1}");

// I need to think how ANYTHING can pass through serial, json might not work


        // sprintf(buffer, "{}");
        JsonBuilderI->AppendBuffer("\"");
        JsonBuilderI->AppendBuffer(buffer);
        JsonBuilderI->AppendBuffer("\"");

    JsonBuilderI->Level_End();
  JsonBuilderI->Array_End();
        
  JsonBuilderI->End();

  WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  




}




/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Information Page
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/


/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Configuration and Templates
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/



void mWebServer::HandleWifiConfiguration(AsyncWebServerRequest *request)
{
//   //if (!HttpCheckPriviledgedAccess(!WifiIsInManagerMode())) { return; }

//   AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_CONFIGURE_WIFI);

//   if (request->hasParam("save") && HTTP_MANAGER_RESET_ONLY != webserver_state) {
//     WifiSaveSettings(request);
//     WebRestart(request, 2);
//     return;
//   }

//   WSStartAppend_P(request, S_CONFIGURE_WIFI, !WifiIsInManagerMode());
//   WSBufferAppend_P(response, HTTP_SCRIPT_WIFI);
//   WSContentSendStyle(request);

//   if (HTTP_MANAGER_RESET_ONLY != webserver_state) {
//     if (request->hasParam("scan")) {
// #ifdef USE_EMULATION
//       //UdpDisconnect();
// #endif  // USE_EMULATION
//       int n = WiFi.scanNetworks();
//       AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_WIFI D_SCAN_DONE));

//       if (0 == n) {
//         AddLog_P(LOG_LEVEL_DEBUG, S_LOG_WIFI, S_NO_NETWORKS_FOUND);
//         WSBufferAppend_P(response, S_NO_NETWORKS_FOUND);
//         WSBufferAppend_P(response, PSTR(". " D_REFRESH_TO_SCAN_AGAIN "."));
//       } else {
//         //sort networks
//         int indices[n];
//         for (int i = 0; i < n; i++) {
//           indices[i] = i;
//         }

//         // RSSI SORT
//         for (int i = 0; i < n; i++) {
//           for (int j = i + 1; j < n; j++) {
//             if (WiFi.RSSI(indices[j]) > WiFi.RSSI(indices[i])) {
//               std::swap(indices[i], indices[j]);
//             }
//           }
//         }

//         // remove duplicates ( must be RSSI sorted )
//         if (remove_duplicate_access_points) {
//           String cssid;
//           for (int i = 0; i < n; i++) {
//             if (-1 == indices[i]) { continue; }
//             cssid = WiFi.SSID(indices[i]);
//             for (int j = i + 1; j < n; j++) {
//               if (cssid == WiFi.SSID(indices[j])) {
//                 AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_WIFI D_DUPLICATE_ACCESSPOINT " %s"), WiFi.SSID(indices[j]).c_str());
//                 indices[j] = -1;  // set dup aps to index -1
//               }
//             }
//           }
//         }

//         //display networks in page
//         for (int i = 0; i < n; i++) {
//           if (-1 == indices[i]) { continue; }  // skip dups
//           AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_WIFI D_SSID " %s, " D_BSSID " %s, " D_CHANNEL " %d, " D_RSSI " %d"), WiFi.SSID(indices[i]).c_str(), WiFi.BSSIDstr(indices[i]).c_str(), WiFi.channel(indices[i]), WiFi.RSSI(indices[i]));
          
//           int quality = pCONT_wif->WifiGetRssiAsQuality(WiFi.RSSI(indices[i]));
//           int rss = WiFi.RSSI(indices[i]);

//           if (minimum_signal_quality == -1 || minimum_signal_quality < quality) {
//             uint8_t auth = WiFi.encryptionType(indices[i]);
            
//             #ifdef ESP8266
//             WSBufferAppend_P(response, PSTR("<div><a href='#p' onclick='c(this)'>%s</a>&nbsp;(%d)&nbsp<span class='q'>%s %d dBm (%d%%)</span></div>"),
//               htmlEscape(WiFi.SSID(indices[i])).c_str(),
//               WiFi.channel(indices[i]),
//               (ENC_TYPE_WEP == auth) ? D_WEP : (ENC_TYPE_TKIP == auth) ? D_WPA_PSK : (ENC_TYPE_CCMP == auth) ? D_WPA2_PSK : (ENC_TYPE_AUTO == auth) ? D_AUTO : "",
//               rss,
//               quality
//             );
//             #endif
//             delay(0);
//           } else {
//             AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_WIFI D_SKIPPING_LOW_QUALITY));
//           }

//         }
//         WSBufferAppend_P(response, PSTR("<br/>"));
//       }
//     } else {
//       WSBufferAppend_P(response, PSTR("<div><a href='/wi?scan='>" D_SCAN_FOR_WIFI_NETWORKS "</a></div><br/>"));
//     }

//     // As WIFI_HOSTNAME may contain %s-%04d it cannot be part of HTTP_FORM_WIFI where it will exception
//     WSBufferAppend_P(response, HTTP_FORM_WIFI, pCONT_set->Settings.sta_ssid[0], pCONT_set->Settings.sta_ssid[1], WIFI_HOSTNAME, WIFI_HOSTNAME, pCONT_set->Settings.hostname);
//     WSBufferAppend_P(response, HTTP_FORM_END);
//   }

//   if (WifiIsInManagerMode()) {
//     WSContentSpaceButton(request, BUTTON_RESTART);
// #ifndef FIRMWARE_MINIMAL
//     WSContentSpaceButton(request, BUTTON_RESET_CONFIGURATION);
// #endif  // FIRMWARE_MINIMAL
//   } else {
//     WSContentSpaceButton(request, BUTTON_CONFIGURATION);
//   }
//   WSContentStop(request);
}

void mWebServer::WifiSaveSettings(AsyncWebServerRequest *request)
{
  // char tmp[sizeof(pCONT_set->Settings.sta_pwd[0])];  // Max length is currently 65

  // WebGetArg(request,"h", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.hostname, (!strlen(tmp)) ? WIFI_HOSTNAME : tmp, sizeof(pCONT_set->Settings.hostname));
  // if (strstr(pCONT_set->Settings.hostname, "%") != nullptr) {
  //   strlcpy(pCONT_set->Settings.hostname, WIFI_HOSTNAME, sizeof(pCONT_set->Settings.hostname));
  // }
  // WebGetArg(request,"s1", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.sta_ssid[0], (!strlen(tmp)) ? STA_SSID1 : tmp, sizeof(pCONT_set->Settings.sta_ssid[0]));
  // WebGetArg(request,"s2", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.sta_ssid[1], (!strlen(tmp)) ? STA_SSID2 : tmp, sizeof(pCONT_set->Settings.sta_ssid[1]));
  // WebGetArg(request,"s3", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.sta_ssid[2], (!strlen(tmp)) ? STA_SSID3 : tmp, sizeof(pCONT_set->Settings.sta_ssid[2]));
  // WebGetArg(request,"p1", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.sta_pwd[0], (!strlen(tmp)) ? "" : (strlen(tmp) < 5) ? pCONT_set->Settings.sta_pwd[0] : tmp, sizeof(pCONT_set->Settings.sta_pwd[0]));
  // WebGetArg(request,"p2", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.sta_pwd[1], (!strlen(tmp)) ? "" : (strlen(tmp) < 5) ? pCONT_set->Settings.sta_pwd[1] : tmp, sizeof(pCONT_set->Settings.sta_pwd[1]));
  // AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_WIFI D_JSON_HOSTNAME " %s, " D_JSON_SSID "1 %s, " D_JSON_SSID "2 %s"), pCONT_set->Settings.hostname, pCONT_set->Settings.sta_ssid[0], pCONT_set->Settings.sta_ssid[1]);
}

/*-------------------------------------------------------------------------------------------*/

void mWebServer::HandleLoggingConfiguration(AsyncWebServerRequest *request)
{
  // if (!HttpCheckPriviledgedAccess()) { return; }

  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_CONFIGURE_LOGGING);

  // if (request->hasParam("save")) {
  //   LoggingSaveSettings(request);
  //   HandleConfiguration(request);
  //   return;
  // }

  // WSStartAppend_P(request, S_CONFIGURE_LOGGING);
  // WSContentSendStyle(request);
  // WSBufferAppend_P(response, HTTP_FORM_LOG1);
  // char stemp1[32];
  // char stemp2[32];
  // uint8_t dlevel[3] = { LOG_LEVEL_INFO, LOG_LEVEL_INFO, LOG_LEVEL_NONE };
  // for (uint8_t idx = 0; idx < 3; idx++) {
  //   uint8_t llevel = (0==idx)?pCONT_set->Settings.seriallog_level:(1==idx)?pCONT_set->Settings.weblog_level:pCONT_set->Settings.syslog_level;
  //   WSBufferAppend_P(response, PSTR("<p><b>%s</b> (%s)<br/><select id='l%d' name='l%d'>"),
  //     pCONT_sup->GetTextIndexed_P(stemp1, sizeof(stemp1), idx, kLoggingOptions),
  //     pCONT_sup->GetTextIndexed_P(stemp2, sizeof(stemp2), dlevel[idx], kLoggingLevels),
  //     idx, idx);
  //   for (uint8_t i = LOG_LEVEL_NONE; i < LOG_LEVEL_ALL; i++) {
  //     WSBufferAppend_P(response, PSTR("<option%s value='%d'>%d %s</option>"),
  //       (i == llevel) ? " selected" : "", i, i,
  //       pCONT_sup->GetTextIndexed_P(stemp1, sizeof(stemp1), i, kLoggingLevels));
  //   }
  //   WSBufferAppend_P(response, PSTR("</select></p>"));
  // }
  // WSBufferAppend_P(response, HTTP_FORM_LOG2, pCONT_set->Settings.syslog_host, pCONT_set->Settings.syslog_port, pCONT_set->Settings.tele_period);
  // WSBufferAppend_P(response, HTTP_FORM_END);
  // WSContentSpaceButton(request, BUTTON_CONFIGURATION);
  // WSContentStop(request);
}

void mWebServer::LoggingSaveSettings(AsyncWebServerRequest *request)
{
  // char tmp[sizeof(pCONT_set->Settings.syslog_host)];  // Max length is currently 33

  // WebGetArg(request,"l0", tmp, sizeof(tmp));
  // pCONT_set->Settings.seriallog_level = (!strlen(tmp)) ? SERIAL_LOG_LEVEL : atoi(tmp);
  // WebGetArg(request,"l1", tmp, sizeof(tmp));
  // pCONT_set->Settings.weblog_level = (!strlen(tmp)) ? WEB_LOG_LEVEL : atoi(tmp);
  // WebGetArg(request,"l2", tmp, sizeof(tmp));
  // pCONT_set->Settings.syslog_level = (!strlen(tmp)) ? SYS_LOG_LEVEL : atoi(tmp);
  // pCONT_set->syslog_level = pCONT_set->Settings.syslog_level;
  // pCONT_set->syslog_timer = 0;
  // WebGetArg(request,"lh", tmp, sizeof(tmp));
  // strlcpy(pCONT_set->Settings.syslog_host, (!strlen(tmp)) ? SYS_LOG_HOST : tmp, sizeof(pCONT_set->Settings.syslog_host));
  // WebGetArg(request,"lp", tmp, sizeof(tmp));
  // pCONT_set->Settings.syslog_port = (!strlen(tmp)) ? SYS_LOG_PORT : atoi(tmp);
  // WebGetArg(request,"lt", tmp, sizeof(tmp));
  // pCONT_set->Settings.tele_period = (!strlen(tmp)) ? TELE_PERIOD : atoi(tmp);
  // if ((pCONT_set->Settings.tele_period > 0) && (pCONT_set->Settings.tele_period < 10)) {
  //   pCONT_set->Settings.tele_period = 10;   // Do not allow periods < 10 seconds
  // }
  // AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_LOG D_JSON_SERIALLOG " %d, " D_JSON_WEBLOG " %d, " D_JSON_SYSLOG " %d, " D_JSON_LOGHOST " %s, " D_JSON_LOGPORT " %d, " D_JSON_TELEPERIOD " %d"),
  //   pCONT_set->Settings.seriallog_level, pCONT_set->Settings.weblog_level, pCONT_set->Settings.syslog_level, pCONT_set->Settings.syslog_host, pCONT_set->Settings.syslog_port, pCONT_set->Settings.tele_period);
}

/*-------------------------------------------------------------------------------------------*/

void mWebServer::HandleOtherConfiguration(AsyncWebServerRequest *request)
{
//   if (!HttpCheckPriviledgedAccess()) { return; }

//   AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_CONFIGURE_OTHER);

//   if (request->hasParam("save")) {
//     OtherSaveSettings(request);
//     WebRestart(request, 1);
//     return;
//   }

//   WSStartAppend_P(request, S_CONFIGURE_OTHER);
//   WSContentSendStyle(request);

//   pCONT_sup->TemplateJson(); 
//   char stemp[strlen(data_buffer.payload.ctr) +1];
//   strlcpy(stemp, data_buffer.payload.ctr, sizeof(stemp));  // Get JSON template
//   WSBufferAppend_P(response, HTTP_FORM_OTHER, stemp, (USER_MODULE == pCONT_set->Settings.module) ? " checked disabled" : "", (pCONT_set->Settings.flag_system.mqtt_enabled) ? " checked" : "");

//   uint8_t maxfn = (pCONT_set->devices_present > MAX_FRIENDLYNAMES) ? MAX_FRIENDLYNAMES : (!pCONT_set->devices_present) ? 1 : pCONT_set->devices_present;
//   if (MODULE_SONOFF_IFAN02 == pCONT_set->my_module_type) { maxfn = 1; }
//   for (uint8_t i = 0; i < maxfn; i++) {
//     snprintf_P(stemp, sizeof(stemp), PSTR("%d"), i +1);
//     WSBufferAppend_P(response, PSTR("<b>" D_FRIENDLY_NAME " %d</b> (" FRIENDLY_NAME "%s)<br/><input id='a%d' name='a%d' placeholder='" FRIENDLY_NAME "%s' value='%s'><p></p>"),
//       i +1,
//       (i) ? stemp : "",
//       i, i,
//       (i) ? stemp : "",
//       pCONT_set->Settings.system_name.friendly[i]);
//   }

// #ifdef USE_EMULATION
//   WSBufferAppend_P(response, PSTR("<p></p><fieldset><legend><b>&nbsp;" D_EMULATION "&nbsp;</b></legend><p>"));  // Keep close to Friendlynames so do not use <br/>
//   for (uint8_t i = 0; i < EMUL_MAX; i++) {
//     WSBufferAppend_P(response, PSTR("<input id='r%d' name='b2' type='radio' value='%d'%s><b>%s</b> %s<br/>"),  // Different id only used for labels
//       i, i,
//       (i == pCONT_set->Settings.flag_power.emulation) ? " checked" : "",
//       pCONT_sup->GetTextIndexed_P(stemp, sizeof(stemp), i, kEmulationOptions),
//       (i == EMUL_NONE) ? "" : (i == EMUL_WEMO) ? D_SINGLE_DEVICE : D_MULTI_DEVICE);
//   }
//   WSBufferAppend_P(response, PSTR("</p></fieldset>"));
// #endif  // USE_EMULATION

//   WSBufferAppend_P(response, HTTP_FORM_END);
//   WSContentSpaceButton(request, BUTTON_CONFIGURATION);
//   WSContentStop(request);
}

void mWebServer::OtherSaveSettings(AsyncWebServerRequest *request)
{
//   char tmp[128];
//   char webindex[5];
//   char friendlyname[sizeof(pCONT_set->Settings.system_name.friendly[0])];

//   WebGetArg(request,"wp", tmp, sizeof(tmp));
//   strlcpy(pCONT_set->Settings.web_password, (!strlen(tmp)) ? "" : (strchr(tmp,'*')) ? pCONT_set->Settings.web_password : tmp, sizeof(pCONT_set->Settings.web_password));
//   pCONT_set->Settings.flag_system.mqtt_enabled = request->hasParam("b1");
// #ifdef USE_EMULATION
//   WebGetArg(request,"b2", tmp, sizeof(tmp));
//   pCONT_set->Settings.flag_power.emulation = (!strlen(tmp)) ? 0 : atoi(tmp);
// #endif  // USE_EMULATION
//   snprintf_P(pCONT_set->log_data, sizeof(pCONT_set->log_data), PSTR(D_LOG_OTHER D_MQTT_ENABLE " %s, " D_JSON_EMULATION " %d, " D_JSON_FRIENDLYNAME), pCONT_sup->GetStateText(pCONT_set->Settings.flag_system.mqtt_enabled), pCONT_set->Settings.flag_power.emulation);
//   for (uint8_t i = 0; i < MAX_FRIENDLYNAMES; i++) {
//     snprintf_P(webindex, sizeof(webindex), PSTR("a%d"), i);
//     WebGetArg(request, webindex, tmp, sizeof(tmp));
//     snprintf_P(friendlyname, sizeof(friendlyname), PSTR(FRIENDLY_NAME"%d"), i +1);
//     strlcpy(pCONT_set->Settings.system_name.friendly[i], (!strlen(tmp)) ? (i) ? friendlyname : FRIENDLY_NAME : tmp, sizeof(pCONT_set->Settings.system_name.friendly[i]));
//     snprintf_P(pCONT_set->log_data, sizeof(pCONT_set->log_data), PSTR("%s%s %s"), pCONT_set->log_data, (i) ? "," : "", pCONT_set->Settings.system_name.friendly[i]);
//   }
//   //AddLogAddLog(LOG_LEVEL_INFO);
//   WebGetArg(request,"t1", tmp, sizeof(tmp));
//   if (strlen(tmp)) {  // {"NAME":"12345678901234","GPIO":[255,255,255,255,255,255,255,255,255,255,255,255,255],"FLAG":255,"BASE":255}
//     char svalue[128];
//     snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_TEMPLATE " %s"), tmp);
//     ExecuteWebCommand(svalue, SRC_WEBGUI);

//     if (request->hasParam("t2")) {
//       snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_MODULE " 0"));
//       ExecuteWebCommand(svalue, SRC_WEBGUI);
//     }

//   }
}

/*-------------------------------------------------------------------------------------------*/

void mWebServer::HandleBackupConfiguration(AsyncWebServerRequest *request)
{
//   if (!HttpCheckPriviledgedAccess()) { return; }

//   AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_HTTP D_BACKUP_CONFIGURATION));

//   if (!pCONT_set->SettingsBufferAlloc()) { return; }

//   // WiFiClient myClient = pWebServer->client();
//   pWebServer->setContentLength(sizeof(pCONT_set->Settings));

//   char attachment[100];
//   char friendlyname[sizeof(pCONT_set->Settings.system_name.friendly)];
//   snprintf_P(attachment, sizeof(attachment), PSTR("attachment; filename=Config_%s_%s.dmp"), pCONT_sup->NoAlNumToUnderscore(friendlyname, pCONT_set->Settings.system_name.friendly), pCONT_set->my_version);
//   //request->sendHeader(F("Content-Disposition"), attachment);// asyncedit

//   WSSend(200, CT_STREAM, "");

//   uint16_t cfg_crc = pCONT_set->Settings.cfg_crc;
//   pCONT_set->Settings.cfg_crc = pCONT_set->GetSettingsCrc();  // Calculate crc (again) as it might be wrong when savedata = 0 (#3918)

//   memcpy(pCONT_set->settings_buffer, &pCONT_set->Settings, sizeof(pCONT_set->Settings));
//   if (config_xor_on_set) {
//     for (uint16_t i = 2; i < sizeof(pCONT_set->Settings); i++) {
//       pCONT_set->settings_buffer[i] ^= (config_xor_on_set +i);
//     }
//   }

// #ifdef ARDUINO_ESP8266_RELEASE_2_3_0
//   size_t written = myClient.write((const char*)pCONT_set->settings_buffer, sizeof(pCONT_set->Settings));
//   if (written < sizeof(pCONT_set->Settings)) {  // https://github.com/esp8266/Arduino/issues/3218
//     myClient.write((const char*)pCONT_set->settings_buffer +written, sizeof(pCONT_set->Settings) -written);
//   }
// #else
//   myClient.write((const char*)pCONT_set->settings_buffer, sizeof(pCONT_set->Settings));
// #endif

//   pCONT_set->SettingsBufferFree();

//   pCONT_set->Settings.cfg_crc = cfg_crc;  // Restore crc in case savedata = 0 to make sure settings will be noted as changed
}

/*-------------------------------------------------------------------------------------------*/

void mWebServer::HandleResetConfiguration(AsyncWebServerRequest *request)
{
  // //if (!HttpCheckPriviledgedAccess(!WifiIsInManagerMode())) { return; }

  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_RESET_CONFIGURATION);

  // WSStartAppend_P(request, S_RESET_CONFIGURATION, !WifiIsInManagerMode());
  // WSContentSendStyle(request);
  // WSBufferAppend_P(response, PSTR("<div style='text-align:center;'>" D_CONFIGURATION_RESET "</div>"));
  // WSBufferAppend_P(response, HTTP_MSG_RSTRT);
  // WSContentSpaceButton(request, BUTTON_MAIN);
  // WSContentStop(request);

  // char command[CMDSZ];
  // snprintf_P(command, sizeof(command), PSTR(D_JSON_RESET " 1"));
  // ExecuteWebCommand(command, SRC_WEBGUI);
}

void mWebServer::HandleReset(AsyncWebServerRequest *request)
{
  // if (!HttpCheckPriviledgedAccess(!WifiIsInManagerMode())) { return; }

  AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_RESET_CONFIGURATION);

  pCONT_wif->EspRestart();

}

void mWebServer::HandleRestoreConfiguration(AsyncWebServerRequest *request)
{
  if (!HttpCheckPriviledgedAccess()) { return; }

  AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_RESTORE_CONFIGURATION);

  // WSStartAppend_P(request, S_RESTORE_CONFIGURATION);
  // WSContentSendStyle(request);
  // WSBufferAppend_P(response, HTTP_FORM_RST);
  // WSBufferAppend_P(response, HTTP_FORM_RST_UPG, D_RESTORE);
  // WSContentSpaceButton(request, BUTTON_CONFIGURATION);
  // WSContentStop(request);

  // upload_error = 0;
  // upload_file_type = UPL_SETTINGS;
}

/*-------------------------------------------------------------------------------------------*/

// #endif  // Not FIRMWARE_MINIMAL


void mWebServer::HandleConfiguration(AsyncWebServerRequest *request)
{
  // if (!HttpCheckPriviledgedAccess()) { return; }

  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_CONFIGURATION);

  // WSStartAppend_P(request, S_CONFIGURATION);
  // WSContentSendStyle(request);

  // WSContentButton(request, BUTTON_MODULE);
  // WSContentButton(request, BUTTON_WIFI);

  // pCONT->Tasker_Interface(FUNC_WEB_ADD_BUTTON);

  // WSContentButton(request, BUTTON_LOGGING);
  // WSContentButton(request, BUTTON_OTHER);
  // WSContentButton(request, BUTTON_TEMPLATE);

  // WSContentSpaceButton(request, BUTTON_RESET_CONFIGURATION);
  // WSContentButton(request, BUTTON_BACKUP);
  // WSContentButton(request, BUTTON_RESTORE);

  // WSContentSpaceButton(request, BUTTON_MAIN);
  // WSContentStop(request);
}

/*-------------------------------------------------------------------------------------------*/

void mWebServer::HandleTemplateConfiguration(AsyncWebServerRequest *request)
{
  // if (!HttpCheckPriviledgedAccess()) { return; }

  // if (pWebServer->hasParam("save")) {
  //   TemplateSaveSettings();
  //   WebRestart(1);
  //   return;
  // }

  // char stemp[20];                                           // Template number and Sensor name

  // if (pWebServer->hasParam("m")) {
  //  WSContentBegin(request, 200, CT_PLAIN);
  //   for (uint8_t i = 0; i < sizeof(kModuleNiceList); i++) {  // "}2'%d'>%s (%d)}3" - "}2'0'>Sonoff Basic (1)}3"
  //     uint8_t midx = pgm_read_byte(kModuleNiceList + i);
  //     WSBufferAppend_P(response, HTTP_MODULE_TEMPLATE_REPLACE, midx, pCONT_sup->AnyModuleName(midx).c_str(), midx +1);
  //   }
  //   WSContentEnd(request);
  //   return;
  // }

  // WebGetArg(request,"t", stemp, sizeof(stemp));                     // 0 - 69 Template number
  // if (strlen(stemp)) {
  //   uint8_t module = atoi(stemp);
  //   uint8_t module_save = pCONT_set->Settings.module;
  //   pCONT_set->Settings.module = module;
  //   myio cmodule;
  //   pCONT_sup->ModuleGpios(&cmodule);
  //   gpio_flag flag = pCONT_sup->ModuleFlag();
  //   pCONT_set->Settings.module = module_save;

  //  WSContentBegin(request, 200, CT_PLAIN);
  //   WSBufferAppend_P(response, PSTR("%s}1"), pCONT_sup->AnyModuleName(module).c_str());  // NAME: Generic
  //   for (uint8_t i = 0; i < sizeof(kGpioNiceList); i++) {   // GPIO: }2'0'>None (0)}3}2'17'>Button1 (17)}3...

  //     if (1 == i) {
  //       WSBufferAppend_P(response, HTTP_MODULE_TEMPLATE_REPLACE, 255, D_SENSOR_USER, 255);  // }2'255'>User (255)}3
  //     }

  //     uint8_t midx = pgm_read_byte(kGpioNiceList + i);
  //     WSBufferAppend_P(response, HTTP_MODULE_TEMPLATE_REPLACE, midx, pCONT_sup->GetTextIndexed_P(stemp, sizeof(stemp), midx, kSensorNames), midx);
  //   }

  //   WSBufferAppend_P(response, PSTR("}1"));                                   // Field separator
  //   for (uint8_t i = 0; i < sizeof(cmodule); i++) {         // 17,148,29,149,7,255,255,255,138,255,139,255,255
  //     if ((i < 6) || ((i > 8) && (i != 11))) {              // Ignore flash pins GPIO06, 7, 8 and 11
  //       WSBufferAppend_P(response, PSTR("%s%d"), (i>0)?",":"", cmodule.io[i]);
  //     }
  //   }
  //   WSBufferAppend_P(response, PSTR("}1%d}1%d"), flag, pCONT_set->Settings.user_template_base);  // FLAG: 1  BASE: 17
  //   WSContentEnd(request);
  //   return;
  // }

  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_CONFIGURE_TEMPLATE);

  // WSStartAppend_P(S_CONFIGURE_TEMPLATE);
  // WSBufferAppend_P(response, HTTP_SCRIPT_MODULE_TEMPLATE);
  // WSBufferAppend_P(response, HTTP_SCRIPT_TEMPLATE);
  // WSContentSendStyle(request);
  // WSBufferAppend_P(response, HTTP_FORM_TEMPLATE);
  // WSBufferAppend_P(response, HTTP_TABLE100);
  // WSBufferAppend_P(response, PSTR("<tr><td><b>" D_TEMPLATE_NAME "</b></td><td style='width:200px'><input id='s1' name='s1' placeholder='" D_TEMPLATE_NAME "'></td></tr>"
  //                      "<tr><td><b>" D_BASE_TYPE "</b></td><td><select id='g99' name='g99' onchange='st(this.value)'></select></td></tr>"
  //                      "</table>"
  //                      "<hr/>"));
  // WSBufferAppend_P(response, HTTP_TABLE100);
  // for (uint8_t i = 0; i < 17; i++) {
  //   if ((i < 6) || ((i > 8) && (i != 11))) {                // Ignore flash pins GPIO06, 7, 8 and 11
  //     WSBufferAppend_P(response, PSTR("<tr><td><b><font color='#%06x'>" D_GPIO "%d</font></b></td><td%s><select id='g%d' name='g%d'></select></td></tr>"),
  //       ((9==i)||(10==i)) ? WebColor(pCONT_set->COL_TEXT_WARNING) : WebColor(pCONT_set->COL_TEXT), i, (0==i) ? " style='width:200px'" : "", i, i);
  //   }
  // }
  // WSBufferAppend_P(response, PSTR("</table>"));
  // WSBufferAppend_P(response, HTTP_FORM_TEMPLATE_FLAG);
  // WSBufferAppend_P(response, HTTP_FORM_END);
  // WSContentSpaceButton(BUTTON_CONFIGURATION);
  // WSContentStop();
}

void mWebServer::TemplateSaveSettings(void)
{
  // char tmp[sizeof(pCONT_set->Settings.user_template.name)];            // WebGetArg NAME and GPIO/BASE/FLAG byte value
  // char webindex[5];                                         // WebGetArg name
  // char svalue[128];                                         // Template command string

  // WebGetArg(request,"s1", tmp, sizeof(tmp));                        // NAME
  // snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_TEMPLATE " {\"" D_JSON_NAME "\":\"%s\",\"" D_JSON_GPIO "\":["), tmp);

  // uint8_t j = 0;
  // for (uint8_t i = 0; i < sizeof(pCONT_set->Settings.user_template2.hardware.gp); i++) {
  //   if (6 == i) { j = 9; }
  //   if (8 == i) { j = 12; }
  //   snprintf_P(webindex, sizeof(webindex), PSTR("g%d"), j);
  //   WebGetArg(webindex, tmp, sizeof(tmp));                  // GPIO
  //   uint8_t gpio = atoi(tmp);
  //   snprintf_P(svalue, sizeof(svalue), PSTR("%s%s%d"), svalue, (i>0)?",":"", gpio);
  //   j++;
  // }

  // uint8_t flag = 0;
  // for (uint8_t i = 0; i < GPIO_FLAG_USED; i++) {
  //   snprintf_P(webindex, sizeof(webindex), PSTR("c%d"), i);
  //   uint8_t state = pWebServer->hasParam(webindex) << i;       // FLAG
  //   flag += state;
  // }
  // WebGetArg(request,"g99", tmp, sizeof(tmp));                       // BASE
  // uint8_t base = atoi(tmp) +1;

  // snprintf_P(svalue, sizeof(svalue), PSTR("%s],\"" D_JSON_FLAG "\":%d,\"" D_JSON_BASE "\":%d}"), svalue, flag, base);
  // ExecuteWebCommand(svalue, SRC_WEBGUI);
}

/*-------------------------------------------------------------------------------------------*/

void mWebServer::HandleModuleConfiguration(AsyncWebServerRequest *request)
{
  // if (!HttpCheckPriviledgedAccess()) { return; }

  // if (pWebServer->hasParam("save")) {
  //   ModuleSaveSettings();
  //   //WebRestart(1);
  //   return;
  // }

  // char stemp[20];  // Sensor name
  // uint8_t midx;
  // myio cmodule;
  // pCONT_sup->ModuleGpios(&cmodule);

  // if (pWebServer->hasParam("m")) {
  //  WSContentBegin(request, 200, CT_PLAIN);
  //   uint8_t vidx = 0;
  //   for (uint8_t i = 0; i <= sizeof(kModuleNiceList); i++) {  // "}2'%d'>%s (%d)}3" - "}2'255'>UserTemplate (0)}3" - "}2'0'>Sonoff Basic (1)}3"
  //     if (0 == i) {
  //       midx = USER_MODULE;
  //       vidx = 0;
  //     } else {
  //       midx = pgm_read_byte(kModuleNiceList + (i-1)); // -1 to offset USER_MODULE
  //       vidx = midx +1;
  //     }
  //     //AddLog_P(LOG_LEVEL_TEST, PSTR(D_LOG_HTTP "hasParam(\"m\"),i=%d,midx=%d,vidx=%d"),i,midx,vidx);
  //     WSBufferAppend_P(response, HTTP_MODULE_TEMPLATE_REPLACE, 
  //       midx, 
  //       pCONT_sup->AnyModuleName(midx).c_str(), 
  //       vidx
  //     );
  //   }
  //   WSContentEnd(request);

  //   AddLog_P(LOG_LEVEL_TEST, PSTR(D_LOG_HTTP "sizeof(kModuleNiceList)=%d"),sizeof(kModuleNiceList));
    
  //   return;
  // }

  // if (pWebServer->hasParam("g")) {
  //  WSContentBegin(request, 200, CT_PLAIN);
  //   for (uint8_t j = 0; j < sizeof(kGpioNiceList); j++) {
  //     midx = pgm_read_byte(kGpioNiceList + j);
  //     if (!pCONT_sup->GetUsedInModule(midx, cmodule.io)) {
  //       WSBufferAppend_P(response, HTTP_MODULE_TEMPLATE_REPLACE, 
  //                       midx, 
  //                       pCONT_sup->GetTextIndexed_P(stemp, sizeof(stemp), midx, kSensorNames), 
  //                       midx
  //                     );

  //     // AddLog_P(LOG_LEVEL_TEST, PSTR(D_LOG_HTTP "GetTextIndexed_P=%s,midx=%d,j=%d"),
  //     // pCONT_sup->GetTextIndexed_P(stemp, sizeof(stemp), midx, kSensorNames),midx,j);
        
  //     }
  //   }
  //   WSContentEnd(request);
  //   return;
  // }

  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_CONFIGURE_MODULE);

  // AddLog_P(LOG_LEVEL_TEST, PSTR(D_LOG_HTTP "pCONT_set->Settings.module=%d,sizeof(cmodule)=%d"),pCONT_set->Settings.module,sizeof(cmodule));
  

  // WSStartAppend_P(S_CONFIGURE_MODULE);
  // WSBufferAppend_P(response, HTTP_SCRIPT_MODULE_TEMPLATE);
  // WSBufferAppend_P(response, HTTP_SCRIPT_MODULE1, pCONT_set->Settings.module);
  // for (uint8_t i = 0; i < sizeof(cmodule); i++) {
  //   if (pCONT_sup->ValidGPIO(i, cmodule.io[i])) {
  //     WSBufferAppend_P(response, PSTR("sk(%d,%d);"), pCONT_set->my_module.io[i], i);  // g0 - g16
  //   }
  // }
  // WSBufferAppend_P(response, HTTP_SCRIPT_MODULE2);
  // WSContentSendStyle(request);
  
  // // AddLog_P(LOG_LEVEL_TEST, PSTR(D_LOG_HTTP "AnyModuleName=%s,%d,%d"),pCONT_sup->AnyModuleName(MODULE).c_str(),MODULE,sizeof(cmodule));

  // uint8_t show_pin_names = false;
  // if((pCONT_set->Settings.module==MODULE_WEMOS)||(pCONT_set->Settings.module==MODULE_NODEMCU)){
  //   show_pin_names = true;
  // }

  // WSBufferAppend_P(response, HTTP_FORM_MODULE, pCONT_sup->AnyModuleName(pCONT_set->Settings.module).c_str());
  // for (uint8_t i = 0; i < sizeof(cmodule); i++) {
  //   if (pCONT_sup->ValidGPIO(i, cmodule.io[i])) {
  //     snprintf_P(stemp, 3, PINS_WEMOS +i*2);
  //     char sesp8285[40];
  //     snprintf_P(sesp8285, sizeof(sesp8285), PSTR("<font color='#%06x'>ESP8285</font>"), WebColor(pCONT_set->COL_TEXT_WARNING));
  //     WSBufferAppend_P(response, PSTR("<tr><td style='width:190px'>%s <b>" D_GPIO "%d</b> %s</td><td style='width:176px'><select id='g%d' name='g%d'></select></td></tr>"),
  //       show_pin_names?stemp:"", 
  //       i,
  //       (0==i)? D_SENSOR_BUTTON "1":
  //       (1==i)? D_SERIAL_OUT :
  //       (3==i)? D_SERIAL_IN :
  //       ((9==i)||(10==i))? sesp8285 :
  //       (12==i)? D_SENSOR_RELAY "1":
  //       (13==i)? D_SENSOR_LED "1i":
  //       (14==i)? D_SENSOR :"",
  //       i,
  //       i
  //     );
  //   }
  // }
  // WSBufferAppend_P(response, PSTR("</table>"));
  // WSBufferAppend_P(response, HTTP_FORM_END);
  // WSContentSpaceButton(BUTTON_CONFIGURATION);
  // WSContentStop();
}



void mWebServer::ModuleSaveSettings(AsyncWebServerRequest *request)
{
  // char tmp[8];         // WebGetArg numbers only
  // char webindex[5];    // WebGetArg name

  // WebGetArg(request,"g99", tmp, sizeof(tmp));
  // uint8_t new_module = (!strlen(tmp)) ? MODULE : atoi(tmp);
  // pCONT_set->Settings.last_module = pCONT_set->Settings.module;
  // pCONT_set->Settings.module = new_module;
  // pCONT_sup->SetModuleType();
  // myio cmodule;
  // pCONT_sup->ModuleGpios(&cmodule);
  // String gpios = "";
  // for (uint8_t i = 0; i < sizeof(cmodule); i++) {
  //   if (pCONT_set->Settings.last_module != new_module) {
  //     pCONT_set->Settings.module_pins.io[i] = GPIO_NONE;
  //   } else {
  //     if (pCONT_sup->ValidGPIO(i, cmodule.io[i])) {
  //       snprintf_P(webindex, sizeof(webindex), PSTR("g%d"), i);
  //       WebGetArg(webindex, tmp, sizeof(tmp));
  //       pCONT_set->Settings.module_pins.io[i] = (!strlen(tmp)) ? 0 : atoi(tmp);
  //       gpios += F(", " D_GPIO ); gpios += String(i); gpios += F(" "); gpios += String(pCONT_set->Settings.module_pins.io[i]);
  //     }
  //   }
  // }
  // AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_MODULE "%s " D_JSON_MODULE "%s"), pCONT_sup->ModuleName().c_str(), gpios.c_str());
}


/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * System Settings
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/


void mWebServer::HandleSystemSettings(AsyncWebServerRequest *request)
{
  if (!HttpCheckPriviledgedAccess()) { return; }

  if (request->hasParam("rst")) {
    AddLog_P(LOG_LEVEL_TEST,PSTR("hasParam rst"));
    WebRestart(request, 0);
    return;
  }
  
  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_SYSTEM_SETTINGS);

  // memset(&data_buffer,0,sizeof(data_buffer));
  // char *buf = data_buffer.payload.ctr;
  // char **buffer = &buf;
  // buffer_writer_len = 0;

  // AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP D_CONSOLE));

  // WSStartAppend_P2(buffer, S_SYSTEM_SETTINGS);

  // //? basic style
  // WSBufferAppend_P2(buffer, "<style>");
  // pCONT_web->WSBufferAppend_P2(buffer, PM_HTTP_HEAD_STYLE1_MINIMAL,
  //   pCONT_web->WebColor(pCONT_set->COL_FORM), 
  //   pCONT_web->WebColor(pCONT_set->COL_BACKGROUND),
  //   pCONT_web->WebColor(pCONT_set->COL_BUTTON),  
  //   pCONT_web->WebColor(pCONT_set->COL_BUTTON_TEXT)
  // );
  // WSBufferAppend_P2(buffer, "</style>");

  // WSBufferAppend_P2(buffer, "</head>" "<body>");
  // WSBufferAppend_P2(buffer, PSTR("<div class='tb_con'></div>"));
  // WSBufferAppend_P2(buffer, HTTP_STYLE_TITLE_CONTAINER_HEAD, 
  //   WebColor(pCONT_set->COL_TEXT),
  //   WebColor(pCONT_set->COL_TEXT_MODULE_TITLE), 
  //   //PROJECT_NAME_CTR, 
  //   pCONT_set->Settings.system_name.friendly
  // );
  //   // pCONT->Tasker_Interface(FUNC_WEB_ADD_BUTTON_SYSTEM_SETTINGS);

  //   WSButtonAppend2(buffer, BUTTON_CONFIGURATION);
  //   WSButtonAppend2(buffer, BUTTON_INFORMATION);
  //   WSButtonAppend2(buffer, BUTTON_FIRMWARE_UPGRADE);
  //   WSButtonAppend2(buffer, BUTTON_RESTART);

  // WSSpaceButtonAppend2(buffer, BUTTON_MAIN);
  
  // // End of body
  // WSBufferAppend_SystemVersionBar(buffer);

  // WSBufferAppend_P2(buffer, PSTR("<link rel='stylesheet' href='" WEB_HANDLER_STYLE_WEB_BASIC_ROOT "'>"));

  // WSBufferAppend_P2(buffer, "</body></html>");
  
  // // #ifdef DEBUG_WEBSERVER_MEMORY
  // //   FreeMem_Usage_Before(&freemem_usage_html_console);
  // // #endif
  // WebSend_Response(request,200,CONTENT_TYPE_TEXT_HTML_ID,data_buffer.payload.ctr);
  // #ifdef DEBUG_WEBSERVER_MEMORY
  //   FreeMem_Usage_After(&freemem_usage_html_console);
  // #endif 

}


/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Restart and Update
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/



void mWebServer::WebRestart(AsyncWebServerRequest *request, uint8_t type)
{
  // type 0 = restart
  // type 1 = restart after config change
  // type 2 = restart after config change with possible ip address change too
  AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_RESTART);

  // bool reset_only = (HTTP_MANAGER_RESET_ONLY == webserver_state);

  // WSStartAppend_P(request, (type) ? S_SAVE_CONFIGURATION : S_RESTART, !reset_only);
  // WSBufferAppend_P(response, HTTP_SCRIPT_RELOAD);
  // WSContentSendStyle(request);
  // if (type) {
  //   WSBufferAppend_P(response, PSTR("<div style='text-align:center;'><b>" D_CONFIGURATION_SAVED "</b><br/>"));
  //   if (2 == type) {
  //     WSBufferAppend_P(response, PSTR("<br/>" D_TRYING_TO_CONNECT "<br/>"));
  //   }
  //   WSBufferAppend_P(response, PSTR("</div>"));
  // }
  // WSBufferAppend_P(response, HTTP_MSG_RSTRT);
  // if (HTTP_MANAGER == webserver_state || reset_only) {
  //   webserver_state = HTTP_ADMIN;
  // } else {
  //   WSContentSpaceButton(request, BUTTON_MAIN);
  // }
  // WSContentStop(request);

  // ShowWebSource(SRC_WEBGUI);
  pCONT_set->restart_flag = 2;
}


void mWebServer::HandleWifiLogin(AsyncWebServerRequest *request)
{
//   WSStartAppend_P(request, S_CONFIGURE_WIFI, false);  // false means show page no matter if the client has or has not credentials
//   WSContentSendStyle(request);
//   WSBufferAppend_P(response, HTTP_FORM_LOGIN);

//   if (HTTP_MANAGER_RESET_ONLY == webserver_state) {
//     WSContentSpaceButton(request, BUTTON_RESTART);
// #ifndef FIRMWARE_MINIMAL
//     WSContentSpaceButton(request, BUTTON_RESET_CONFIGURATION);
// #endif  // FIRMWARE_MINIMAL
//   }

//   WSContentStop(request);
}


void mWebServer::HandleUpgradeFirmware(AsyncWebServerRequest *request)
{
  // if (!HttpCheckPriviledgedAccess()) { return; }

  // AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, S_FIRMWARE_UPGRADE);

  // WSStartAppend_P(request, S_FIRMWARE_UPGRADE);
  // WSContentSendStyle(request);
  // WSBufferAppend_P(response, HTTP_FORM_UPG, pCONT_set->Settings.ota_url);
  // WSBufferAppend_P(response, HTTP_FORM_RST_UPG, D_UPGRADE);
  // WSContentSpaceButton(request, BUTTON_MAIN);
  // WSContentStop(request);

  // upload_error = 0;
  // upload_file_type = UPL_TASMOTA;
}

void mWebServer::HandleUpgradeFirmwareStart(AsyncWebServerRequest *request)
{
  // //if (!HttpCheckPriviledgedAccess()) { return; }

  // char command[sizeof(pCONT_set->Settings.ota_url) + 10];  // OtaUrl

  // AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_HTTP D_UPGRADE_STARTED));
  // pCONT_wif->WifiConfigCounter();

  // char otaurl[sizeof(pCONT_set->Settings.ota_url)];
  // WebGetArg(request,"o", otaurl, sizeof(otaurl));
  // if (strlen(otaurl)) {
  //   snprintf_P(command, sizeof(command), PSTR(D_JSON_OTAURL " %s"), otaurl);
  //   ExecuteWebCommand(command, SRC_WEBGUI);
  // }

  // WSStartAppend_P(request, PM_INFORMATION);
  // WSBufferAppend_P(response, HTTP_SCRIPT_RELOAD_OTA);
  // WSContentSendStyle(request);
  // WSBufferAppend_P(response, PSTR("<div style='text-align:center;'><b>" D_UPGRADE_STARTED " ...</b></div>"));
  // WSBufferAppend_P(response, HTTP_MSG_RSTRT);
  // WSContentSpaceButton(request, BUTTON_MAIN);
  // WSContentStop(request);

  // snprintf_P(command, sizeof(command), PSTR(D_JSON_UPGRADE " 1"));
  // ExecuteWebCommand(command, SRC_WEBGUI);
}

void mWebServer::HandleUploadDone(AsyncWebServerRequest *request)
{
//   if (!HttpCheckPriviledgedAccess()) { return; }

//   AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_HTTP D_UPLOAD_DONE));

//   char error[100];

//   pCONT_wif->WifiConfigCounter();
//   pCONT_set->restart_flag = 0;
//   //MqttRetryCounter(0);

//   WSStartAppend_P(request, PM_INFORMATION);
//   if (!upload_error) {
//     WSBufferAppend_P(response, HTTP_SCRIPT_RELOAD_OTA);  // Refesh main web ui after OTA upgrade
//   }
//   WSContentSendStyle(request);
//   WSBufferAppend_P(response, PSTR("<div style='text-align:center;'><b>" D_UPLOAD " <font color='#"));
//   if (upload_error) {
// //    WSBufferAppend_P(response, PSTR(COLOR_TEXT_WARNING "'>" D_FAILED "</font></b><br/><br/>"));
//     WSBufferAppend_P(response, PSTR("%06x'>" D_FAILED "</font></b><br/><br/>"), WebColor(pCONT_set->COL_TEXT_WARNING));
// #ifdef USE_RF_FLASH
//     if (upload_error < 14) {
// #else
//     if (upload_error < 10) {
// #endif
//       pCONT_sup->GetTextIndexed_P(error, sizeof(error), upload_error -1, kUploadErrors);
//     } else {
//       snprintf_P(error, sizeof(error), PSTR(D_UPLOAD_ERROR_CODE " %d"), upload_error);
//     }
//     WSBufferAppend_P(response, error);
//     AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_UPLOAD ": %s"), error);
//     pCONT_set->stop_flash_rotate = pCONT_set->Settings.flag_system.stop_flash_rotate;
//   } else {
//     WSBufferAppend_P(response, PSTR("%06x'>" D_SUCCESSFUL "</font></b><br/>"), WebColor(pCONT_set->COL_TEXT_SUCCESS));
//     WSBufferAppend_P(response, HTTP_MSG_RSTRT);
//     ShowWebSource(SRC_WEBGUI);
//     pCONT_set->restart_flag = 2;  // Always restart to re-enable disabled features during update
//   }
//   //SettingsBufferFree();
//   WSBufferAppend_P(response, PSTR("</div><br/>"));
//   WSContentSpaceButton(request, BUTTON_MAIN);
//   WSContentStop(request);
}

void mWebServer::HandleUploadLoop(AsyncWebServerRequest *request)
{
  
//   //AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "HandleUploadLoop1"));
//   // Based on ESP8266HTTPUpdateServer.cpp uses ESP8266WebServer Parsing.cpp and Cores Updater.cpp (Update)
//   bool _serialoutput = (LOG_LEVEL_DEBUG <= pCONT_set->seriallog_level);

//   // if (HTTP_USER == webserver_state) { 
//   //   AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "HTTP_USER == webserver_state"));
//   //   return; 
//   // }
//   if (upload_error) {
//     AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "upload_error"));
//     #ifdef ESP8266
//       if (UPL_TASMOTA == upload_file_type) { Update.end(); }
//     #endif
//     return;
//   }

//   //AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "HandleUploadLoop2"));

//   HTTPUpload& upload = pWebServer->upload();

//   //AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "upload.status=%d"),upload.status);

//   if (UPLOAD_FILE_START == upload.status) { 

//     pCONT_set->restart_flag = 60;
//     if (0 == upload.filename.c_str()[0]) {
//       upload_error = 1;  // No file selected
//       return;
//     }
//     //SettingsSave(1);  // Free flash for upload
//     AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_UPLOAD D_FILE " %s ..."), upload.filename.c_str());
//     if (UPL_SETTINGS == upload_file_type) {
//       if (!pCONT_set->SettingsBufferAlloc()) {
//         upload_error = 2;  // Not enough space
        
//   AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "Not enough space"));
//         return;
//       }
//     } else {
//      // MqttRetryCounter(60);
// #ifdef USE_EMULATION
//       //UdpDisconnect();
// #endif  // USE_EMULATION

//       //if (pCONT_set->Settings.flag_system.mqtt_enabled) MqttDisconnect();
//       uint32_t maxSketchSpace = (ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000;
      
//   AddSerialLog_mP2(LOG_LEVEL_INFO, PSTR(D_LOG_HTTP "maxSketchSpace=%d"),maxSketchSpace);

//           #ifdef ESP8266
//       if (!Update.begin(maxSketchSpace)) {         //start with max available size

//        if (_serialoutput) Update.printError(Serial);
//        if (Update.getError() == UPDATE_ERROR_BOOTSTRAP) {
//          if (_serialoutput) Serial.println("Device still in UART update mode, perform powercycle");
//        }

//         upload_error = 2;  // Not enough space
//         return;
//       }
//       #endif
//     }
//     upload_progress_dot_count = 0;
//   } else if (!upload_error && (UPLOAD_FILE_WRITE == upload.status)) {
//     if (0 == upload.totalSize) {
//       if (UPL_SETTINGS == upload_file_type) {
//         config_block_count = 0;
//       }
//       else {
// // #ifdef USE_RF_FLASH
// //         if ((SONOFF_BRIDGE == pCONT_set->my_module_type) && (upload.buf[0] == ':')) {  // Check if this is a RF bridge FW file
// //           Update.end();              // End esp8266 update session
// //           upload_file_type = UPL_EFM8BB1;
// //
// //           upload_error = SnfBrUpdateInit();
// //           if (upload_error != 0) { return; }
// //         } else
// // #endif  // USE_RF_FLASH
//         {
//           if (upload.buf[0] != 0xE9) {
//             upload_error = 3;  // Magic byte is not 0xE9
//             return;
//           }
//           uint32_t bin_flash_size = ESP.magicFlashChipSize((upload.buf[3] & 0xf0) >> 4);
//           #ifdef ESP8266
//           if(bin_flash_size > ESP.getFlashChipRealSize()) {
//             upload_error = 4;  // Program flash size is larger than real flash size
//             return;
//           }
//           #endif
// //          upload.buf[2] = 3;  // Force DOUT - ESP8285
//         }
//       }
//     }
//     if (UPL_SETTINGS == upload_file_type) {
//       if (!upload_error) {
//         if (upload.currentSize > (sizeof(pCONT_set->Settings) - (config_block_count * HTTP_UPLOAD_BUFLEN))) {
//           upload_error = 9;  // File too large
//           return;
//         }
//         memcpy(pCONT_set->settings_buffer + (config_block_count * HTTP_UPLOAD_BUFLEN), upload.buf, upload.currentSize);
//         config_block_count++;
//       }
//     }
// // #ifdef USE_RF_FLASH
// //     else if (UPL_EFM8BB1 == upload_file_type) {
// //       if (efm8bb1_update != nullptr) {    // We have carry over data since last write, i. e. a start but not an end
// //         ssize_t result = rf_glue_remnant_with_new_data_and_write(efm8bb1_update, upload.buf, upload.currentSize);
// //         free(efm8bb1_update);
// //         efm8bb1_update = nullptr;
// //         if (result != 0) {
// //           upload_error = abs(result);  // 2 = Not enough space, 8 = File invalid
// //           return;
// //         }
// //       }
// //       ssize_t result = rf_search_and_write(upload.buf, upload.currentSize);
// //       if (result < 0) {
// //         upload_error = abs(result);
// //         return;
// //       } else if (result > 0) {
// //         if ((size_t)result > upload.currentSize) {
// //           // Offset is larger than the buffer supplied, this should not happen
// //           upload_error = 9;  // File too large - Failed to decode RF firmware
// //           return;
// //         }
// //         // A remnant has been detected, allocate data for it plus a null termination byte
// //         size_t remnant_sz = upload.currentSize - result;
// //         efm8bb1_update = (uint8_t *) malloc(remnant_sz + 1);
// //         if (efm8bb1_update == nullptr) {
// //           upload_error = 2;  // Not enough space - Unable to allocate memory to store new RF firmware
// //           return;
// //         }
// //         memcpy(efm8bb1_update, upload.buf + result, remnant_sz);
// //         // Add null termination at the end of of remnant buffer
// //         efm8bb1_update[remnant_sz] = '\0';
// //       }
// //     }
// // #endif  // USE_RF_FLASH
//     else {  // firmware
    
//           #ifdef ESP8266
//       if (!upload_error && (Update.write(upload.buf, upload.currentSize) != upload.currentSize)) {
//         upload_error = 5;  // Upload buffer miscompare
//         return;
//       }
//       #endif
//       if (_serialoutput) {
//         Serial.printf(".");
//         upload_progress_dot_count++;
//         if (!(upload_progress_dot_count % 80)) { Serial.println(); }
//       }
//     }
//   } else if(!upload_error && (UPLOAD_FILE_END == upload.status)) {
//     if (_serialoutput && (upload_progress_dot_count % 80)) {
//       Serial.println();
//     }
//     if (UPL_SETTINGS == upload_file_type) {
//       if (config_xor_on_set) {
//         for (uint16_t i = 2; i < sizeof(pCONT_set->Settings); i++) {
//           pCONT_set->settings_buffer[i] ^= (config_xor_on_set +i);
//         }
//       }
//       bool valid_settings = false;
//       unsigned long buffer_version = pCONT_set->settings_buffer[11] << 24 | pCONT_set->settings_buffer[10] << 16 | pCONT_set->settings_buffer[9] << 8 | pCONT_set->settings_buffer[8];
//       if (buffer_version > 0x06000000) {
//         uint16_t buffer_size = pCONT_set->settings_buffer[3] << 8 | pCONT_set->settings_buffer[2];
//         uint16_t buffer_crc = pCONT_set->settings_buffer[15] << 8 | pCONT_set->settings_buffer[14];
//         uint16_t crc = 0;
//         for (uint16_t i = 0; i < buffer_size; i++) {
//           if ((i < 14) || (i > 15)) { crc += pCONT_set->settings_buffer[i]*(i+1); }  // Skip crc
//         }
//         valid_settings = (buffer_crc == crc);
//       } else {
//         valid_settings = (pCONT_set->settings_buffer[0] == CONFIG_FILE_SIGN);
//       }
//       if (valid_settings) {
//         //SystemSettings_DefaultBody();
//         memcpy((char*)&pCONT_set->Settings +16, pCONT_set->settings_buffer +16, sizeof(pCONT_set->Settings) -16);
//         pCONT_set->Settings.version = buffer_version;  // Restore version and auto upgrade after restart
//         //SettingsBufferFree();
//       } else {
//         upload_error = 8;  // File invalid
//         return;
//       }
//     }
// #ifdef USE_RF_FLASH
//     else if (UPL_EFM8BB1 == upload_file_type) {
//       // RF FW flash done
//       upload_file_type = UPL_TASMOTA;
//     }
// #endif  // USE_RF_FLASH
//     else {
//           #ifdef ESP8266
//       if (!Update.end(true)) { // true to set the size to the current progress
//         if (_serialoutput) { Update.printError(Serial); }
//         upload_error = 6;  // Upload failed. Enable logging 3
//         return;
//       }
//       #endif
//     }
//     if (!upload_error) {
//       AddLog_P(LOG_LEVEL_INFO, PSTR(D_LOG_UPLOAD D_SUCCESSFUL " %u bytes. " D_RESTARTING), upload.totalSize);
//     }
//   } else if (UPLOAD_FILE_ABORTED == upload.status) {
//     pCONT_set->restart_flag = 0;
//     //MqttRetryCounter(0);
//     upload_error = 7;  // Upload aborted
//     #ifdef ESP8266
//       if (UPL_TASMOTA == upload_file_type) { Update.end(); }
//     #endif
//   }
//   delay(0);
}



/*************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
   * Handle Not Found
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
  ************************************************************************************************************************************************************************************
*/

void mWebServer::HandleNotFound(AsyncWebServerRequest *request)
{
  AddLog_P(LOG_LEVEL_DEBUG, PSTR(D_LOG_HTTP "Not found (%s)"), request->url().c_str());

  // if (CaptivePortal(request)) { return; }  // If captive portal redirect instead of displaying the error page.

  // AsyncResponseStream *response = request->beginResponseStream(404,"html/text");//, root.measureJson() + 1);
  
  // // WSBufferAppend_P(response, PSTR(D_FILE_NOT_FOUND "\n\nURI: %s\nMethod: %s\nArguments: %d\n"), 
  // //   request->uri().c_str(), (request->method() == HTTP_GET) ? "GET" : "POST", request->args());

  // for (uint8_t i = 0; i < request->args(); i++) {
  //   WSBufferAppend_P(response, PSTR(" %s: %s\n"), request->argName(i).c_str(), request->arg(i).c_str());
  // }
  char message[45];
    sprintf_P(message,PSTR("Missing"));// too low - %d needed (%d free)"),memory_needed,ESP.getFreeHeap());
    request->send(404, CONTENT_TYPE_TEXT_HTML_ID, message);

  // No subscriber handled the request, return a 404 with implicit "Connection: close"
  // request->send(404);

}





/*****************************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ********HELPERS FUNCTION ONLY BELOW********************************************************************************************************************************************************************************************************
 ****************************************************************************************************************************************************************************************************************
 ****************************************************************************************************************************************************************************************************************
 ***************************************************************************************************************************************************************************************************************
 *************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 *****************************************************************************************************************************************************************************************************************
 ***************************************************************************************************************************************************************************************************************/


void mWebServer::WebAppend_Start_Head_P(const char* title)
{
  WebAppend_Start_Head_P(title, true);
}
void mWebServer::WebAppend_Start_Head_P(const char* title, bool auth)
{
  // if (auth && (pCONT_set->Settings.web_password[0] != 0) && !pWebServer->authenticate(WEB_USERNAME, pCONT_set->Settings.web_password)) {
  //  return pWebServer->requestAuthentication();
  // }

  if (title != nullptr) {
    char ctitle[strlen_P(title) +1];
    strcpy_P(ctitle, title);                       // Get title from flash to RAM
    
    #ifdef ESP8266
      BufferWriterI->Append_P(PM_HTTP_HEAD3, pCONT_set->Settings.system_name.friendly, ctitle);
    #else
      BufferWriterI->Append_P(HTTP_HEAD2, pCONT_set->Settings.system_name.friendly, ctitle);
    #endif

  }
}

void mWebServer::WebAppend_Button_Spaced(uint8_t title_index)
{
  BufferWriterI->Append_P(PSTR("<div></div>"));            // 5px padding
  WebAppend_Button(title_index);
}
void mWebServer::WebAppend_Button(uint8_t title_index)
{
  char action[20];
  char title[32];
  if (title_index <= BUTTON_RESET_CONFIGURATION) {
    char confirm[64];
    BufferWriterI->Append_P(PSTR("<p><form action='%s' method='get' onsubmit='return confirm(\"%s\");'><button name='%s' class='buttonh bred'>%s</button></form></p>"),
      pCONT_sup->GetTextIndexed_P(action, sizeof(action), title_index, kButtonAction),
      pCONT_sup->GetTextIndexed_P(confirm, sizeof(confirm), title_index, kButtonConfirm),
      (!title_index) ? "rst" : "non",
      pCONT_sup->GetTextIndexed_P(title, sizeof(title), title_index, kButtonTitle));
  } else {
    BufferWriterI->Append_P(PSTR("<p><form action='%s' method='get'><button class='buttonh'>%s</button></form></p>"),
      pCONT_sup->GetTextIndexed_P(action, sizeof(action), title_index, kButtonAction),
      pCONT_sup->GetTextIndexed_P(title, sizeof(title), title_index, kButtonTitle));
  }
}


// MainButton? PageLoadButton?
void mWebServer::WebAppend_Button_Spaced(const char* button_title_ctr, const char* action_ctr, const char* confirm_message_ctr, const char* confirm_action_ctr)
{
  BufferWriterI->Append_P(PSTR("<div></div>"));            // 5px padding
  WebAppend_Button(button_title_ctr, action_ctr, confirm_message_ctr, confirm_action_ctr);
}
void mWebServer::WebAppend_Button(const char* button_title_ctr, const char* action_ctr, const char* confirm_message_ctr, const char* confirm_action_ctr)
{
  // long press button options?
  // check for confirmation popout needed
  if(confirm_message_ctr != nullptr){
    char confirm[64];
    BufferWriterI->Append_P(PSTR(
      "<p>"
        "<form action='%s' method='get' onsubmit='return confirm(\"%s\");'>"
          "<button name='%s' class='buttonh bred'>%s</button>"
        "</form>"
      "</p>"),
      action_ctr,
      confirm_message_ctr,
      confirm_action_ctr!=nullptr?confirm_action_ctr:"non",//(!title_index) ? "rst" : "non", //leave for now, but add passing button colour, else assume default
      button_title_ctr
    );
  } else {
    BufferWriterI->Append_P(PSTR("<p><form action='%s' method='get'><button class='buttonh'>%s</button></form></p>"),
      action_ctr,
      button_title_ctr
    );
  }
}


void mWebServer::WebAppend_Button2(const char* button_title_ctr, const char* action_ctr, const char* button_css_extra_style_ctr)
{
  // long press button options?
  // check for confirmation popout needed
  // if(confirm_message_ctr != nullptr){
  //   char confirm[64];
  //   BufferWriterI->Append_P(PSTR(
  //     "<p>"
  //       "<form action='%s' method='get' onsubmit='return confirm(\"%s\");'>"
  //         "<button name='%s' class='buttonh bred'>%s</button>"
  //       "</form>"
  //     "</p>"),
  //     action_ctr,
  //     confirm_message_ctr,
  //     confirm_action_ctr!=nullptr?confirm_action_ctr:"non",//(!title_index) ? "rst" : "non", //leave for now, but add passing button colour, else assume default
  //     button_title_ctr
  //   );
  // } else {
    BufferWriterI->Append_P(PSTR(
      
      // "<p><form action='%s' method='get'><button>%s</button></form></p>"

    "<button name='%s' type='submit' class='buttonh %s'>%s</button>"),

      action_ctr,
      button_css_extra_style_ctr,
      button_title_ctr
    );
  
}




/*****************************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ******** UNUSED FUNCTION BELOW ********************************************************************************************************************************************************************************************************
 ****************************************************************************************************************************************************************************************************************
 ****************************************************************************************************************************************************************************************************************
 ***************************************************************************************************************************************************************************************************************
 *************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 ***************************************************************************************************************************************************************************************************************** 
 *****************************************************************************************************************************************************************************************************************
 ***************************************************************************************************************************************************************************************************************/




// void mWebServer::HandleInformation(AsyncWebServerRequest *request)
// {
//     if (!HttpCheckPriviledgedAccess()) { return; }

//     AddLog_P(LOG_LEVEL_DEBUG, S_LOG_HTTP, PM_INFORMATION);

//     BufferWriterI->Start();

//     // Head
//     WebAppend_Start_Head_P(PM_INFORMATION); //<head>
//         WebAppend_Minimal_Style();
//         BufferWriterI->Append_P("</head>");

//         // Body
//         BufferWriterI->Append_P("<body>");
//             WebAppend_Title();

//             // Add information table position
//             BufferWriterI->Append_P(PSTR("<fieldset><legend><b>&nbsp;Information&nbsp;</b></legend>"));
//             BufferWriterI->Append_P(PSTR("<style>td{padding:0px 5px;}</style>"
//                                         "<div class='info_table_draw'></div>"));
//             BufferWriterI->Append_P(PSTR("</fieldset>"));

//             WebAppend_Button_Spaced(BUTTON_MAIN);
        
//             WebAppend_SystemVersionBar();

//             BufferWriterI->Append_P(PSTR("</div>"));

//             WebAppend_Script_P(PM_WEBURL_PAGE_INFO_LOAD_SCRIPT);    

//         BufferWriterI->Append_P("</body>");
//     BufferWriterI->Append_P("</html>");

//     WebSend_Response(request,200,CONTENT_TYPE_TEXT_HTML_ID,data_buffer.payload.ctr);
// }



// void mWebServer::WebSend_Information_Fetcher_URLs(AsyncWebServerRequest *request){

//   // // Serial.println(WEB_HANDLER_SCRIPT_INFROMATION_DATA_FETCHER_URLS_RATES_VAR); Serial.flush();      

//   // memset(&data_buffer,0,sizeof(data_buffer));
//   // char *buf = data_buffer.payload.ctr;
//   // char **iter = &buf;
//   // buffer_writer_internal = iter;

//   // AppendBuffer_PI2(PSTR("const dfurls=["));

//   //     AppendBuffer_PI2(PSTR("\"%s\","),"/script/parse_jsondata.js");
//   //     AppendBuffer_PI2(PSTR("\"%s\","),WEB_HANDLER_SCRIPT_WEB_PARSE_ADDSCRIPTSTYLE_FUNCTION);
//   //     // AppendBuffer_PI2(PSTR("\"%s\","),"/style/web_notif_bar.css");
//   //     // AppendBuffer_PI2(PSTR("\"%s\","),"/div/web_drawdiv_root.json");


      
//   //     AppendBuffer_PI2(PSTR("\"%s\","),"/div/web_info_table.json");
//   //     // AppendBuffer_PI2(PSTR("\"%s\","),WEB_HANDLER_SCRIPT_ROOT_MICHAEL);
//   //     // AppendBuffer_PI2(PSTR("\"%s\","),"/runtime/data_urls.json");
    
//   //   // pCONT->Tasker_Interface(FUNC_WEB_APPEND_LOADTIME_ROOT_URLS);
//   //   *buffer_writer_internal = (*buffer_writer_internal) - 1;// remove extra comma
//   // AppendBuffer_PI2(PSTR("];var dfrates=["));



//   //     AppendBuffer_PI2(PSTR("%d,"),-1);
//   //     AppendBuffer_PI2(PSTR("%d,"),-50);
//   //     // AppendBuffer_PI2(PSTR("%d,"),-1000);
//   //     AppendBuffer_PI2(PSTR("%d,"),-100);
//   //     // AppendBuffer_PI2(PSTR("%d,"),-1500);
//   //     // AppendBuffer_PI2(PSTR("%d,"),-2500);
//   //   // pCONT->Tasker_Interface(FUNC_WEB_APPEND_LOADTIME_ROOT_RATES);
//   //   *buffer_writer_internal = (*buffer_writer_internal) - 1;// remove extra comma
//   // AppendBuffer_PI2(PSTR("];"));

//   // #ifdef DEBUG_WEBSERVER_MEMORY
//   //   FreeMem_Usage_Before(&freemem_usage_js_fetcher_urls);
//   // #endif
//   // WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);
//   // #ifdef DEBUG_WEBSERVER_MEMORY
//   //   FreeMem_Usage_After(&freemem_usage_js_fetcher_urls);
//   // #endif 

// }



// // this table exists on the root page and is there to take over tasmota m=1 duty
// // when drawn, each module is asked for its row that sends its title and unique number class name
// // when asked to update, each module will append their data to a shared sender here.
// void mWebServer::HandleInformation_TableDraw(AsyncWebServerRequest *request){
    
//     return ;
//   // if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return;}  
//   // uint16_t freemem_start = ESP.getFreeHeap();  
  
//   // memset(&data_buffer,0,sizeof(data_buffer));
//   // char *buf = data_buffer.payload.ctr;
//   // char **buffer = &buf;

//   // AppendBuffer_P2(buffer,PSTR("{"));
//   //   buffer_writer_internal = buffer;
//   //   // pCONT->Tasker_Interface(FUNC_WEB_APPEND_ROOT_STATUS_TABLE_IFCHANGED);
//   //   // WebAppend_Root_Draw_TopBar();
//   //   WebAppend_Page_InformationTable();
//   //   // extra "," is automatically appending for repeated cases across modules, and should be removed
//   //   *buffer_writer_internal = (*buffer_writer_internal) - 1;// remove extra comma
//   // AppendBuffer_P2(buffer,PSTR("}"));

//   // #ifdef DEBUG_WEBSERVER_MEMORY
//   //   FreeMem_Usage_Before(&freemem_usage_json_root_draw);
//   // #endif
//   // WebSend_Response(request,200,CONTENT_TYPE_TEXT_JAVASCRIPT_ID,data_buffer.payload.ctr);  
//   // #ifdef DEBUG_WEBSERVER_MEMORY
//   //   FreeMem_Usage_After(&freemem_usage_json_root_draw);
//   // #endif 

//   // buffer_writer_internal = nullptr; // Anytime I use it, clear to back to null when finished
// }

// void mWebServer::WebAppend_Page_InformationTable(){

//   return ;

//   // AppendBuffer_PI2("\"%s\":[{\"ihr\":\"","info_table_draw");
//   // AppendBuffer_PI2("%s","{t}");

//   // AppendBuffer_PI2("<tr><th>");

//   // // move sections into progmem
    
//   // AppendBuffer_PI2(PSTR(D_PROGRAM_VERSION "}2%s(%s)"), pCONT_set->my_version, "my_image");//pCONT_set->my_image
//   // // #ifdef ESP8266
//   // //   AppendBuffer_PI2(PSTR("}1" D_BUILD_DATE_AND_TIME "}2%s"), pCONT->mt->GetBuildDateAndTime(dd));
//   // //   AppendBuffer_PI2(PSTR("}1" D_CORE_AND_SDK_VERSION "}2" ARDUINO_ESP8266_RELEASE "/%s"), ESP.getSdkVersion());
//   // // #endif
//   // // AppendBuffer_PI2(PSTR("}1" D_UPTIME "}2%s"), pCONT->mt->getFormattedUptime());
//   // // #ifdef ESP8266
//   // //   AppendBuffer_PI2(PSTR("}1" D_FLASH_WRITE_COUNT "}2%d at 0x%X"), pCONT_set->Settings.save_flag, pCONT_set->GetSettingsAddress());
//   // // #endif
//   // AppendBuffer_PI2(PSTR("}1" D_BOOT_COUNT "}2%d"), pCONT_set->Settings.bootcount);
//   // #ifdef ESP8266
//   //   AppendBuffer_PI2(PSTR("}1" D_RESTART_REASON "}2%s"), pCONT_sup->GetResetReason().c_str());
//   // #endif
//   // // uint8_t maxfn = 1;//(pCONT_set->devices_present > MAX_FRIENDLYNAMES) ? MAX_FRIENDLYNAMES : pCONT_set->devices_present;
//   // // //if (SONOFF_IFAN02 == pCONT_set->my_module_type) { maxfn = 1; }
//   // // for (uint8_t i = 0; i < maxfn; i++) {
//   // //   AppendBuffer_PI2(PSTR("}1" D_FRIENDLY_NAME " %d}2%s"), i +1, pCONT_set->Settings.system_name.friendly[i]);
//   // // }
//   // AppendBuffer_PI2(PSTR("}1}2&nbsp;"));  // Empty line

//   // // Show SSID direct for testing
//   // AppendBuffer_PI2(PSTR("}1" "SSID (RSS)" "}2%s (%d dBm)"), WiFi.SSID().c_str(), WiFi.RSSI());
    
//   // AppendBuffer_PI2(PSTR("}1" D_AP "%d " D_SSID " (" D_RSSI ")}2%s (%d%%)"), pCONT_set->Settings.sta_active +1, pCONT_set->Settings.sta_ssid[pCONT_set->Settings.sta_active], pCONT_wif->WifiGetRssiAsQuality(WiFi.RSSI()));
//   // AppendBuffer_PI2(PSTR("}1" D_HOSTNAME "}2%s%s"), pCONT_set->my_hostname, (pCONT_wif->mdns_begun) ? ".local" : "");
//   // if (static_cast<uint32_t>(WiFi.localIP()) != 0) {
//   //   AppendBuffer_PI2(PSTR("}1" D_IP_ADDRESS "}2%s"), WiFi.localIP().toString().c_str());
//   //   AppendBuffer_PI2(PSTR("}1" D_GATEWAY "}2%s"), IPAddress(pCONT_set->Settings.ip_address[1]).toString().c_str());
//   //   AppendBuffer_PI2(PSTR("}1" D_SUBNET_MASK "}2%s"), IPAddress(pCONT_set->Settings.ip_address[2]).toString().c_str());
//   //   AppendBuffer_PI2(PSTR("}1" D_DNS_SERVER "}2%s"), IPAddress(pCONT_set->Settings.ip_address[3]).toString().c_str());
//   //   AppendBuffer_PI2(PSTR("}1" D_MAC_ADDRESS "}2%s"), WiFi.macAddress().c_str());
//   // }
//   // if (static_cast<uint32_t>(WiFi.softAPIP()) != 0) {
//   //   AppendBuffer_PI2(PSTR("}1" D_IP_ADDRESS "}2%s"), WiFi.softAPIP().toString().c_str());
//   //   AppendBuffer_PI2(PSTR("}1" D_GATEWAY "}2%s"), WiFi.softAPIP().toString().c_str());
//   //   AppendBuffer_PI2(PSTR("}1" D_MAC_ADDRESS "}2%s"), WiFi.softAPmacAddress().c_str());
//   // }
//   // AppendBuffer_PI2(PSTR("}1}2&nbsp;"));  // Empty line

//   // // if (pCONT_set->Settings.flag_system.mqtt_enabled) {
//   // //   AppendBuffer_PI2(PSTR("}1" D_MQTT_HOST "}2%s"), pCONT_set->Settings.mqtt_host);
//   // //   AppendBuffer_PI2(PSTR("}1" D_MQTT_PORT "}2%d"), pCONT_set->Settings.mqtt_port);
//   // //   AppendBuffer_PI2(PSTR("}1" D_MQTT_USER "}2%s"), pCONT_set->Settings.mqtt_user);
//   // //   AppendBuffer_PI2(PSTR("}1" D_MQTT_CLIENT "}2%s"), pCONT_set->mqtt_client);
//   // //   AppendBuffer_PI2(PSTR("}1" D_MQTT_TOPIC "}2%s"), pCONT_set->Settings.mqtt_topic);
//   // //   AppendBuffer_PI2(PSTR("}1" D_MQTT_GROUP_TOPIC "}2%s"), pCONT_set->Settings.mqtt_grptopic);
//   // // } else {
//   // //   //AppendBuffer_PI2(PSTR("}1" D_MQTT "}2%s"), D_DISABLED);
//   // // }
//   // // AppendBuffer_PI2(PSTR("}1}2&nbsp;"));  // Empty line

//   // #ifdef USE_DISCOVERY
//   //   AppendBuffer_PI2(PSTR("}1" D_MDNS_DISCOVERY "}2%s"), (pCONT_set->Settings.flag_network.mdns_enabled) ? D_ENABLED : D_DISABLED);
//   //   if (pCONT_set->Settings.flag_network.mdns_enabled) {
//   // #ifdef USE_NETWORK_MDNS
//   //     AppendBuffer_PI2(PSTR("}1" D_MDNS_ADVERTISE "}2" D_WEB_SERVER));
//   // #else
//   //     AppendBuffer_PI2(PSTR("}1" D_MDNS_ADVERTISE "}2" D_DISABLED));
//   // #endif // USE_NETWORK_MDNS
//   //   }
//   // #else
//   //   AppendBuffer_PI2(PSTR("}1" D_MDNS_DISCOVERY "}2" D_DISABLED));
//   // #endif // USE_DISCOVERY

//   // AppendBuffer_PI2(PSTR("}1}2&nbsp;"));  // Empty line
//   // AppendBuffer_PI2(PSTR("}1" "Module Config" "}2"));//,       ESP.getChipId());
//   // // Class/Tasks info
//   // // buffer_writer_internal = buffer;
//   // // pCONT->Tasker_Interface(FUNC_WEB_PAGEINFORMATION_SEND_MODULE);
//   // AppendBuffer_PI2(PSTR("}1}2&nbsp;"));  // Empty line

//   // #ifdef ESP8266
//   //   AppendBuffer_PI2(PSTR("}1" D_ESP_CHIP_ID "}2%d"),       ESP.getChipId());
//   //   AppendBuffer_PI2(PSTR("}1" D_FLASH_CHIP_ID "}20x%06X"), ESP.getFlashChipId());
//   //   AppendBuffer_PI2(PSTR("}1" D_FLASH_CHIP_SIZE "}2%dkB"), ESP.getFlashChipRealSize() / 1024);
//   // #endif
//   // #ifdef ESP32
//   //   AppendBuffer_PI2(PSTR("}1" D_ESP_CHIP_ID "}2%d"),       1);
//   //   AppendBuffer_PI2(PSTR("}1" D_FLASH_CHIP_ID "}20x%06X"), 2);
//   //   AppendBuffer_PI2(PSTR("}1" D_FLASH_CHIP_SIZE "}2%dkB"), 3);
//   // #endif
//   // AppendBuffer_PI2(PSTR("}1" D_PROGRAM_FLASH_SIZE "}2%dkB"), ESP.getFlashChipSize() / 1024);
//   // AppendBuffer_PI2(PSTR("}1" D_PROGRAM_SIZE "}2%dkB"),       ESP.getSketchSize() / 1024);
//   // AppendBuffer_PI2(PSTR("}1" D_FREE_PROGRAM_SPACE "}2%dkB"), ESP.getFreeSketchSpace() / 1024);
//   // AppendBuffer_PI2(PSTR("}1" D_FREE_MEMORY "}2%dkB"),        ESP.getFreeHeap() / 1024);
//   // AppendBuffer_PI2(PSTR("</td></tr>"));

//   // pCONT_web->AppendBuffer_PI2("%s","{t2}");
//   // pCONT_web->AppendBuffer_PI2("\"}]");  
//   // pCONT_web->AppendBuffer_PI2(PSTR(","));  

// } //end function




        //   "var x2=null,lt2='';"
        //   "var sn2=0,id2=0;" //sn2 starts at top of page, web_log_index starts at 0
        //   "function l(p){"
        //     "var c,o='',t;"
        //     "clearTimeout(lt2);"
        //     "t=document.getElementById('t1');"
        //     "if(p==1){"
        //       "c=document.getElementById('c1');"
        //       "o='&c1='+encodeURIComponent(c.value);"
        //       "c.value='';"
        //       "t.scrollTop=sn2;"
        //     "}"
        //     //scrolltop == 0 is top of textbox, larger number = bottom
        //     "if(t.scrollTop>=sn2){" //if scrolled up at all, don't update
        //       "if(x2!=null){ x2.abort(); }"
        //       "x2=new XMLHttpRequest();"
        //       "x2.onreadystatechange=function(){"
        //         "if(x2.readyState==4&&x2.status==200){"
        //           "var z,d;"
        //           //[web_log_index][reset_web_log_flag][text]
        //           "d=x2.responseText.split(/}1/);"
        //           "id2=d.shift();"   //web_log_index //removes first to last element
        //           "if(d.shift()==0){" //reset_web_log_flag == 0
        //             "t.value='';" //clear value back to start
        //           "}"
        //           "z=d.shift();" //get the text
        //           "if(z.length>0){" //if new text
        //             "t.value+=z;"  //append text
        //           "}"
        //           "t.scrollTop=99999;" //force to the very bottom
        //           "sn2=t.scrollTop;"   //get scroll of the bottom line now 
        //         "}"
        //       "};"
        //       "x2.open('GET','" D_WEB_HANDLE_CONSOLE_PAGE "?c2='+id2+o,true);" //current weblog_index + any new commands
        //       "x2.send();"
        //     "}"
        //   "lt2=setTimeout(l,200);"
        //   "return false;"
        // "}"
        // "l(0);"
        // "function jd(){"
        //   "var t=0,i=document.querySelectorAll('input,button,textarea,select');"
        //   "while(i.length>=t){"
        //     "if(i[t]){"
        //       "i[t]['name']=(i[t].hasAttribute('id')&&(!i[t].hasAttribute('name')))?i[t]['id']:i[t]['name'];"
        //     "}"
        //     "t++;"
        //   "}"
        // "}"
        // "jd();"

// bool mWebServer::HandleRootStatusRefresh(AsyncWebServerRequest *request)
// {
//   // if (!WebAuthenticate()) {
//   //   request->requestAuthentication();
//   //   return true;
//   // }

//   if (!request->hasParam("m")) {     // Status refresh requested
//     // AddLog_P(LOG_LEVEL_TEST,PSTR("!request->hasParam(\"m\")"));
//     return false; 
//   }else{
//     AddLog_P(LOG_LEVEL_TEST,PSTR("request->hasParam(\"m\")"));
//     // continue through root function
//   }

//   request_web_command = request;

//   char tmp[30];                       // WebGetArg numbers only
//   char svalue[32];                   // Command and number parameter

//   // WebGetArg(request, "o", tmp, sizeof(tmp));  // 1 - 16 Device number for button Toggle or Fanspeed
//   // if (strlen(tmp)) {
//   //   ShowWebSource(SRC_WEBGUI);
//   //   uint8_t device = atoi(tmp);
//   //   if (MODULE_SONOFF_IFAN02 == pCONT_set->my_module_type) {
//   //     if (device < 2) {
//   //       //ExecuteCommandPower(1, POWER_TOGGLE, SRC_IGNORE);
//   //     } else {
//   //       snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_FANSPEED " %d"), device -2);
//   //       //ExecuteCommand(svalue, SRC_WEBGUI);
//   //     }
//   //   } else {
//   //     //ExecuteCommandPower(device, POWER_TOGGLE, SRC_IGNORE);
//   //   }
//   // }
//   WebGetArg(request,"d", tmp, sizeof(tmp));  // 0 - 100 Dimmer value
//   if (strlen(tmp)) {
//     snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_DIMMER " %s"), tmp);
//     ExecuteWebCommand(svalue, SRC_WEBGUI);
//   }
//   // WebGetArg(request,"t", tmp, sizeof(tmp));  // 153 - 500 Color temperature
//   // if (strlen(tmp)) {
//   //   // Convert ?command to longer (t -> CT)
//   //   snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_COLORTEMPERATURE " %s"), tmp);
//   //   ExecuteWebCommand(svalue, SRC_WEBGUI);
//   // }
//   // WebGetArg(request,"k", tmp, sizeof(tmp));  // 1 - 16 Pre defined RF keys
//   // if (strlen(tmp)) {
//   //   snprintf_P(svalue, sizeof(svalue), PSTR(D_JSON_RFKEY "%s"), tmp);
//   //   ExecuteWebCommand(svalue, SRC_WEBGUI);
//   // }

//   pCONT->Tasker_Interface(FUNC_WEB_COMMAND); //parse any webcommands


//   if(RespondWebSendFreeMemoryTooLow(request,WEBSEND_FREEMEMORY_START_LIMIT)){return true;} 

//   JsonBuilderI->Start();
//     JsonBuilderI->AppendBuffer(PSTR("t}")); //temp fix
//     // all but phased out 
//     // REMOVE html part
//     // pCONT->Tasker_Interface(FUNC_WEB_SHOW_PARAMETERS);
//     JsonBuilderI->AppendBuffer(PSTR("{t2")); //temp fix
//   JsonBuilderI->End();

//   WebSend_Response(request,200,CONTENT_TYPE_APPLICATION_JSON_ID,data_buffer.payload.ctr);  

//   return true;

// }


// void mWebServer::WebAppend_SystemVersionBar(){  

//   uint32_t text_colour = WebColor(255,255,255);
//   if(pCONT_set->firmware_version.fNewVersionAvailable){
//     text_colour = WebColor(pCONT_set->COL_TEXT_SUCCESS);
//   }
//   if(pCONT_set->firmware_version.fCurrentVersionNotSupported){
//     text_colour = WebColor(pCONT_set->COL_TEXT_WARNING);
//   }

//   char message_version1[100];
//   sprintf(message_version1,PSTR("%s %s%s"),
//     PROJECT_NAME_CTR,
//     pCONT_set->firmware_version.current.name_ctr,
//     pCONT_set->firmware_version.fNewVersionAvailable ? " Update Available" : ""  
//   );

//   BufferWriterI->Append_P(PM_HTTP_END_WITH_UPDATE_NOEND,
//     "https://github.com/sparkplug23/HomeAutomationControlSystem",  // URL to open when clicked
//     text_colour,
//     message_version1
//   );

// }//end function





// void mWebServer::WebAppend_Minimal_Style(){

//   BufferWriterI->Append_P("<style>");
//   BufferWriterI->Append_P(PM_HTTP_HEAD_STYLE1_MINIMAL,
//     pCONT_web->WebColor(pCONT_set->COL_FORM), 
//     pCONT_web->WebColor(pCONT_set->COL_BACKGROUND),
//     pCONT_web->WebColor(pCONT_set->COL_BUTTON),  
//     pCONT_web->WebColor(pCONT_set->COL_BUTTON_TEXT)
//   );
//   BufferWriterI->Append_P("</style>");

// }

// void mWebServer::WebAppend_Title(){
//   BufferWriterI->Append_P(HTTP_STYLE_TITLE_CONTAINER_HEAD, 
//     WebColor(pCONT_set->COL_TEXT),
//     WebColor(pCONT_set->COL_TEXT_MODULE_TITLE), 
//     pCONT_set->Settings.system_name.friendly
//   );
// }

// void mWebServer::WebAppend_Script_P(PGM_P url){
//     BufferWriterI->Append_P(PSTR("<script type='text/javascript' src='%s'></script>"), url);    
// }


#endif //   #ifdef USE_MODULE_CORE_WEBSERVER