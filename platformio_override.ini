; ***  Example PlatformIO Project Configuration Override File   ***
; ***  Changes done here override settings in platformio.ini    ***
;
; *****************************************************************
; ***  to activate rename this file to platformio_override.ini  ***
; *****************************************************************
;
; Please visit documentation for the options and examples
; http://docs.platformio.org/en/stable/projectconf.html

[platformio]

; *** Build/upload environment
default_envs =
; *** Uncomment the line(s) below to select version(s)

    ;;; EXAMPLE builds ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; hacs82-h801
    ;;; SPECIAL XMAS ONLY DEVICES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
              ; esp_8266_xmas_diningroom_01
              ; esp_8266_xmas_diningroom_02
              ; esp_8266_rgb_controller_01
              ; esp_32_outsidetree_basic_01
              ; esp_32_outsidetree_basic_02
              ; esp_32_outsidetree_debug
              ; future animations like last year
              ; esp_32_outsidetree_advanced_01
              ; esp_8266_rgbstatic_controller_01
              ; esp_8266_xmas_hallway_tree
              ; esp_8266_xmas_hallway_tree2
              ; esp_8266_xmas_livingroom_water
              ; esp_8266_xmas_jacqueline_01
              ; esp_8266_xmas_paula_01
              ; esp_8266_xmas_therese_rgb_01
              ; esp_8266_xmas_therese_grb_01            
    ;;; HOME INSTALLED ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Landing
    ; esp_32_landingpanel
    ; esp_8266_dimmer_landing_ceiling
    ; esp_8266_immersionsensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Spare Room    
    ; esp_8266_dimmer_spareroom_ceiling
    ; esp_8266_h801_spareroom_wardrobe
    ; esp_32_ambilight_spareroom
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Hallway / UnderStairs
    ; esp_8266_radiatorfan
    ; esp_8266_socket_06_hallway_table
    ; hacs32_heating
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Ensuite
    ; esp_8266_ensuitesensor
    ; esp_8266_dimmer_ensuite
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Master
    ; esp_8266_dimmer_masterbedroom
    ; esp_8266_masterbedroomsensor
    ; esp_8266_hvac_masterbedroom     
    ; esp_8266_dresser_lights
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Kitchen
    ; esp_8266_kitchensensor
    ; esp_8266_kitchenlight1
    ; esp_8266_kitchenlight2
    ; esp_8266_kitchenlight3
    ; esp_8266_kitchenlight4
    ; esp_8266_socket_11_extractor_fan
    ; esp_8266_rgbcooker
    ; esp_8266_rgbfridge 
    ; esp_8266_rgbcrystal_glass
    ; esp_8266_rgbshelf
    ; esp_8266_hvac_kitchen
    ; esp_32_kitchen_heating_display
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Utility
    ; esp_8266_utilitysensor
    ; esp_8266_rgbcrystal1
    ; esp_8266_rgbutility
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Livingroom
    ; esp8_socket_03_livingroom_lamp1
    ; esp8_socket_04_livingroom_lamp2
    ; esp_8266_livingroomsensor
    ; esp_32_rgbfireplace
    ; esp_8266_shellydimmer_livingroom_ceiling
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Garage 
    ; esp_32_oiltank
    ; esp_8266_oilfurnace  
    ; esp_8266_garagelight
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Outside
    ; esp_8266_gazebo_controller    ; replacing as "esp_8266_sonoff_4chpro_gazebo"
    ; esp_32_rgbgazebo_roof
    ; esp_8266_sidedoorlight
    ; esp_32_gazebosensor
    ; esp_8266_h801_rgbgazebo
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Downstairs Toilet
    ; esp_32_consumerunit
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Attic
    ; esp_8266_atticsensor
    ; esp_8266_socket_13_ensuite_fan   (automatic in OH, if shower on, every minute, reset timer for fan for 60 minutes)
    ; esp_8266_ensuitefan_sensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Bedroom 
    ; esp_8266_ceilingfan
    ; esp_8266_dimmer_bedroom_ceiling
    ; esp_8266_dimmer_bedroom_lamp
    ; esp_8266_inside_bedroom_wardrobe
    ; esp_8266_black_stand_light
    ; esp_32_bedroomsensor
    esp_32_desksensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Wireless/Roaming
    ; esp_8266_airpurifier
    ; esp_8266_floorfan1
    ; esp_8266_floorfan2
    ; esp_8266_socket_numbered_12
    ; esp_8266_socket_15
    ; esp_8266_socket_16

    ;;; SAMPLING DEVICES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ; hacs32-sdlogger1
    ; esp_32_gpsparser_tester_polling
    ; esp_32_sdcardwriter_tester
    ; esp_32_uart_tester
    ; esp_32_uart_gpsnmea_tester
    ; esp_32_uart_gpsubx_tester
    ; esp_32_sdcard_tester
    ; esp_32_gps_to_sdcard_tester
    ; esp_32_sdcard_lipo_tester
    ; esp_32_measurement_system_1_tester
    ; trying full measurements with imu too for heading and pitch only
    ; esp_32_measurement_system_1
    ; esp_32_measurement_calib_system_1
    ; esp_32_radiation_pattern_imu_sd_logger_1
    ; esp_32_rad_imu_sd_logger_1

    ;;; DEVELOPEMENT DEVICES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ; esp_8266_customuser_example_serial
    ; esp_8266_customuser_example_ota
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Bedroom Installed and Used
    ; esp_8266_rgbclock_01
    ; esp_8266_rgbbedlight
    ; esp_8266_h801_sunlight
    ; esp_8266_h801_sunlight_2
    ; esp_8266_rgbbedroomfloor
    ; esp_8266_rgbdesk
    ;esp_8266_rgbstring_lights1
    ; esp_8266_rgbstring_lights2
    ; esp_8266_hvac_bedroom
    ; hacs32-rgbfireplace_tester
    ; hacs32-bedroom_pzem_tester
    ; esp_8266_rgbbedroom_h801_2
    ; esp_8266_rgbnotifications_01
    ; esp_8266_rgb_computer_display_u25
    ; esp_8266_rgb_computer_display_p32
    ; esp_8266_bedroom_wallclock_01
    ; esp_32_hvac_hairdryer
    ; esp_8266_hvac_hairdryer
    ; esp_32_hvac_oil_radiator
    
    ; esp_8266_testbed_shelly1_01
    ; esp_8266_testbed_shelly2p5_01
    ; esp_8266_testbed_shelly2_dimmer_01 
    ; esp_8266_testbed_motion
    ; esp_32_testbed_motion
    ; esp_8266_h801_tester
    ; esp_8266_rgbnotification_tester
    ; esp_8266_testbed_rgbclock
    ; esp_8266_testbed_string_animator_01
    ; esp_8266_testbed_ultrasonic_01
    ; esp_32_testbed_gps_sdcard_logger
    ; esp_8266_testbed_9axis_gyro
    ; esp_32_testbed_9axis_gyro_mpu9250
    ; esp_32_testbed_9axis_gyro_gy89
    ; esp_32_testbed_ecompass_lsm303d
    ; esp_32_testbed_ds18xx
    ; esp_8266_testbed_segments_roof
    ; esp_32_testbed_nextion_heating
    ; esp_8266_bedroom_cont_button_01
    ; esp_8266_testbed_segments_4pixel
    ; esp_32_testbed_segments_4pixel
    ; esp_8266_testbed_webui_4pixel
    ; esp_32_testbed_nextion_display
    ; esp_8266_testbed_motion_climate_sensor
    ; esp_32_testbed_hvac_with_energy_sens
    ; esp_32_testbed_nextion_display_web
    ; esp_8266_testbed_webui_basic_gui
    ; esp_8266_testbed_webui_segments_3pixels
    ; esp_8266_testbed_webui_4pixel
    ; esp_8266_testbed_4chpro
    ; esp_8266_gazebo_sonoff_4chpro
    ; esp_32_testbed_matrix_3p_e131
    ; esp_8266_testbed_status_leds
    ; esp_32_testbed_climate_sensor
    ; esp_8266_testbed_rtc_fastboot

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff / Shellys
    ; esp_8266_shellydimmer_bedroom_globe
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Designed for other people
    ; esp_8266_rgbcustomuser01    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff Grouped
    ; esp_8266_socket_numbered_01
    ; esp_8266_socket_numbered_05
    ; esp_8266_socket_numbered_06
    ; esp_8266_socket_numbered_07
    ; esp_8266_socket_numbered_08

    ; esp_8266_socket_numbered_09

    ; esp_8266_socket_numbered_10
    ; esp_8266_socket_numbered_10

    ; Desk lights, sonoff socket
    ; esp_8266_socket_numbered_12
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff Grouped with external button enabled via serial RX pin
    
    ; Short inline with socket, black wire, used for heating pads at desk
    ; esp_8266_socket_numbered_02
    ; esp_8266_socket_numbered_02_button
    ; THIS IS ACTIVE -- create button for my desk, this can be used as tester
    ; esp_8266_socket_02_external_toggle


    ; esp_8266_socket_numbered_14_external_toggle


    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff Socket S26

    
    ; esp_8266_socket_numbered_20
    ; esp_8266_socket_numbered_21
    ; esp_8266_socket_numbered_22
  


[common]
platform_packages           = ${core.platform_packages}
build_unflags               = ${core.build_unflags}
build_flags                 = ${core.build_flags}
; *** Optional Debug messages
;                            -DDEBUG_TASMOTA_CORE
;                            -DDEBUG_TASMOTA_DRIVER
;                            -DDEBUG_TASMOTA_SENSOR

; *** CAUTION *** This setting is ONLY possible since 12.01.2021 with development version !!!
; *** Enable only if you exactly know what are you doing
; *** If you try with earlier builds a serial erase and flash is probably needed
;
; Build variant 1MB = 1MB firmware no filesystem (default)
;board_build.ldscript        = eagle.flash.1m.ld
; Build variant 2MB = 1MB firmware, +744k OTA, 256k filesystem (Zigbee Bridge, most Shelly devices)
;board_build.ldscript        = eagle.flash.2m256.ld
; Build variant 4MB = 1MB firmware, +1MB OTA, 2MB filesystem (WEMOS D1 Mini, NodeMCU, Sonoff POW)
;board_build.ldscript        = eagle.flash.4m2m.ld
; Build variant 16MB = 1MB firmware, +1MB OTA, 14MB filesystem (WEMOS D1 Mini pro, Ledunia (=32MB))
;board_build.ldscript        = eagle.flash.16m14m.ld

; set CPU frequency to 80MHz (default) or 160MHz
;board_build.f_cpu           = 160000000L

; set Flash chip frequency to 40MHz (default), 20MHz, 26Mhz, 80Mhz
;board_build.f_flash         = 20000000L
;board_build.f_flash         = 26000000L
;board_build.f_flash         = 80000000L

; *** Upload Serial reset method for Wemos and NodeMCU
upload_port                 = COM5

extra_scripts               = ${scripts_defaults.extra_scripts}
;                              pio-tools/obj-dump.py
                            pio/strip-floats.py
                            pio/name-firmware.py
                            ; pio/gzip-firmware.py
                            gzip_fw.py
                            pio/override_copy.py

lib_extra_dirs              = ${library.lib_extra_dirs}

[core]
; Activate only (one set) if you want to override the standard core defined in platformio.ini !!!

;platform_packages           = ${core_stage.platform_packages}
;build_unflags               = ${core_stage.build_unflags}
;build_flags                 = ${core_stage.build_flags}

[core_stage]
; *** Esp8266 core for Arduino version stage
platform_packages           = framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git
; *** Use Xtensa build chain 10.2. GNU13 from https://github.com/earlephilhower/esp-quick-toolchain
                              mcspr/toolchain-xtensa @ 5.100200.201223
build_unflags               = ${esp_defaults.build_unflags}
                              -Wswitch-unreachable
build_flags                 = ${esp82xx_defaults.build_flags}
; *** Use ONE of the two PWM variants. Tasmota default is Locked PWM
                              ;-DWAVEFORM_LOCKED_PHASE
                              -DWAVEFORM_LOCKED_PWM
                              -Wno-switch-unreachable

[common32]
framework                   = ${common.framework}
platform                    = ${core32.platform}
platform_packages           = ${core32.platform_packages}
build_unflags               = ${core32.build_unflags}
build_flags                 = ${core32.build_flags}
upload_port                 = COM4
lib_extra_dirs              = ${library.lib_extra_dirs}
; *** ESP32 lib. ALWAYS needed for ESP32 !!!
                            ;   lib/libesp32
; *** uncomment the following line if you want to use Bluetooth or Apple Homekit in a Tasmota32 build
;                              lib/libesp32_div
; *** uncomment the following line if you want to use Epaper driver epidy in your Tasmota32 build
;                              lib/libesp32_epdiy
; *** ESP32 lib. ALWAYS needed for ESP32 !!!
                            lib/libesp32
; *** ESP32 lib. ALWAYS needed for ESP32 !!!
                            lib/lib_lighting   
; *** Only disabled for Tasmota minimal and Tasmota light. For all other variants needed!
                            lib/lib_basic
                            ; lib/lib_sensor_db
                            ; lib/lib_sensor

; [core32]
; ; Activate Stage Core32 by removing ";" in next 3 lines, if you want to override the standard core32
; ; platform_packages           = ${core32_stage.platform_packages}
; ; build_unflags               = ${core32_stage.build_unflags}
; ; build_flags                 = ${core32_stage.build_flags}

; [core32_stage]
; platform_packages           = framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git
;                               platformio/tool-mklittlefs @ ~1.203.200522
; build_unflags               = ${esp32_defaults.build_unflags}
; build_flags                 = ${esp32_defaults.build_flags}
;                               -DESP32_STAGE=true

[core32]
platform                    = espressif32 @ 3.2.0
platform_packages           = platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}

[library]
shared_libdeps_dir          = lib
; *** Library disable / enable for variant Tasmota(32). Disable reduces compile time
; *** !!! Disabling needed libs will generate compile errors !!!
; *** The resulting firmware will NOT be different if you leave all libs enabled
; *** Disabling by putting a ";" in front of the lib name
; *** If you dont know what it is all about, do not change
lib_extra_dirs              =
; ; *** Only disabled for Tasmota minimal and Tasmota light. For all other variants needed!
;                               lib/lib_basic
; ; **** I2C devices. Most sensors. Disable only if you dont have ANY I2C device enabled
;                               lib/lib_i2c
; ; *** Displays. Disable if you dont have any Display activated
;                               lib/lib_display
; ; *** Bear SSL and base64. Disable if you dont have SSL or TLS activated
;                               lib/lib_ssl
; ; *** Audio needs a lot of time to compile. Mostly not used functions. Recommended to disable
;                               lib/lib_audio
; ; *** RF 433 stuff (not RF Bridge). Recommended to disable
;                               lib/lib_rf
; ; *** Mostly not used functions. Recommended to disable
;                               lib/lib_div
                            lib/libesp8266/network 
                            lib/lib_network 
                            lib/lib_lighting
                            lib/lib_basic      
                            ; lib/lib_sensor  

; *** EXPERIMENTAL Tasmota version for ESP32solo1 (used in some Xiaomi devices)
[env:tasmota32solo1]
extends                     = env:tasmota32_base
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/raw/framework-arduinoespressif32/framework-arduinoespressif32-release_v3.3-solo1-bd65eb8d1.tar.gz
                              platformio/tool-mklittlefs @ ~1.203.200522
                              platformio/tool-esptoolpy @ ~1.30000.0
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common32.build_flags}

; *** EXPERIMENTAL Tasmota version for ESP32-S2
[env:tasmota32s2]
extends                     = env:tasmota32_base
board                       = esp32s2
board_build.flash_mode      = qio
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/v.2.0.0.pre/framework-arduinoespressif32-master-cf457d412.tar.gz
                              platformio/tool-mklittlefs @ ~1.203.200522
                              platformio/tool-esptoolpy @ ~1.30000.0
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common32.build_flags} -DFIRMWARE_LITE
lib_extra_dirs              = lib/libesp32
lib_ignore                  =
    NimBLE-Arduino
    Micro-RTSP
    ESP32-HomeKit


; *** EXPERIMENTAL Tasmota version for ESP32-C3
[env:tasmota32c3]
extends                     = env:tasmota32_base
board                       = esp32c3
platform                    = https://github.com/Jason2866/platform-espressif32.git#feature/arduino-c3
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/v.2.0.0.pre/framework-arduinoespressif32-master-cf457d412.tar.gz
                              ; needed toolchain for Windows
                              toolchain-riscv32 @ https://github.com/Jason2866/platform-espressif32/releases/download/8.4.0/riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-win32.zip
                              ; needed toolchain for Linux
                              ;toolchain-riscv32 @ https://github.com/Jason2866/platform-espressif32/releases/download/8.4.0/riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-linux-amd64.tar.gz
                              ; needed toolchain for MacOS
                              ;toolchain-riscv32 @ https://github.com/Jason2866/platform-espressif32/releases/download/8.4.0/riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-macos.tar.gz
                              platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags} -mtarget-align
build_flags                 = ${esp32_defaults.build_flags} -DFIRMWARE_LITE
                              ;-DESP32_STAGE=true
lib_extra_dirs              = lib/libesp32
lib_ignore                  =
    NimBLE-Arduino
    Micro-RTSP

; *** EXPERIMENTAL Tasmota version for Arduino ESP32 IDF4.4. Linking not working.
[env:tasmota32idf4]
extends                     = env:tasmota32_base
platform                    = https://github.com/Jason2866/platform-espressif32.git#feature/arduino-idf-v4.4
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/arduino-esp32/releases/download/esp32-2.0.0-pre/esp32-2.0.0-pre.zip
                              platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                              ;-DESP32_STAGE=true

; *** Debug version used for PlatformIO Home Project Inspection
[env:tasmota-debug]
build_type                  = debug
build_unflags               = ${esp_defaults.build_unflags}
build_flags                 = ${esp82xx_defaults.build_flags}
;                              -Wstack-usage=300
                                    -D DEVICE_RGBDESK  
                                    -w 

[env:tasmota32-debug]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
;                              -Wstack-usage=300

[env:hacs32-debug]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
;                              -Wstack-usage=300
                                    -D DEVICE_SDLOGGER1_TESTER
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network

[env:hacs32-sdlogger1]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_SDLOGGER1_TESTER
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
                            lib/lib_display
upload_port = COM5
; upload_protocol = espota
; upload_port = 192.168.1.114
monitor_filters = esp32_exception_decoder
; build_type = debug

[env:hacs32-rgbfireplace_tester]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_RGBFIREPLACE_TESTER
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
                            lib/lib_lighting
; upload_port = 192.168.1.171
; upload_port = rgbfireplace_tester.local
; extra_scripts   = gzip_fw.py
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5

[env:hacs32-pwmtest]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_DEVKIT_BASIC
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
upload_port = COM5




[env:hacs32_webcam1]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM1
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
upload_port = COM5



[env:hacs32_webcam2]
extends                     = env:tasmota32_base
; build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM2
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
board = esp32cam
upload_port = COM8
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = 192.168.1.114


[env:hacs32_webcam3]
extends                     = env:tasmota32_base
; build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM3
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
                            ; lib/libesp32/esp32-cam
board = esp32cam
upload_port = COM8
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = 192.168.1.114



[env:hacs82-h801]
build_unflags               = ${esp_defaults.build_unflags}
build_flags                 = ${esp82xx_defaults.build_flags}
                            ; Defining name here allows mdns upload_port to use it
                            ; -D DEVICE_EXAMPLE_H801
                            ; Define the device on the next line (remove ; to enable)
                            ; -D DEVICE_EXAMPLE_H801
; For Serial Uploads (remove ; to enable)
upload_port = COM1
; For OTA Uploads with IP (remove ; to enable)
; upload_protocol = espota
; extra_scripts   =  ${scripts_defaults.extra_scripts} 
;                     gzip_fw.py
; upload_port = 192.168.1.124
; For OTA Uploads with MDNS Name eg DEVICE_EXAMPLE_H801 (remove ; to enable)
; upload_protocol = espota
; extra_scripts   =  ${scripts_defaults.extra_scripts} 
;                     gzip_fw.py
; upload_port = h801_tester



[env:hacs32-bedroom_pzem_tester]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_BEDROOM_PZEM_TESTER
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.137
; upload_port = consumerunit.local
upload_port = COM5
monitor_filters = esp32_exception_decoder





[env:esp_32_landingpanel]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_LANDINGPANEL2
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            ; lib/lib_energy
                            lib/libesp32/network
                            lib/lib_network
                            lib/lib_display
extra_scripts   = gzip_fw.py
upload_protocol = espota
upload_port = 192.168.1.134
; upload_port = landingpanel.local
; upload_port = COM5
; monitor_filters = esp32_exception_decoder


[env:esp_32_gpsparser_tester_polling]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_GPSPARSER_TESTER_POLLING -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_gpsparser_tester_interrupt]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_GPSPARSER_TESTER_INTERRUPT -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_lighting, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_gps
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM3
; upload_port = 192.168.1.210
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_sdlogger1_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_SDLOGGER1_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_lighting, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_gps, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM5
upload_port = sdlogger1_tester
; upload_port = 192.168.1.210
upload_protocol = espota
extra_scripts   = gzip_fw.py


[env:esp_32_uart_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_UART_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_uart_gpsnmea_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_UART_GPS_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_uart_gpsubx_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_UART_GPSUBX_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_sdcard_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_SDCARD_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_sdcard_lipo_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_SDCARD_LIPO_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_gps_to_sdcard_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_GPS_TO_SDCARD_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_measurement_system_1_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat
; -D DEVICE_MEASUREMENT_SYSTEM_1 

lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_measurement_system_1]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_measurement_calib_system_1]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_rad_imu_sd_logger_1]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_CONTROLLER_SDLOGGER_IMU_RADIATIONPATTERN_UAV 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM18
; monitor_speed             = 115200
; upload_port = 192.168.1.129
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_testbed_ecompass_lsm303d]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_6DOF_ECOMPASS_LSM303D 
                          ; -D ENABLE_BUG_TRACING
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; monitor_speed             = 115200
; upload_port = 192.168.1.129
; upload_protocol = espota
; extra_scripts   = gzip_fw.py





[env:esp_32_testbed_gps_sdcard_logger]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_GPS_SDCARD_LOGGER 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM14
monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


    




[env:esp_32_rgbgazebo_roof]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w
; -D DEVICE_MEASUREMENT_SYSTEM_1 

lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting   
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM5
upload_port = 192.168.1.167
upload_protocol = espota
; extra_scripts   = gzip_fw.py

    



[env:esp_8266_testbed_9axis_gyro]
build_flags = ${common.build_flags} -D DEVICE_TESTBED_9AXIS_GRYO -w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.1.98
upload_port = COM5
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.131



[env:esp_32_testbed_9axis_gyro_mpu9250]
; build_flags = ${common.build_flags} -D DEVICE_TESTBED_9AXIS_GRYO_MPU9250 -w
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_9AXIS_GRYO_MPU9250
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.1.98
; upload_port = COM5
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.131
extra_scripts   = gzip_fw.py
upload_protocol = espota
upload_port = 192.168.1.167
; upload_port = landingpanel.local



[env:esp_32_testbed_9axis_gyro_gy89]
; build_flags = ${common.build_flags} -D DEVICE_TESTBED_9AXIS_GRYO_MPU9250 -w
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_9AXIS_GRYO_GY89
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = 192.168.1.98
upload_port = COM31
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.131
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.167
; upload_port = landingpanel.local



[env:esp_32_outsidetree_basic_01]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_BASIC_01
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = 192.168.1.238
; upload_port = outsidetree_01
; upload_port = COM31
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
upload_protocol = espota

[env:esp_32_outsidetree_basic_02]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_BASIC_02
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.238
; upload_port = outsidetree_01
upload_port = COM31
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_protocol = espota


[env:esp_32_outsidetree_debug]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_ESP32_DEBUG
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.238
; upload_port = outsidetree_01
upload_port = COM5
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_protocol = espota

[env:esp_32_outsidetree_advanced_01]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_ADVANCED_01
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.138
upload_port = COM5
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_protocol = espota



[env:esp_8266_xmas_livingroom_water]
build_flags = ${common.build_flags} -D DEVICE_LIVINGROOM_TREE_WATER_SENSOR -w
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port = kitchensensor.local
; upload_port = 192.168.1.132
upload_port = COM5







[env:esp_8266_devboard_segment]
build_flags = ${common.build_flags} 
                -D DEVICE_RGBSTRING_DEVBOARD_SEGMENT -w
                -D D_USER_MICHAEL
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.1.181
; upload_port = rgb_computer_display_p32
; upload_port = COM33

[env:esp_8266_utility_xmas_shelf]
build_flags = ${common.build_flags} 
                -D DEVICE_RGBSTRING_UTILITY_SHELF -w
                -D D_USER_MICHAEL
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.46
; upload_port = rgb_computer_display_p32
; upload_port = COM5



[env:esp_8266_utility_tree]
build_flags = ${common.build_flags} 
                -D DEVICE_RGBSTRING_DEVBOARD_UTILITY_TREE -w
                -D D_USER_MICHAEL
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.1.181
; upload_port = rgb_computer_display_p32
; upload_port = COM5




[env:esp_8266_bucket_water_level]
build_flags = ${common.build_flags} 
                -D DEVICE_BUCKET_WATER_LEVEL -w
                -D D_USER_MICHAEL
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
monitor_filters = esp8266_exception_decoder
build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.1.158
; upload_port = rgb_computer_display_p32
upload_port = COM5



[env:esp_32_bucket_water_level]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_BUCKET_WATER_LEVEL 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM5
; monitor_speed             = 115200
upload_port = 192.168.0.46
upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_tree_segment]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_RGBSTRING_DEVBOARD_SEGMENT_ESP32 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
;upload_port = COM5
; monitor_speed             = 115200
upload_port = 192.168.1.75
upload_protocol = espota
extra_scripts   = gzip_fw.py


[env:esp_32_outside_tree_segments]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_RGBSTRING_OUTSIDE_TREE_SEGMENTS 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, lib/lib_lighting
lib_deps =
monitor_filters = esp32_exception_decoder, colorize
build_type = debug
upload_port = COM5
; monitor_speed             = 115200
; upload_port = 192.168.1.75
; upload_protocol = espota
; extra_scripts   = gzip_fw.py




[env:esp_32_rgbstring_devboard_segment]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_RGBSTRING_DEVBOARD_SEGMENT
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = 192.168.1.138
; upload_port = COM5
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
upload_protocol = espota





[env:esp_32_testbed_ds18xx]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_DS18XX
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_dbx_test
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
;upload_port = 192.168.1.93
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota



[env:esp_32_testbed_climate_sensor]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_CLIMATE_SENSOR_BREADBOARD
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network
              lib/lib_display
              lib/lib_dbx_test 
              lib/lib_sensor
              lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM19
upload_protocol = espota
upload_port = 192.168.0.180


[env:esp_32_desksensor]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_DESKSENSOR_AS_LONGTERM_TEST_DEVICE
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network
              lib/lib_display
              lib/lib_dbx_test 
              lib/lib_sensor
              lib/lib_lighting
              lib/lib_irremote
lib_deps =
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = COM5
upload_protocol = espota
upload_port = 192.168.0.194


[env:esp_8266_black_stand_light]
build_flags = ${common.build_flags} 
                -D DEVICE_BLACK_STAND_LIGHT -w
                -D D_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.36
; upload_port = testbed_animation_segment_01
; upload_port = COM12





[env:esp_8266_testbed_segments_roof]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_ANIMATION_SEGMENTS_3PIXELS -w
                -D D_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.1.181
; upload_port = testbed_animation_segment_01
upload_port = COM5



[env:esp_32_string_rosebud]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_STRING_ROSEBUD
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota





[env:esp_8266_testbed_segments_4pixel]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_ANIMATION_SEGMENTS_4PIXELS -w
                -D D_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
; upload_port = COM5


[env:esp_8266_testbed_rtc_fastboot]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_RTC_FASTBOOT -w
                -D D_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5



[env:esp_8266_testbed_status_leds]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_STATUS_LEDS -w
                -D D_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5




[env:esp_32_testbed_segments_4pixel]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_ANIMATION_SEGMENTS_4PIXELS
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota

[env:esp_32_testbed_matrix_3p_e131]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_3PIXELS_MATRIX_E131_PROTOCOL
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM19
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota

[env:esp_32_testbed_webui_4pixel]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_ANIMATION_SEGMENTS_4PIXELS_ENABLING_WEBUI
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:esp_8266_testbed_webui_basic_gui]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_WEBUI_BASIC_GUI -w
                -D D_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5


[env:esp_8266_testbed_webui_segments_3pixels]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_WEBUI_ANIMATION_SEGMENTS_3PIXELS -w
                -D D_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5

[env:esp_8266_testbed_webui_4pixel]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_WEBUI_ANIMATION_SEGMENTS_4PIXELS -w
                -D D_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5


[env:esp_8266_dresser_lights]
build_flags = ${common.build_flags} 
                -D DEVICE_MASTERBEDROOM_DRESSER_LIGHTS -w
                -D D_USER_MICHAEL
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.1.179
; upload_port = testbed_animation_segment_01
; upload_port = COM5




[env:esp_8266_bedroom_wallclock_01]
build_flags = ${common.build_flags} 
                -D DEVICE_BEDROOM_WALLCLOCK_01 -w
                -D D_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.174
; upload_port = testbed_animation_segment_01
upload_port = COM5




; [env:esp_8266_testbed_segments_roof]
; build_flags = ${common.build_flags} 
;                 -D DEVICE_TESTBED_ANIMATION_SEGMENTS_3PIXELS -w
;                 -D D_USER_MICHAEL
;                 ;-D USE_BUILD_TYPE_LIGHTING
;                 ;-w
; ; monitor_filters = esp8266_exception_decoder
; ; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.1.181
; ; upload_port = testbed_animation_segment_01
; ; upload_port = COM34




[env:esp_8266_bedroom_cont_button_01]
build_flags = ${common.build_flags} -D DEVICE_BEDROOM_CONTROLLER_BUTTONS_01 -w
                    -D USE_USER_MICHAEL
upload_protocol = espota
extra_scripts             =   gzip_fw.py
upload_port = 192.168.0.55
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = COM9





[env:esp_8266_testbed_motion]
build_flags = ${common.build_flags} -D DEVICE_TESTBED_MOTION -w
                    -D USE_USER_MICHAEL
upload_protocol = espota
extra_scripts             =   gzip_fw.py
upload_port = 192.168.1.18
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = COM5


[env:esp_32_testbed_motion]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_MOTION -D ESP32
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_dbx_test, lib/lib_lighting
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.93
upload_port = COM6
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
upload_protocol = espota



[env:esp_32_testbed_nextion_heating]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_NEXTION_HEATING
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
upload_protocol = espota
upload_port = 192.168.1.36
; upload_port = COM7

[env:esp_32_testbed_nextion_display]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_NEXTION_DISPLAY_GENERIC
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; upload_protocol = espota
; upload_port = 192.168.0.99
upload_port = COM5


[env:esp_32_testbed_nextion_display_web]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_NEXTION_DISPLAY_GENERIC_WITH_WEBUI
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; upload_protocol = espota
; upload_port = 192.168.0.99
upload_port = COM5


[env:esp_32_kitchen_heating_display]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_NEXTION_HEATING_KITCHEN_DISPLAY
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; upload_protocol = espota
; upload_port = 192.168.0.99
upload_port = COM5




[env:esp_8266_socket_numbered_20]
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                 -D DEVICE_SOCKET_NUMBERED 
                                 -D DEVICENAME_SOCKET_NUMBER_CTR=20 -w
                                 -D DISABLE_WEBSERVER
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.1.209
upload_port = COM18


[env:esp_8266_socket_numbered_21]
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                 -D DEVICE_SOCKET_NUMBERED 
                                 -D DEVICENAME_SOCKET_NUMBER_CTR=21 -w
                                 -D DISABLE_WEBSERVER
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.1.209
upload_port = COM18


[env:esp_8266_socket_numbered_22]
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                 -D DEVICE_SOCKET_NUMBERED 
                                 -D DEVICENAME_SOCKET_NUMBER_CTR=22 -w
                                 -D DISABLE_WEBSERVER
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.1.209
upload_port = COM18





[env:esp_32_ambilight_spareroom]
extends = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_AMBILIGHT_SAMSUNG_SPAREROOM
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
                            lib/lib_energy
; build_flags             = ${common32.build_flags} -D DEVICE_CONSUMERUNIT  -Wcpp -w
; ; -w -Wl,-u,vfprintf -lprintf_flt -lm
; lib_extra_dirs          = lib/libesp32, lib/libesp32/network, lib/lib_network, lib/lib_basic, lib/lib_energy
; lib_deps =
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
;DEVICE_CONSUMERUNIT
; upload_port = COM15
upload_port = 192.168.0.78
; upload_port = 192.168.1.137
upload_protocol = espota
; extra_scripts   = gzip_fw.py
; platform_packages =
;     toolchain-xtensa32 @ 2.80200.200226
;     framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#idf-release/v4.0



[env:esp_8266_inside_bedroom_wardrobe]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_H801_INSIDE_BEDROOM_WARDROBE -w
                                -D D_USER_MICHAEL
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port = h801_sunlight_2
upload_port = 192.168.0.222
; upload_port=COM18
; monitor_filters = esp8266_exception_decoder
; build_type = debug



[env:esp_8266_testbed_4chpro]
; platform                  = ${common.platform}
build_flags               = ${core_2_6_1_1m.build_flags} -w
                              -D DEVICE_TESTBED_SONOFF_4CHPRO
                              -D DISABLE_WEBSERVER
lib_extra_dirs              = ${library.lib_extra_dirs}
                              lib/lib_rf
; board = esp01_1m
upload_port = 192.168.0.245
upload_protocol = espota
extra_scripts   = gzip_fw.py
; upload_port = COM18




[env:esp_8266_gazebo_sonoff_4chpro]
; platform                  = ${common.platform}
build_flags               = ${core_2_6_1_1m.build_flags} -w
                              -D DEVICE_GAZEBO_SONOFF_4CHPRO
                              -D DISABLE_WEBSERVER
lib_extra_dirs              = ${library.lib_extra_dirs}
                              lib/lib_rf
; board = esp01_1m
upload_port = 192.168.0.209
upload_protocol = espota
extra_scripts   = gzip_fw.py
; upload_port = COM18



                            


