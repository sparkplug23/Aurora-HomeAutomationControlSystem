; ***  Example PlatformIO Project Configuration Override File   ***
; ***  Changes done here override settings in platformio.ini    ***
;
; *****************************************************************
; ***  to activate rename this file to platformio_override.ini  ***
; *****************************************************************

; pio boards espresif32 ## this is the command to get the list of boards
;
; Please visit documentation for the options and examples
; http://docs.platformio.org/en/stable/projectconf.html

[platformio]

; platformio device monitor --port COM10

; *** Build/upload environment
default_envs =
; *** Uncomment the line(s) below to select version(s)

    ; devflash_esp8266_lowspace

    ;;; Home Long Term (only active devices) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Hallway / UnderStairs
    ; wh_radfan
    ; wh_dhall
    ; wh_socket_15
    ; wh_hvac_home
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Landing
    ; wh_dimland
    ; wh_immerson_cont
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TV/Spare Room    
    ; wh_dimmer_tvroom
    ; wh_tvroom_uplights
    ; wh_ambilight_spareroom
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Ensuite
    ; wh_ensuite_sensor
    ; wh_ceiling_ensuite
    ; wh_ensuite_fan
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Master Bedroom
    ; wh_ceiling_mbedroom
    ; ; whitehall_masterbedroomsensor    ;; not yet created
    ; wh_hvac_masterbedroom
    ; wh_dresser_lights
    ; wh_mbedroom_lamp1
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Kitchen
    ; wh_kitsen
    ; wh_kitchenlight1
    ; wh_kitchenlight2
    ; wh_kitchenlight3
    ; wh_kitchenlight4
    ; wh_cooker_fan
    ; wh_rgbcooker
    ; wh_rgbfridge 
    ; wh_rgbglassbox
    ; wh_rgbshelf
    ; nextion_kitchen
    ; wh_hvac_kitchen
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Utility
    ; wh_utilsens
    ; wh_rgbutility
    ; wh_rgblamp_cylinder
    ; wh_utility_i4
    ; tasmota32solo1
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Livingroom
    ; wh_livingroom_lamp1
    ; wh_livingroom_lamp2
    ; wh_livingroomsensor
    ; wh_rgbfireplace
    ; whitehall_dimmer_living_lamp1
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Garage 
    ; wh_oiltank
    ; wh_oilfurnace
    ; wh_garagelight
    ; wh_garage_transceiver
    ; wh_dim_garagespot
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Gazebo
    ; wh_gazebo_4chpro
    ; wh_gazebosensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Outside
    ; wh_sidelight
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Bathroom
    ; wh_bathroom_sensor
    ; wt_portable_sensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Downstairs Toilet
    ; wh_consumerunit
    wh_consumerunit_25
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Attic
    ; wh_atticsensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Bedroom 
    ; wh_bedroomsensor
    ; wh_ceilingfan
    ; wh_dimbrc
    ; tb_dimtest
    ; wh_clockbed
    ; wh_broom_louv_hub
    ; wh_dr0
    ; wt_bedroom_rgbdisplay
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Wireless/Roaming
    ; wh_airpurifier
    ; wh_floorfan1
    ; wh_floorfan2
    ; wh_floorfan3
    ; wh_floorfan4
    ; wh_floorfan5
    ; wh_floorfan6 # unused, but flashing while 5 is done
    ; wh_sonoff_number_01
    ; wh_sonoff_number_02
    ; wh_sonoff_number_05
    ; wh_sonoff_number_06
    ; wh_sonoff_number_07
    ; wh_sonoff_number_08
    ; wh_sonoff_number_09
    ; wh_sonoff_number_12
    ; wh_sonoff_number_16
    ; wh_sonoff_number_20
    ; wh_sonoff_number_21
    ; wh_sonoff_number_22
    ; wh_sonoff_number_23
    ; wh_sonoff_number_24
    ;;;;;;;new 2024 devices ;;; 50+ are now esp32 devices
    ; wh_sonoff_number32c3_50
    ; wh_sonoff_number_101
    ; wh_sonoff_number_26
    ; wh_sonoff_number_27
    ; wh_sonoff_number_28

    ;;; Home Temporary Devices           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; wht_br_but
    ; wht_black_stand
    ; wht_bedroom_bedlight
    ; wht_computer_u25
    ; wht_computer_p32
    ; wht_display_outbedroom
    ; wht_bedr_wardrobe
    
    ; wt_desksensor
    ; tb_camera_sensor
    ; tb_testbed_sr04
    ; wt_webserver_esp82

    ; wht_bedroom_desk
    ; wht_rgb_glassheart
    ; wh_clock_tv

    ; wh_hvac_oil_heater
    ; wh_hvac_broom_hairdryer

    ; wh_rgbdis_weight
    ; tb_esp32_sim800l
    ; tb_esp32_buzzer
    ; wh_mbedroom_wardrobe
    ; tb_h801v2_2023


    ;;;;2023 active dev list
    ; tb_esp32_sim7000g
    ; tb_esp32_sim7000g_v2
    ; tb_cellular_locator_02
    ; tb_mavlink_decoder
    ; tb_mavlink_telemetry_wifi
    ; tb_mavlink_flightready_cellular_01

    ;;;;;;;                                         Making the neopixel code working with multipin
    ; tb_neopixel_multipin
    ; tb_multi_h801
    ;;;                                             Standard esp32 for multiple mqtt brokers
    ; tb_mqtt_multiple_01


    ;;;                                             Built locator sealed sim1
    ; tb_multi_cellular_locator_01

    ;;;                                             Quad MAVLink flying sim2
    ; tb_mavlink_decoder_cellular_01
    ; tb_multi_cellular_locator_02

    ;;;;;                                           LIPO split, currently on planes
    ; tb_multi_cellular_locator_03

    ; tb_cellular2024__gps_locator_9000G_01                 ; with battery, ground tracker
    ; tb_cellular2024__gps_locator_9000G_02                 ; no battery, aircraft tracker
    ; tb_cellular2024__gps_locator_800L_03              ; 800L to try smaller modem with GPS seperated
    ; ht_tinygsm_polling


    ;;;;;                                           Testing improvements in LTE mqtt on standard mqtt to keep integration working
    ; tb_multi_cellular_locator_04

    ;;;;;
    ; tb_nextion_7inch
    ; tb_nextion_treadmill_01
    ; tb_nextion_treadmill_02
    ; nextion_kitchen_tb

    ; wh_prusa_heater

    ; dev_treadmill_power

    ; dev_matrix

    ; tmp_lgt__hyperion_samsung_65inch

    ;;; Active Development               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; hvac_desk
    ; tb_nextion_10inch
    ; dev_desksensor
    ; dev_night_flight
    ; rel_night_flight
    ; tb_ultrasonic
    ; tmp_lgt__matSegs
    ; ad_door_light_office
    ; ad_hallway_flowers
    ; dev_gps_serial
    ; ad_swt_and_but
    ; tb_desk_sensor

    ;;; Example/Template Devices                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; tb_validation_nextion

 
    ;;; Example/Template Devices                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; ex_radio_rx

    ;;; Development Devices              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; tb_webcam_v4
    ; tb_webcam_arduino
    ; tb_neopixel_notifications
    ; tb_rgbclock_testclock
    ; tb_settings_storage
    ; tb_filesystem


    ;;; Development TestGroups           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    
    
    ;;;; testgroup_lighting_multipin ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; tg_multipin_h801_5white
    ; tg_multipin_h801_splitrgbcct
    ; tg_multipin_e32_2neopins
    ;;;; testgroup_somthinglese ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; tg_multipin_h801_5white
    ; tg_multipin_h801_splitrgbcct
    ; tg_multipin_e32_2neopins
    
    
    ;;; TestGroup: Lighting           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;; - add these, and only these into the header TestGroup, any lights based on them should be in the normal files ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    
    ;;;;;;;;;;;; ESP32 ;;;;;;;;;;;;;;;;
    ; tg_lgt__01_esp32_1pin             ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__01__ESP32_1CH                               ; original, no parallel
    ; tg_lgt__02_esp32_4pin             ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__02__ESP32_PARALLEL_4CH                      ; garage (100 x4) - this could become the garden lights for a practical test                     
    ; tg_lgt__03_esp32_8pin             ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__03__ESP32_PARALLEL_8CH                      ; garage (100 x8)                         
    ; tg_lgt__04_esp32_16pin            ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__04__ESP32_PARALLEL_16CH                     ; garage (100 x16)                        
    ; tg_lgt__05_esp32_4pin             ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__05__ESP32_PARALLEL_4CH_VARIED_BUSTYPE       ; varied strings (ws2812, sk6812)
    ; tg_lgt__06_esp32_ws2805           ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__06__ESP32_1CH_WS2805_3X                     ; new RGBCCT 3X 12V pixels
    ; tg_lgt__07_esp32_7segclock        ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__07__ESP32_1CH_7SEGMENTCLOCK                 ; ESP32 testing 3D printed 7 segment clock  -- make one for the garage as the tester, not the bedroom
    ; tg_lgt__08_esp32_giveaway_noweb   ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__08__ESP32_1CH_NOWEBUI                       ; ESP32 - Single Bus - Single Segment - 100 rgb leds 
    ; tg_lgt__09_esp32_1pin_playlists   ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__09__ESP32_1CH_PLAYLISTS                     ; Built for developing and testing playlists for use on outside tree etc
    ; tg_lgt__10_esp32_effects_ring     ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__10__ESP32_EFFECTS_SERIAL_RING                     ; Built for developing and testing playlists for use on outside tree etc
    ; tg_lgt__11_esp32_effects_16grid   ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__11__ESP32_EFFECTS_16SEGMENTS_ON_GRID
    ; tg_lgt__12_esp32_32bit_wrgb       ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__12__ESP32_32BIT_WRGB_TIME_OPTIMISE
    ; tg_lgt__13_esp32_32bit_rgbcct     ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__13__ESP32_32BIT_RGBCCT_TIME_OPTIMISE
    ; tg_lgt__14_esp32_giveaway_apmode  ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__14__ESP32_FULL_AP_MODE                      ; ESP32 - Single Bus - Single Segment - 100 rgb leds 
    
    ; tg_lgt__20_esp32_matrix_16x16     ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__20__ESP32_1CH_MATRIX_16X16                  ; ESP32 testing 16x16 matrix
    ; tg_lgt__21_esp32_matrix_32x8      ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__21__ESP32_1CH_MATRIX_32X8                   ; ESP32 testing 32x8 matrix
    ; tg_lgt__22_esp32_matrix_python    ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__22__ESP32_4CH_MATRIX_PYTHON_MANUAL_ROWS                   ; ESP32 testing 32x8 matrix
    
    ; tg_lgt__30_h321_rgbcct            ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__30__ESP32_PWM_RGBCCT_5CH_RGBCCT              ; under desk, with ws2805
    ; tg_lgt__31_h321_2cct              ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__31__ESP32_PWM_RGBCCT_2x2CH_WHITE_CHANNELS   ; For testing the dual white channels
    ; tg_lgt__32_h321_5w                ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__32__ESP32_PWM_RGBCCT_5x1CH_WHITE_CHANNELS   ; For testing single white channels
    
    ; tg_lgt__41_esp32_4pin_dev         ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__41__ESP32_PARALLEL_4CH_DEV                  ; desk/wall testbed (10 leds per channel) 
    ; tg_lgt__42_h321_rgbcct_dev        ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__42__ESP32_PWM_RGBCCT_5CH_RGBWW_DEV          ; Desk/under Testbed - do sun elevation white control

    ;;;;;;;;;;;; ESP8266 ;;;;;;;;;;;;;;;;
    ; tg_lgt__50_esp82_1pin             ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__50__ESP82_1CH                               ; ESP8266 - Single Bus - Single Segment - 100 rgb leds
    ; tg_lgt__51_esp82_1pin_noweb       ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__51__ESP82_1CH_NOWEB                         ; ESP8266 - Single Bus - Single Segment - 100 rgb leds
    ; tg_lgt__52_h801_rgbcct            ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__52__ESP82_H801_5CH_PWM_RGBCCT               ; normal H801
    ; tg_lgt__53_esp82_low_memory       ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__53__ESP82_LOW_MEMORY                        ; for developing the lighting module with low memory, this will enable it to be used in complex systems with many other modules
    ; tg_lgt__54_minimal_ota_midstage     ; DEVICE_TESTGROUP__LIGHTING_EFFECTS__54__ESP82_MINIMAL_OTA_MIDSTAGE              ; for developing the lighting module with low memory, this will enable it to be used in complex systems with many other modules

    ;;; TestGroup: HVAC           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;; - HVAC controllers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    
    ; tg_hvac_oil_rad01
    
    ;;; TestGroup: PZEM           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;; - PZEM controllers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    
    ; tg_pzem_socket_energy01
    
    ;;; TestGroup: Cellular           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;; - Devices with a modem connection ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    
    ; tg_cellular_800L_office_testbed

    ;;; built using TemplateGroup: Built using templates           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    
    ; tg_lgt__02_esp32_4pin__1000led_tester
    ; tg_lgt__70_esp32_4pin__4output_triple  ;; Garage 3 multiconnector tester, 1X 1000 output.
    ; tg_lgt__07_esp32__treadmill_tester

    ; tb_xiao_camera

    ;;; Christmas 2023: Garage Lighting           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; xmas23_kitchen_shelf
 
    ; xmas23_outsidetree
    ; xmas23_outsidetree_debug

    ; xmas23_snowtree
    ; xmas23_outside_wreath ; shimmer would look great
    
    ; xmas23_bauble4pin
    ; xmas23_redgive_nonetwork

    ; xmas23_utilityshelf
    ; xmas23_frontsnowtree

    ; xm_water

    ;;; Christmas 2024: Testing           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  


    ;;;;;;;; ATTIC with lights attached
    ; xmas24__final__4x_green
    ; xmas24__final__8x_red
    ; xmas24__final__16x_snow_tree
    ; xmas24__final__8x_outside_tree
    ; xmas24__final__16x_outside_tree
    ; tb_xmas24__final__16x_outside_tree
        ; xmas24__final__4x_sidedoor_wreath
        ; xmas24__final__snow_silver
    ; xmas24__final__16x_sidedoor_tree
    ; xmas24_water

    ;;add rgbcct ws2805 on the bed, top of it, facing upwards as uplights.
    ;; better would be against the wall but maybe not going to wake me.

    ;;;;;;;; All desk tests, ie no lights attached
    ; xmas24_tb__outtree_x8
    ; xmas24_tb__outtree_x16_01
    ; xmas24_tb__outtree_x16_02
    ; xmas24_tb__snow8ft_x16
    ; xmas23_tb__outtree_x8_sweep ; test hung lights using 2023 hardware

    ;;; Christmas 2024: Final           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; xmas24_rl__outtree_x8
    ; xmas24_rl__outtree_x16


    ;;; Colorado 2024           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

    ; xmas24__colorado__redboard_01
    ; xmas24__colorado__redboard_02
    ; xmas24__colorado__ring_01
    ; co24_swt_and_but
    ; xmas24__colorado__string_01
    ; xmas24__colorado__string_02
    ; xmas24__colorado__string_03
    ; xmas24__colorado__string_04
    ; xmas24__colorado__string_05
    ; xmas24__colorado__string_06
    ; xmas24__colorado__redboard_01_matrix


    ;;; Unsorted Devices To Be Phased Out              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  



[common]
platform_packages           = ${core.platform_packages}
build_unflags               = ${core.build_unflags}
build_flags                 = ${core.build_flags}

; Build variant 1MB = 1MB firmware no filesystem (default)
;board_build.ldscript        = eagle.flash.1m.ld
; Build variant 2MB = 1MB firmware, +744k OTA, 256k filesystem (Zigbee Bridge, most Shelly devices)
;board_build.ldscript        = eagle.flash.2m256.ld
; Build variant 4MB = 1MB firmware, +1MB OTA, 2MB filesystem (WEMOS D1 Mini, NodeMCU, Sonoff POW)
;board_build.ldscript        = eagle.flash.4m2m.ld
; Build variant 16MB = 1MB firmware, +1MB OTA, 14MB filesystem (WEMOS D1 Mini pro, Ledunia (=32MB))
;board_build.ldscript        = eagle.flash.16m14m.ld

; set CPU frequency to 80MHz (default) or 160MHz
;board_build.f_cpu           = 160000000L

; set Flash chip frequency to 40MHz (default), 20MHz, 26Mhz, 80Mhz
;board_build.f_flash         = 20000000L
;board_build.f_flash         = 26000000L
;board_build.f_flash         = 80000000L

; *** Upload Serial reset method for Wemos and NodeMCU
upload_port                 = COM5

extra_scripts               = ${scripts_defaults.extra_scripts}
;                              pio-tools/obj-dump.py
                            pio/strip-floats.py
                            pio/name-firmware.py
                            ; pio/gzip-firmware.py
                            gzip_fw.py
                            pio/override_copy.py

lib_extra_dirs              = ${library.lib_extra_dirs}
[core]
; Activate only (one set) if you want to override the standard core defined in platformio.ini !!!

;platform_packages           = ${core_stage.platform_packages}
;build_unflags               = ${core_stage.build_unflags}
;build_flags                 = ${core_stage.build_flags}

[core_stage]
; *** Esp8266 core for Arduino version stage
platform_packages           = framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git
; *** Use Xtensa build chain 10.2. GNU13 from https://github.com/earlephilhower/esp-quick-toolchain
                              mcspr/toolchain-xtensa @ 5.100200.201223
build_unflags               = ${esp_defaults.build_unflags}
                              -Wswitch-unreachable
build_flags                 = ${esp82xx_defaults.build_flags}
; *** Use ONE of the two PWM variants. Tasmota default is Locked PWM
                              ;-DWAVEFORM_LOCKED_PHASE
                              -DWAVEFORM_LOCKED_PWM
                              -Wno-switch-unreachable

[common32]
framework                   = ${common.framework}
platform                    = ${core32.platform}
platform_packages           = ${core32.platform_packages}
build_unflags               = ${core32.build_unflags}
build_flags                 = ${core32.build_flags}
board_build.filesystem      = littlefs
custom_unpack_dir           = unpacked_littlefs
upload_port                 = COM4
lib_extra_dirs              = ${library.lib_extra_dirs}
                            lib/lib_custom
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor                          
                            lib/lib_custom
                            lib/lib_wled32
                            lib/lib_custom
                            lib/lib_neopixel_june24_ws2805
                            lib/lib_i2c
                            lib/lib_energy
                            lib/lib_nextion_esp32_web
                            lib/lib_default

; [core32]
; ; Activate Stage Core32 by removing ";" in next 3 lines, if you want to override the standard core32
; ; platform_packages           = ${core32_stage.platform_packages}
; ; build_unflags               = ${core32_stage.build_unflags}
; ; build_flags                 = ${core32_stage.build_flags}

; [core32_stage]
; platform_packages           = framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git
;                               platformio/tool-mklittlefs @ ~1.203.200522
; build_unflags               = ${esp32_defaults.build_unflags}
; build_flags                 = ${esp32_defaults.build_flags}
;                               -DESP32_STAGE=true

; this is the working "core32"
[core32]
platform                    = espressif32@3.5.0
;@ 3.2.0
platform_packages           = 
;platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}

[library]
shared_libdeps_dir          = lib
; *** Library disable / enable for variant Tasmota(32). Disable reduces compile time
; *** !!! Disabling needed libs will generate compile errors !!!
; *** The resulting firmware will NOT be different if you leave all libs enabled
; *** Disabling by putting a ";" in front of the lib name
; *** If you dont know what it is all about, do not change
lib_extra_dirs              =
; ; *** Only disabled for Tasmota minimal and Tasmota light. For all other variants needed!
;                               lib/lib_basic
; ; **** I2C devices. Most sensors. Disable only if you dont have ANY I2C device enabled
;                               lib/lib_i2c
; ; *** Displays. Disable if you dont have any Display activated
;                               lib/lib_display
; ; *** Bear SSL and base64. Disable if you dont have SSL or TLS activated
;                               lib/lib_ssl
; ; *** Audio needs a lot of time to compile. Mostly not used functions. Recommended to disable
;                               lib/lib_audio
; ; *** RF 433 stuff (not RF Bridge). Recommended to disable
;                               lib/lib_rf
; ; *** Mostly not used functions. Recommended to disable
;                               lib/lib_div
                            lib/libesp8266/network 
                            lib/lib_network 
                            
                            lib/lib_basic      
                            lib/lib_custom
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor
                            
                            lib/lib_custom
                            lib/lib_wled32
                            lib/lib_custom
                            lib/lib_neopixel_june24_ws2805
                            lib/lib_i2c
                            lib/lib_energy
                            lib/lib_nextion_esp32_web
                            lib/lib_default

; *** EXPERIMENTAL Tasmota version for ESP32solo1 (used in some Xiaomi devices)
[env:tasmota32solo1]
extends                     = env:tasmota32_base
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/raw/framework-arduinoespressif32/framework-arduinoespressif32-release_v3.3-solo1-bd65eb8d1.tar.gz
                              platformio/tool-mklittlefs @ ~1.203.200522
                              platformio/tool-esptoolpy @ ~1.30000.0
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common32.build_flags}

; *** EXPERIMENTAL Tasmota version for ESP32-S2
[env:tasmota32s2]
extends                     = env:tasmota32_base
board                       = esp32s2
board_build.flash_mode      = qio
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/v.2.0.0.pre/framework-arduinoespressif32-master-cf457d412.tar.gz
                              platformio/tool-mklittlefs @ ~1.203.200522
                              platformio/tool-esptoolpy @ ~1.30000.0
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common32.build_flags} -DFIRMWARE_LITE
lib_extra_dirs              = lib/libesp32
lib_ignore                  =
    NimBLE-Arduino
    Micro-RTSP
    ESP32-HomeKit


; *** EXPERIMENTAL Tasmota version for ESP32-C3
[env:tasmota32c3]
extends                     = env:tasmota32_base
board                       = esp32c3
platform                    = https://github.com/Jason2866/platform-espressif32.git#feature/arduino-c3
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/esp32-arduino-lib-builder/releases/download/v.2.0.0.pre/framework-arduinoespressif32-master-cf457d412.tar.gz
                              ; needed toolchain for Windows
                              toolchain-riscv32 @ https://github.com/Jason2866/platform-espressif32/releases/download/8.4.0/riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-win32.zip
                              ; needed toolchain for Linux
                              ;toolchain-riscv32 @ https://github.com/Jason2866/platform-espressif32/releases/download/8.4.0/riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-linux-amd64.tar.gz
                              ; needed toolchain for MacOS
                              ;toolchain-riscv32 @ https://github.com/Jason2866/platform-espressif32/releases/download/8.4.0/riscv32-esp-elf-gcc8_4_0-crosstool-ng-1.24.0-123-g64eb9ff-macos.tar.gz
                              platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags} -mtarget-align
build_flags                 = ${esp32_defaults.build_flags} -DFIRMWARE_LITE
                              ;-DESP32_STAGE=true
lib_extra_dirs              = lib/libesp32
lib_ignore                  =
    NimBLE-Arduino
    Micro-RTSP

; *** EXPERIMENTAL Tasmota version for Arduino ESP32 IDF4.4. Linking not working.
[env:tasmota32idf4]
extends                     = env:tasmota32_base
platform                    = https://github.com/Jason2866/platform-espressif32.git#feature/arduino-idf-v4.4
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/arduino-esp32/releases/download/esp32-2.0.0-pre/esp32-2.0.0-pre.zip
                              platformio/tool-mklittlefs @ ~1.203.200522
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                              ;-DESP32_STAGE=true

; *** Debug version used for PlatformIO Home Project Inspection
[env:tasmota-debug]
build_type                  = debug
build_unflags               = ${esp_defaults.build_unflags}
build_flags                 = ${esp82xx_defaults.build_flags}
;                              -Wstack-usage=300
                                    -D DEVI CE_RGBDESK  
                                    -w 

[env:tasmota32-debug]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
;                              -Wstack-usage=300

[env:hacs32-debug]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
;                              -Wstack-usage=300
                                    -D DEVICE_SDLOGGER1_TESTER
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network


[env:testbed_shelly2p5]
extends = env:whitehall_82
platform                  = ${core_2_6_1_1m.platform}
build_flags               = ${core_2_6_1_1m.build_flags}
                                 -D DEVICE_TESTBED_SHELLY_2P5 
                                 -w
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.0.242
upload_port = COM18

    


[env:hacs32_webcam1]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM1
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
upload_port = COM5



[env:hacs32_webcam2]
extends                     = env:tasmota32_base
; build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM2
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_gps
                            lib/libesp32/network
                            lib/lib_network
board = esp32cam
upload_port = COM8
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = 192.168.1.114


[env:hacs32_webcam3]
extends                     = env:tasmota32_base
; build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM3
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            ; lib/lib_gps
                            ; lib/libesp32/network
                            ; lib/lib_network
                            ; lib/libesp32/esp32-camera
board = esp32cam
upload_port = COM28
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = 192.168.1.114

[env:hacs32_webcam4]
extends                     = env:tasmota32_base
; build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_ESP32_WEBCAM4
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            ; lib/lib_gps
                            ; lib/libesp32/network
                            ; lib/lib_network
                            lib/libesp32/esp32-camera
                            ; ~/Documents/Arduino/libraries
board = esp32cam
upload_port = COM22
; monitor_filters = esp32_exception_decoder
; build_type = debug
; platform = espressif32
; upload_protocol = espota
; upload_port = 192.168.1.114
; lib_extra_dirs = ~/Documents/Arduino/libraries



[env:hacs82-h801]
build_unflags               = ${esp_defaults.build_unflags}
build_flags                 = ${esp82xx_defaults.build_flags}
                            ; Defining name here allows mdns upload_port to use it
                            ; -D DEVICE_EXAMPLE_H801
                            ; Define the device on the next line (remove ; to enable)
                            ; -D DEVICE_EXAMPLE_H801
; For Serial Uploads (remove ; to enable)
upload_port = COM1
; For OTA Uploads with IP (remove ; to enable)
; upload_protocol = espota
; extra_scripts   =  ${scripts_defaults.extra_scripts} 
;                     gzip_fw.py
; upload_port = 192.168.1.124
; For OTA Uploads with MDNS Name eg DEVICE_EXAMPLE_H801 (remove ; to enable)
; upload_protocol = espota
; extra_scripts   =  ${scripts_defaults.extra_scripts} 
;                     gzip_fw.py
; upload_port = h801_tester



[env:hacs32-bedroom_pzem_tester]
extends                     = env:tasmota32_base
build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_BEDROOM_PZEM_TESTER
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.137
; upload_port = consumerunit.local
upload_port = COM5
monitor_filters = esp32_exception_decoder





[env:esp_32_gpsparser_tester_polling]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_GPSPARSER_TESTER_POLLING -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_gpsparser_tester_interrupt]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_GPSPARSER_TESTER_INTERRUPT -Wcpp -w
lib_extra_dirs          = lib/libesp32, , lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_gps
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM3
; upload_port = 192.168.1.210
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_sdlogger1_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_SDLOGGER1_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, , lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_gps, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM5
upload_port = sdlogger1_tester
; upload_port = 192.168.1.210
upload_protocol = espota
extra_scripts   = gzip_fw.py


[env:esp_32_uart_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_UART_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_uart_gpsnmea_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_UART_GPS_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_uart_gpsubx_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_UART_GPSUBX_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_sdcard_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_SDCARD_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_sdcard_lipo_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_SDCARD_LIPO_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_gps_to_sdcard_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -D DEVICE_GPS_TO_SDCARD_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
; upload_port = 192.168.1.171
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_measurement_system_1_tester]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat
; -D DEVICE_MEASUREMENT_SYSTEM_1 

lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_measurement_system_1]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM5
monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py

[env:esp_32_measurement_calib_system_1]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_rad_imu_sd_logger_1]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_CONTROLLER_SDLOGGER_IMU_RADIATIONPATTERN_UAV 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM18
; monitor_speed             = 115200
; upload_port = 192.168.1.129
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_testbed_ecompass_lsm303d]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_6DOF_ECOMPASS_LSM303D 
                          ; -D ENABLE_BUG_TRACING
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; monitor_speed             = 115200
; upload_port = 192.168.1.129
; upload_protocol = espota
; extra_scripts   = gzip_fw.py





[env:esp_32_testbed_gps_sdcard_logger]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_GPS_SDCARD_LOGGER 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display
lib_deps =
  # RECOMMENDED
  # Accept new functionality in a backwards compatible manner and patches
  ; slashdevin/NeoGPS @ ^4.2.9
;  https://github.com/SlashDevin/NeoHWSerial
;   PaulStoffregen/AltSoftSerial
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM14
monitor_speed             = 115200
; upload_port = 192.168.1.125
; upload_protocol = espota
; extra_scripts   = gzip_fw.py




[env:devbed_hvac_home]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_HVAC_HEATING_DUPLICATE
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
; upload_protocol = espota
; upload_port = heating
; upload_port = 192.168.0.34
upload_port = COM5
; monitor_filters = esp32_exception_decoder
; build_type = debug
    
    



[env:esp_8266_testbed_9axis_gyro]
build_flags = ${common.build_flags} -D DEVICE_TESTBED_9AXIS_GRYO -w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.1.98
upload_port = COM5
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.131



[env:esp_32_testbed_9axis_gyro_mpu9250]
; build_flags = ${common.build_flags} -D DEVICE_TESTBED_9AXIS_GRYO_MPU9250 -w
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_9AXIS_GRYO_MPU9250
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.1.98
; upload_port = COM5
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.131
extra_scripts   = gzip_fw.py
upload_protocol = espota
upload_port = 192.168.1.167



[env:esp_32_testbed_9axis_gyro_gy89]
; build_flags = ${common.build_flags} -D DEVICE_TESTBED_9AXIS_GRYO_MPU9250 -w
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_9AXIS_GRYO_GY89
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
monitor_filters = esp32_exception_decoder
build_type = debug
; upload_port = 192.168.1.98
upload_port = COM31
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.131
; extra_scripts   = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.1.167



[env:esp_32_outsidetree_basic_01]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_BASIC_01
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = 192.168.1.238
; upload_port = outsidetree_01
; upload_port = COM31
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
upload_protocol = espota

[env:esp_32_outsidetree_basic_02]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_BASIC_02
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.238
; upload_port = outsidetree_01
upload_port = COM31
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_protocol = espota


[env:esp_32_outsidetree_debug]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_ESP32_DEBUG
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.238
; upload_port = outsidetree_01
upload_port = COM5
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_protocol = espota

[env:esp_32_outsidetree_advanced_01]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_OUTSIDETREE_CONTROLLER_ADVANCED_01
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.138
upload_port = COM5
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_protocol = espota






[env:esp_8266_devboard_segment]
build_flags = ${common.build_flags} 
                -D DEVICE_RGBSTRING_DEVBOARD_SEGMENT -w
                -D USE_USER_MICHAEL
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.1.181
; upload_port = rgb_computer_display_p32
; upload_port = COM33





[env:esp_32_bucket_water_level]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_BUCKET_WATER_LEVEL 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM5
; monitor_speed             = 115200
upload_port = 192.168.0.46
upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:esp_32_tree_segment]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_RGBSTRING_DEVBOARD_SEGMENT_ESP32 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
;upload_port = COM5
; monitor_speed             = 115200
upload_port = 192.168.1.75
upload_protocol = espota
extra_scripts   = gzip_fw.py


[env:esp_32_outside_tree_segments]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_RGBSTRING_OUTSIDE_TREE_SEGMENTS 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, 
lib_deps =
monitor_filters = esp32_exception_decoder, colorize
build_type = debug
upload_port = COM5
; monitor_speed             = 115200
; upload_port = 192.168.1.75
; upload_protocol = espota
; extra_scripts   = gzip_fw.py







[env:esp_32_testbed_ds18xx]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_DS18XX
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_onewire2023
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
;upload_port = 192.168.1.93
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:esp_32_testbed_bme]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_BME_ESP32
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
;upload_port = 192.168.1.93
upload_port = COM15
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:esp_32_testbed_fona_basic]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_FONA_800L_BASIC
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, lib/lib_cellular
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = 192.168.0.111
; upload_port = COM15
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
upload_protocol = espota


[env:testbed_rcswitch_normal]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_RCSWITCH_NORMAL
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, lib/lib_cellular, lib/lib_rf
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.111
upload_port = COM26
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:testbed_rcs_ext]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_testbed_rcs_ext
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_sensor, lib/lib_cellular, lib/lib_rf_extended
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.111
upload_port = COM6
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:testbed_h801_desk]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_TESTBED_H801_LONGTERM_DESK  -w
lib_extra_dirs = ${common.lib_extra_dirs}
              
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.0.116
; ; upload_port = rgbfridge
upload_protocol = espota
extra_scripts             = gzip_fw.py
upload_port = 192.168.0.53
; upload_port = COM18


[env:testbed_crashreport_esp82]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_TESTBED_CRASHREPORT  -w
lib_extra_dirs = ${common.lib_extra_dirs}
              
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.0.116
; ; upload_port = rgbfridge
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.0.53
upload_port = COM18

[env:testbed_crashreport_esp32]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_TESTBED_CRASHREPORT  -w
lib_extra_dirs = ${common.lib_extra_dirs}
              
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.0.116
; ; upload_port = rgbfridge
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.0.53
upload_port = COM18




[env:testbed_fastboot82]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_TESTBED_FASTBOOT_ESP8266  -w
lib_extra_dirs = ${common.lib_extra_dirs}
              
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = 192.168.0.116
; ; upload_port = rgbfridge
upload_protocol = espota
extra_scripts             = gzip_fw.py
upload_port = 192.168.0.242
; upload_port = COM29




[env:esp_32_testbed_climate_sensor]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_CLIMATE_SENSOR_BREADBOARD
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network
              lib/lib_display
              lib/lib_onewire2023 
              lib/lib_sensor
              
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM19
upload_protocol = espota
upload_port = 192.168.0.180







[env:esp_8266_testbed_segments_roof]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_ANIMATION_SEGMENTS_3PIXELS -w
                -D USE_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.1.181
; upload_port = testbed_animation_segment_01
upload_port = COM5



[env:esp_32_string_rosebud]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_STRING_ROSEBUD
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota





[env:esp_8266_testbed_segments_4pixel]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_ANIMATION_SEGMENTS_4PIXELS -w
                -D USE_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
; upload_port = COM5


[env:esp_8266_testbed_rtc_fastboot]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_RTC_FASTBOOT -w
                -D USE_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5



[env:esp_8266_testbed_status_leds]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_STATUS_LEDS -w
                -D USE_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5




[env:esp_32_testbed_segments_4pixel]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_ANIMATION_SEGMENTS_4PIXELS
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota

[env:esp_32_testbed_matrix_3p_e131]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_3PIXELS_MATRIX_E131_PROTOCOL
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM19
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota

[env:esp_32_testbed_webui_4pixel]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_ANIMATION_SEGMENTS_4PIXELS_ENABLING_WEBUI
; -D DEVICE_MEASUREMENT_SYSTEM_1 
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:esp_8266_testbed_webui_basic_gui]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP8266 -w
                -D USE_USER_MICHAEL
lib_extra_dirs = ${library.lib_extra_dirs}
                 lib/lib_basic
                 lib/lib_network
                 lib/lib_sensor
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_port = 192.168.0.213
; upload_port = testbed_animation_segment_01
upload_port = COM22


[env:t_web8]
extends = env:whitehall_82
build_flags             = ${common.build_flags} 
                            -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP8266
                            -w
lib_extra_dirs = ${library.lib_extra_dirs}
                 lib/lib_basic
                 lib/lib_network
                 lib/lib_sensor
              ; lib/lib_async32
; monitor_filters = esp32_exception_decoder
; build_type = debug
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM5
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota


[env:tb_webserver_esp32_jun23]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32_JUNE23 -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                ; lib/lib_network
                ; lib/lib_async32
                ; lib/lib_network_web
                ; lib/lib_custom
                ; lib/libesp32/network
; upload_protocol = espota
; upload_port = 192.168.0.92
; upload_port = desksensor.local
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM9
;${common32.lib_extra_dirs} 


[env:tb_webserver_esp82_jun23]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP8266_JUNE23 -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5       
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                
                ;  lib/lib_basic
                ;  lib/lib_network
                ;  lib/lib_sensor
                ;  lib/lib_async82
                ;  lib/lib_network_web
                ; lib/lib_custom
extra_scripts             = gzip_fw.py
; upload_protocol = espota
; upload_port = 192.168.0.92
; upload_port = desksensor.local
; monitor_filters = esp8266_exception_decoder
; build_type = debug
upload_port = COM5
;${common32.lib_extra_dirs}    




[env:tb_webui_neo_esp32_jun23]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTBED__LIGHTING_MULTIPIN__ESP32_AS_NEOPIXEL_DUAL_I2S_BUS_WEBUI -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_multipin_esp32_neodual"'
                    -DUSE_LIGHTING_TEMPLATE__PALETTE_TESTING_CEILING
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                
                ; lib/lib_network
                ; lib/lib_async32
                ; lib/lib_network_web
                ; lib/lib_custom
                ; lib/libesp32/network
; upload_protocol = espota
; upload_port = 192.168.0.92
; upload_port = desksensor.local
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM9
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
;${common32.lib_extra_dirs} 


[env:tb_webui_neo2_esp32_jun23]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTBED__LIGHTING_MULTIPIN__ESP32_AS_NEOPIXEL_DUAL_I2S_BUS_WEBUI -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testbed_segment_esp32"'
                    -DUSE_LIGHTING_TEMPLATE__PALETTE_TESTING_METAL
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                
                ; lib/lib_network
                ; lib/lib_async32
                ; lib/lib_network_web
                ; lib/lib_custom
                ; lib/libesp32/network
upload_protocol = espota
; upload_port = 192.168.0.92
upload_port = testbed_segment_esp32.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM9
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
;${common32.lib_extra_dirs} 




[env:ch_bstring]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_RGBSTRING_CHRISTMAS_ESP32_BEDROOM_CEILING_STRING
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
; extends = env:tasmota32_base
; build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/libesp32/network
;                           lib/lib_network_test
; lib_deps =
monitor_filters = esp32_exception_decoder
build_type = debug
; platformio device mon
; upload_port = 192.168.0.242
; upload_port = xmas_outsidetree_tester_blending
upload_port = COM6
; upload_protocol = espota
; upload_port = 192.168.0.230
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota

[env:tb_primary_addlighting32]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_LIGHT_SEGMENT_ESP32__BEDROOM_ROOF
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
; extends = env:tasmota32_base
; build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/libesp32/network
;                           lib/lib_network_test
; lib_deps =
monitor_filters = esp32_exception_decoder
build_type = debug
; platformio device mon
; upload_port = 192.168.0.242
; upload_port = xmas_outsidetree_tester_blending
upload_port = COM6
; upload_protocol = espota
; upload_port = 192.168.0.230
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota



[env:tb_neopixel_multipin]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_LIGHT_SEGMENT_ESP32__MULTIPIN
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              ; lib/lib_neo_april23
              lib/lib_irremote
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_custom
; extends = env:tasmota32_base
; build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/libesp32/network
;                           lib/lib_network_test
; lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; platformio device mon
; upload_port = 192.168.0.162
; upload_port = xmas_outsidetree_tester_blending
upload_port = COM30
; upload_protocol = espota
; upload_port = 192.168.0.162
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota




[env:tb_multi_h801]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTBED_LIGHT_SEGMENT_ESP8266__MULTIPIN_H801 -w
                                -D USE_USER_MICHAEL
lib_extra_dirs              = ${library.lib_extra_dirs}
                              ;  lib/lib_neo_april23
              
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port = h801_sunlight_2
upload_port = 192.168.0.208
; upload_port=COM27
; monitor_filters = esp8266_exception_decoder
; build_type = debug




    ;;; Development Devices           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  





[env:tb_neopixel_notifications]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_LIGHT__NOTIFICATIONS
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              lib/lib_neo_april23
              lib/lib_irremote
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_custom
; extends = env:tasmota32_base
; build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/libesp32/network
;                           lib/lib_network_test
; lib_deps =
monitor_filters = esp32_exception_decoder
build_type = debug
; platformio device mon
; upload_port = 192.168.0.162
; upload_port = xmas_outsidetree_tester_blending
upload_port = COM7
; upload_protocol = espota
; upload_port = 192.168.0.162
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota




[env:tb_esp32_sim7000g]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_LILYGO_SIM7000G
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM33
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py



[env:tb_esp32_sim7000g_v2]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_LILYGO_SIM7000G_V2
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM38
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:tb_cellular_locator_01]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_CELLULAR_LOCATOR_01
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM38
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py

[env:tb_multi_cellular_locator_01]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_CELLULAR_LOCATOR_MULTI_FLASH_01
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_tinygsm
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM17
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:tb_multi_cellular_locator_02]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_CELLULAR_LOCATOR_MULTI_FLASH_02
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM33
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py

[env:tb_multi_cellular_locator_03]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_CELLULAR_LOCATOR_MULTI_FLASH_03
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM49
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py

[env:tb_multi_cellular_locator_04]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_CELLULAR_LOCATOR_MULTI_FLASH_04_MQTT_ON_WIFI
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py




[env:tb_cellular_locator_02]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_LILYGO_SIM7000G_CELLULAR_LOCATOR_02
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM33
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py



[env:tb_cellular2024__gps_locator_9000G_01]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_CELLULAR_LTE__GPS_POSITION_LOCATOR_01__2024
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM13
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py

[env:tb_cellular2024__gps_locator_9000G_02]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_CELLULAR_LTE__GPS_POSITION_LOCATOR_02__ON_SIM9000G_2024
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM27
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:tb_cellular2024__gps_locator_800L_03]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_CELLULAR_LTE__GPS_POSITION_LOCATOR_03__ON_SIM800L_2024
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
              lib/lib_gps
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM13
upload_protocol = espota
upload_port = 192.168.0.218
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


;; Device as HardwareTest that can be used to ensure a device is working.
[env:ht_tinygsm_polling]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_HARDWARE_TESTBED__TINY_GPS_SERIAL
                            -w
                            -Wno-packed-bitfield-compat
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
              lib/lib_gps
; monitor_speed = 921600
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM24
; upload_protocol = espota
; upload_port = 192.168.0.152




[env:tb_mavlink_decoder]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_MAVLINK_DECODER
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM5
; upload_protocol = espota
; upload_port = 192.168.0.242
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:tb_mavlink_decoder_cellular_01]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_MAVLINK_DECODER_LOCATOR_LTE_DOWNLINK_01
                            -w
; monitor_speed = 921600
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM33
; upload_protocol = espota
; upload_port = 192.168.0.197
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:tb_mavlink_flightready_cellular_01]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_MAVLINK_DECODER_LOCATOR_LTE_DOWNLINK_FLIGHTREADY_01
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM33
; upload_protocol = espota
; upload_port = 192.168.0.197
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py



[env:tb_mavlink_telemetry_wifi]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_MAVLINK_TELEMETRY_WIFI_01
                            -w
platform                    = espressif32 @ 3.0.0
platform_packages           = framework-arduinoespressif32 @ https://github.com/Jason2866/arduino-esp32/releases/download/1.0.5-rc6/esp32-1.0.5-rc6.zip
                              platformio/tool-mklittlefs @ ~1.203.200522
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM33
; upload_protocol = espota
; upload_port = 192.168.0.197
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py




[env:tb_esp32_buzzer]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_BUZZER_TONES
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM37
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:tb_esp32_sim800l]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_TESTBED_ESP32_LILYGO_SIM800L
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM37
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py




[env:tb_seg_82]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_TESTBED_LIGHT_SEGMENT_ESP8266__BEDROOM_ROOF
                                     -w
lib_extra_dirs = ${common.lib_extra_dirs}
              
; upload_port = rgbshelf.local
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.0.60
upload_port=COM5
monitor_filters = esp8266_exception_decoder
build_type = debug




[env:tb_h801v2_2023]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_H801__TESTBED_H801V2_2023 -w
                                -D USE_USER_MICHAEL
lib_extra_dirs              = ${library.lib_extra_dirs}
                              
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port = h801_sunlight_2
upload_port = 192.168.0.155
; upload_port=COM27
; monitor_filters = esp8266_exception_decoder
; build_type = debug













[env:tb_rgbdev2]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_RGBSTRING_DEVELOPMENT_NODE2
                            -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              lib/lib_irremote
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
; extends = env:tasmota32_base
; build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/libesp32/network
;                           lib/lib_network_test
; lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; platformio device mon
; upload_port = 192.168.0.242
; upload_port = xmas_outsidetree_tester_blending
; upload_port = COM10
; upload_protocol = espota
; upload_port = 192.168.0.230
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota
;;;;;;;;;;; TV Room ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
upload_port = 192.168.0.235
upload_protocol = espota






[env:esp_8266_testbed_webui_segments_3pixels]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_WEBUI_ANIMATION_SEGMENTS_3PIXELS -w
                -D USE_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5

[env:esp_8266_testbed_webui_4pixel]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_WEBUI_ANIMATION_SEGMENTS_4PIXELS -w
                -D USE_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5


[env:esp_8266_testbed_pixel_heart]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_PIXEL_HEART -w
                -D USE_USER_MICHAEL
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.15
; upload_port = testbed_animation_segment_01
upload_port = COM12


[env:esp_8266_testbed_hardware_bme]
build_flags = ${common.build_flags} 
                -D DEVICE_TESTBED_HARDWARE_BME_ESP8266 -w
                -D USE_USER_MICHAEL
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/lib_sensor
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.199
; upload_port = testbed_animation_segment_01
upload_port = COM5


[env:esp_32_testbed_hardware_bme]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_HARDWARE_BME_ESP32
lib_extra_dirs          = lib/libesp32
                          lib/lib_basic
                          lib/libesp32/network
                          lib/lib_network_test
                          lib/lib_sensor
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.0.174
; upload_port = outsidetree_01
upload_port = COM24
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
; upload_protocol = espota






[env:esp_8266_bedroom_wallclock_01]
build_flags = ${common.build_flags} 
                -D DEVICE_BEDROOM_WALLCLOCK_01 -w
                -D USE_USER_MICHAEL
                ; -D 
                ;-D USE_BUILD_TYPE_LIGHTING
                ;-w
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.0.174
; upload_port = testbed_animation_segment_01
upload_port = COM5




; [env:esp_8266_testbed_segments_roof]
; build_flags = ${common.build_flags} 
;                 -D DEVICE_TESTBED_ANIMATION_SEGMENTS_3PIXELS -w
;                 -D USE_USER_MICHAEL
;                 ;-D USE_BUILD_TYPE_LIGHTING
;                 ;-w
; ; monitor_filters = esp8266_exception_decoder
; ; build_type = debug
; upload_protocol = espota
; extra_scripts   = gzip_fw.py
; upload_port = 192.168.1.181
; ; upload_port = testbed_animation_segment_01
; ; upload_port = COM34





[env:esp_8266_testbed_button_longpress]
build_flags = ${common.build_flags} -D DEVICE_TESTBED_BUTTON_MULTIPRESS -w
                    -D USE_USER_MICHAEL
upload_protocol = espota
extra_scripts             =   gzip_fw.py
upload_port = 192.168.0.166
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = COM5





[env:esp_8266_testbed_motion]
build_flags = ${common.build_flags} -D DEVICE_TESTBED_MOTION -w
                    -D USE_USER_MICHAEL
upload_protocol = espota
extra_scripts             =   gzip_fw.py
upload_port = 192.168.1.18
; monitor_filters = esp8266_exception_decoder
; build_type = debug
; upload_port = COM5


[env:esp_32_testbed_motion]
extends = env:tasmota32_base
build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_MOTION -D ESP32
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_display, lib/lib_onewire2023, 
lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = 192.168.1.93
upload_port = COM6
extra_scripts   = ${scripts_defaults.extra_scripts} 
                  gzip_fw.py
upload_protocol = espota



[env:esp_32_testbed_nextion_heating]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_NEXTION_HEATING
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
upload_protocol = espota
upload_port = 192.168.1.36
; upload_port = COM7

[env:esp_32_testbed_nextion_display]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_NEXTION_DISPLAY_GENERIC
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; upload_protocol = espota
; upload_port = 192.168.0.99
upload_port = COM5


[env:esp_32_testbed_nextion_display_web]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_NEXTION_DISPLAY_GENERIC_WITH_WEBUI
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
; upload_protocol = espota
; upload_port = 192.168.0.99
upload_port = COM5



[env:tb_nextion_7inch]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__NEXTION_DISPLAY__GENERIC_WITH_WEBUI__7INCH
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor
                            
                            lib/lib_nextion_esp32_web
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_wled32
                            lib/lib_custom
                            
; upload_protocol = espota
; upload_port = 192.168.0.189
; upload_port = nextion_desk.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM9




[env:nextion_kitchen]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_INSTALLED__NEXTION_DISPLAY__KITCHEN_7INCH
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor
                            
                            lib/lib_nextion_esp32_web
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_wled32
                            lib/lib_custom
                            
; upload_protocol = espota
; upload_port = 192.168.0.151
; upload_port = nextion_kitchen.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM23


[env:nextion_kitchen_tb]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__NEXTION_DISPLAY__KITCHEN_7INCH
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor
                            
                            lib/lib_nextion_esp32_web
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_wled32
                            lib/lib_custom
                            
                            lib/lib_default
upload_protocol = espota
; upload_port = 192.168.0.151
upload_port = nextion_kitchen_testbed.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM22





[env:tb_nextion_treadmill_01]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__NEXTION_DISPLAY__TREADMILL_01
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor
                            
                            lib/lib_nextion_esp32_web
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_wled32
                            lib/lib_custom
                            
upload_protocol = espota
upload_port = 192.168.0.66
; upload_port = nextion_desk.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM18


[env:tb_nextion_treadmill_02]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__NEXTION_DISPLAY__TREADMILL_02
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            lib/lib_onewire2023 
                            lib/lib_sensor
                            
                            lib/lib_nextion_esp32_web
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_wled32
                            lib/lib_custom
                            
; upload_protocol = espota
; upload_port = 192.168.0.189
; upload_port = nextion_desk.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM20


[env:tb_nextion_10inch]
extends                     = env:tasmota32_base
;build_type                  = debug
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                              -D DEVICE_TESTBED__NEXTION_DISPLAY__GENERIC_WITH_WEBUI__10INCH
                              -D USE_USER_MICHAEL
                              -D ENABLE_LOG_LEVEL_DEBUG
                              -D ENABLE_LOG_LEVEL_DEBUG_MORE
                              -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32
                            lib/lib_basic
                            lib/lib_network
                            lib/lib_display
                            ; lib/lib_onewire2023 
                            lib/lib_sensor                            
                            lib/lib_nextion_esp32_web
                            lib/libesp32
                            lib/lib_basic
                            ; lib/lib_wled32
                            lib/lib_custom                            
                            lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.178
; upload_port = nextion_desk.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM14





[env:esp_8266_socket_numbered_20]
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                 -D DEVICE_SOCKET_NUMBERED 
                                 -D DEVICENAME_SOCKET_NUMBER_CTR=20 -w
                                 -D DISABLE_WEBSERVER
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.1.209
upload_port = COM18


[env:esp_8266_socket_numbered_21]
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                 -D DEVICE_SOCKET_NUMBERED 
                                 -D DEVICENAME_SOCKET_NUMBER_CTR=21 -w
                                 -D DISABLE_WEBSERVER
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.1.209
upload_port = COM18


[env:esp_8266_socket_numbered_22]
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                 -D DEVICE_SOCKET_NUMBERED 
                                 -D DEVICENAME_SOCKET_NUMBER_CTR=22 -w
                                 -D DISABLE_WEBSERVER
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = 192.168.1.209
upload_port = COM18








[env:esp_8266_testbed_h801_pwm_manual]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTBED_H801_PWM_MANUAL -w
                                -D USE_USER_MICHAEL
                                ; for h801 boards
                                -D USE_SERIAL_ALTERNATE_TX
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.153
; upload_port=COM18
; monitor_filters = esp8266_exception_decoder
; build_type = debug

[env:esp_82_tb_h801_sun]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTBED_H801_SUNELEVATION_REACTIVE_PALETTES -w
                                -D USE_USER_MICHAEL
                                ; for h801 boards
                                -D USE_SERIAL_ALTERNATE_TX
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.202
; upload_port=COM18
; monitor_filters = esp8266_exception_decoder
; build_type = debug



[env:esp_8266_testbed_blending_variables]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTBED_BLENDING_VARIABLES -w
                                -D USE_USER_MICHAEL
upload_protocol = espota
extra_scripts   = gzip_fw.py
upload_port = 192.168.0.153
; upload_port=COM5
; monitor_filters = esp8266_exception_decoder
; build_type = debug




[env:esp_8266_testbed_4chpro]
; platform                  = ${common.platform}
build_flags               = ${core_2_6_1_1m.build_flags} -w
                              -D DEVICE_TESTBED_SONOFF_4CHPRO
                              -D DISABLE_WEBSERVER
lib_extra_dirs              = ${library.lib_extra_dirs}
                              lib/lib_rf
; board = esp01_1m
upload_port = 192.168.0.245
upload_protocol = espota
extra_scripts   = gzip_fw.py
; upload_port = COM18





[env:testbed_led_matrix_seg]
extends = env:whitehall_32
build_flags             = ${common32.build_flags} -D DEVICE_LED_MATRIX_SEGMENTS -Wcpp -w
lib_extra_dirs          = lib/libesp32, , lib/lib_basic, lib/libesp32/network, lib/lib_network
; lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug
upload_port = COM26
; upload_port = 192.168.0.109
; upload_protocol = espota
; upload_port = rgbfireplace

                            



[env:esp_8266_shellydimmer_livingroom_ceiling]
build_flags = ${common.build_flags} -D DEVICE_SHELLYDIMMER_LIVINGROOM_CEILING -w
lib_extra_dirs = ${common.lib_extra_dirs}
upload_protocol = espota
; upload_port = 192.168.1.94
extra_scripts   =  gzip_fw.py
upload_port = COM20


[env:esp_8266_atticsensor]
build_flags = ${common.build_flags} -D DEVICE_ATTICSENSOR -w
upload_port = 192.168.1.180
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port=COM19
; upload_port = livingroomsensor.local




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Bedroom 





[env:tb_dimtest]
extends = env:whitehall_82
build_flags = ${common.build_flags} -D DEVICE_DEFAULT_SHELLY_DIMMER__BEDROOM_GLOBE
                                     -w
lib_extra_dirs = ${common.lib_extra_dirs}
; upload_port = rgbshelf.local
upload_protocol = espota
extra_scripts             = gzip_fw.py
upload_port = 192.168.0.144
; upload_port=COM5
; monitor_filters = esp8266_exception_decoder
; build_type = debug





[env:tb_testbed_sr04]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_SR04
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                              lib/lib_filters
                              lib/lib_onewire2023
                              lib/lib_sensor
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM21
; upload_port = 192.168.0.180
; upload_port = oiltank.local
; upload_protocol = espota



[env:tb_webcam_v4]
extends = env:whitehall_32_no_part
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_WEBCAM4
                                    -w       
                                    -DCORE_DEBUG_LEVEL=5                              
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_ssl, 
                            ; lib/libesp32/esp32-camera
                            lib/libesp32
                            lib/lib_custom
                            ; lib/libesp32/network
                            ; lib\libesp32\ESP32-to-ESP8266-compat                              
; board_build.f_cpu       = 240000000L
board_build.f_cpu       = 240000000L
board = esp32cam
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM52
; upload_port = 192.168.0.165
; upload_port = oiltank.local
; upload_protocol = espota


[env:tb_webcam_arduino]
extends = env:whitehall_32_no_part
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_WEBCAM_ARDUINO
                                    -w       
                                    -DCORE_DEBUG_LEVEL=5                              
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_ssl, 
                            ; lib/libesp32/esp32-camera
                            lib/libesp32
                            lib/lib_custom
                            ; lib/libesp32/network
                            ; lib\libesp32\ESP32-to-ESP8266-compat                              
; board_build.f_cpu       = 240000000L
board_build.f_cpu       = 240000000L
board = esp32cam
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM64
; upload_port = 192.168.0.165
; upload_port = oiltank.local
; upload_protocol = espota



[env:tb_webcam_tasmota]
extends = env:whitehall_32_no_part
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_WEBCAM4
                                    -w       
                                    -DCORE_DEBUG_LEVEL=5                              
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_ssl, 
                            ; lib/libesp32/esp32-camera
                            lib/libesp32
                            lib/lib_custom
                            ; lib/libesp32/network
                            ; lib\libesp32\ESP32-to-ESP8266-compat                              
; board_build.f_cpu       = 240000000L
board_build.f_cpu       = 240000000L
board = esp32cam
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM52
; upload_port = 192.168.0.165
; upload_port = oiltank.local
; upload_protocol = espota



[env:tb_webcam_multiclient]
extends = env:whitehall_32_no_part
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED_WEBCAM4
                                    -w       
                                    -DCORE_DEBUG_LEVEL=5                              
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/lib_ssl, 
                            ; lib/libesp32/esp32-camera
                            lib/libesp32
                            lib/lib_custom
                            ; lib/libesp32/network
                            ; lib\libesp32\ESP32-to-ESP8266-compat                              
; board_build.f_cpu       = 240000000L
board_build.f_cpu       = 240000000L
board = esp32cam
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM52
; upload_port = 192.168.0.165
; upload_port = oiltank.local
; upload_protocol = espota


[env:devflash_esp8266_lowspace]
extends = env:whitehall_82
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TEMPLATE__ESP8266_LOW_MEMORY -w
                                -D USE_USER_MICHAEL
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port = testgroup_lighting_L3.local
upload_port = 192.168.0.88
; upload_port=COM11
; monitor_filters = esp8266_exception_decoder
; build_type = debug



[env:tb_rgbclock_testclock]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_RGBCLOCK__TESTCLOCK -w
                    -D USE_USER_MICHAEL    
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                
; upload_protocol = espota
; upload_port = 192.168.0.161
; upload_port = rgb_computer_display_p32.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM20






    ;;; Development TestGroups           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  



[env:tg_multipin_h801_5white]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_MULTIPIN
                                -D SUBDEVICE_TESTGROUP__LIGHTING_MULTIPIN__H801_AS_FIVE_SINGLE_WHITE_CHANNELS -w
                                -D USE_USER_MICHAEL
lib_extra_dirs              = ${library.lib_extra_dirs}
                              ;  lib/lib_neo_april23
                              
upload_protocol = espota
extra_scripts             = gzip_fw.py
upload_port = testgroup_multipin_h801_5white.local
; upload_port = 192.168.0.202
; upload_port=COM27
; monitor_filters = esp8266_exception_decoder
; build_type = debug


[env:tg_multipin_h801_splitrgbcct]
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_MULTIPIN
                                -D SUBDEVICE_TESTGROUP__LIGHTING_MULTIPIN__H801_AS_RGB_AND_CCT_SPLIT_CHANNELS -w
                                -D USE_USER_MICHAEL
lib_extra_dirs              = ${library.lib_extra_dirs}
                              ;  lib/lib_neo_april23
                              
upload_protocol = espota
extra_scripts             = gzip_fw.py
upload_port = testgroup_multipin_h801_rgbsplitcct.local
; upload_port = 192.168.0.208
; upload_port=COM27
; monitor_filters = esp8266_exception_decoder
; build_type = debug



[env:tg_multipin_e32_2neopins]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                                -D DEVICE_TESTGROUP__LIGHTING_MULTIPIN
                                -D SUBDEVICE_TESTGROUP__LIGHTING_MULTIPIN__ESP32_AS_NEOPIXEL_DUAL_I2S_BUS
                                -w
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              
              ; lib/lib_neo_april23
              lib/lib_irremote
              lib/lib_basic
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_custom
; extends = env:tasmota32_base
; build_flags             = ${esp32_defaults.build_flags} -Wcpp -w -Wconversion -Wpacked-bitfield-compat -D DEVICE_TESTBED_WEBUI_BASIC_GUI_ESP32
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/libesp32/network
;                           lib/lib_network_test
; lib_deps =
; monitor_filters = esp32_exception_decoder
; build_type = debug
; platformio device mon
; upload_port = 192.168.0.162
upload_port = testgroup_multipin_esp32_neodual.local
; upload_port = COM30
upload_protocol = espota




;;; TestGroup: Garage Lighting           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  


[env:tg_lgt__01_esp32_1pin]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__01__ESP32_1CH 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_01"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL01 ESP32-1CH-RGBW Strip#Desk"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
; upload_port = 192.168.0.33
upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM12


[env:tg_lgt__02_esp32_4pin]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__02__ESP32_PARALLEL_4CH 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_02"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL02 ESP32-4CH-1x100LEDS#Garage"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor     
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.27
; upload_port = tg_lighting_02
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM12

[env:tg_lgt__06_esp32_ws2805]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__06__ESP32_1CH_WS2805_3X 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_06"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL06 ESP32-1CH-1x10LEDS#Room"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output;RGBCCT_IC Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          ; lib/lib_neopixel_april23
                          ; lib/lib_neopixel_april23_rgbcctupdated
                          ; lib/lib_neopixel_may24
                          ; lib/lib_neopixel_june24 # may24 code, with april24 "methods" and hence buffers
                          ; lib/lib_neopixel_june24_masterEdits
                          lib/lib_neopixel_june24_ws2805 # may24 code, with april24 "methods" and hence buffers
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota                   
upload_port = 192.168.0.77
; upload_port = tg_lighting_41
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM17


[env:tg_lgt__07_esp32_7segclock]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__07__ESP32_1CH_7SEGMENTCLOCK 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_07"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL07 ESP32-1CH-RGBW Clock#Desk"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Desk"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.152
; upload_port = tg_lighting_07
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM15


[env:tg_lgt__09_esp32_1pin_playlists]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__09__ESP32_1CH_PLAYLISTS 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_09"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL09 ESP32-1CH-RGB Playlists#Office"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Office Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.136
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM46


[env:tg_lgt__10_esp32_effects_ring]
extends = env:whitehall_32
build_flags = ${common32.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__10__ESP32_EFFECTS_SERIAL_RING
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lgt_10_effects_ring"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL10 DeskRing Dev Effects#Office"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Office Tester"'
upload_protocol = espota
upload_port = 192.168.0.148
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM70

[env:tg_lgt__11_esp32_effects_16grid]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__11__ESP32_EFFECTS_16SEGMENTS_ON_GRID 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_10"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL10 ESP32-1CH-RGB Playlists#Office"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Office Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.133
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM49


[env:tg_lgt__11_esp32_outtree_multipin]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__11__ESP32_16CH_OUTSIDE_TREE_MULTIPIN 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_11"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL11 ESP32-1CH-RGB Outside Tree#Outside"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x16 200;Outside"'
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.211
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM50


[env:tg_lgt__41_esp32_4pin_dev]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__41__ESP32_PARALLEL_4CH_DEV 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_41"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL41 ESP32-4CH-4x10LEDS#Room"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.191
; upload_port = tg_lighting_41
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM31



[env:tg_lgt__20_esp32_matrix_16x16]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__20__ESP32_1CH_MATRIX_16X16 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_20"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL20 ESP32-Matrix 16x16#Desk"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor                          
                          lib/lib_custom
                          lib/lib_wled32
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.81
; upload_port = tg_lighting_20
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM26



[env:tg_lgt__21_esp32_matrix_32x8]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__21__ESP32_1CH_MATRIX_32X8 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_21"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL21 ESP32-Matrix 32x8#LightDisplay"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output;LightDisplay"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor                          
                          lib/lib_custom
                          lib/lib_wled32
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.143
; upload_port = tg_lighting_20
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM45




[env:tg_lgt__30_h321_rgbcct]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags} -w
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__30__ESP32_PWM_RGBCCT_5CH_RGBCCT 
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                                -D USE_USER_MICHAEL            
                                '-DDEVICENAME_CTR="tg_lighting_30"'
                                '-DDEVICENAME_FRIENDLY_CTR="TGL30 ESP32-PWM-RGBCCT-5CH-RGBCCT#Room"'
                                '-DDEVICENAME_DESCRIPTION_CTR="ESP32;H321 5PWM Output;Desk Tester"'
lib_extra_dirs          = ${common32.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display 
                          lib/lib_onewire2023 
                          lib/lib_sensor                          
                          lib/lib_custom
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
upload_protocol = espota
; upload_port = tg_lighting_30
upload_port = 192.168.0.105
; upload_port = COM8
; monitor_filters = esp32_exception_decoder
; build_type = debug


    
[env:tg_lgt__51_esp82_1pin_noweb]
extends = env:whitehall_82
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                -w
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__51__ESP82_1CH_NOWEB 
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE_I2S_NO_PARALLEL
                                -D USE_USER_MICHAEL   
                                ; -D DEBUG_FASTBOOT         
                                '-DDEVICENAME_CTR="tg_lighting_51"'
                                '-DDEVICENAME_FRIENDLY_CTR="TGL51 ESP82 1CH#Desk"'
                                '-DDEVICENAME_DESCRIPTION_CTR="ESP32;H321 5PWM Output;Desk Tester"'
                                -Os
lib_extra_dirs          = ${common.lib_extra_dirs}
                          lib/lib_basic
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_default
extra_scripts             = gzip_fw.py
upload_protocol = espota
; upload_port = tg_lighting_51
upload_port = 192.168.0.211
; upload_port = COM24
; monitor_filters = esp8266_exception_decoder
; build_type = debug


[env:tg_lgt__52_h801_rgbcct]
extends = env:whitehall_82
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                -w
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__52__ESP82_H801_5CH_PWM_RGBCCT 
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                                -D USE_USER_MICHAEL            
                                '-DDEVICENAME_CTR="tg_lighting_52"'
                                '-DDEVICENAME_FRIENDLY_CTR="TGL52 ESP32-PWM-RGBCCT-5CH-RGBCCT#Room"'
                                '-DDEVICENAME_DESCRIPTION_CTR="ESP32;H321 5PWM Output;Desk Tester"'
lib_extra_dirs          = ${common.lib_extra_dirs}              
                          ; lib/libesp32
                          lib/lib_basic
                          ; lib/lib_network
                          lib/lib_display 
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          ; lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
upload_protocol = espota
; upload_port = tg_lighting_52
; upload_port = 192.168.0.105
upload_port = COM8
; monitor_filters = esp32_exception_decoder
; build_type = debug



[env:tg_lgt__54_minimal_ota_midstage]
extends = env:whitehall_82
platform                  = ${common.platform}
build_flags               = ${common.build_flags}
                                -w
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__54__ESP82_MINIMAL_OTA_MIDSTAGE
                                -D USE_USER_MICHAEL            
                                '-DDEVICENAME_CTR="tg_lighting_52"'
                                '-DDEVICENAME_FRIENDLY_CTR="TGL52 ESP32-PWM-RGBCCT-5CH-RGBCCT#Room"'
                                '-DDEVICENAME_DESCRIPTION_CTR="ESP32;H321 5PWM Output;Desk Tester"'
lib_extra_dirs          = ${common.lib_extra_dirs} 
                          lib/lib_default
extra_scripts             = gzip_fw.py
upload_protocol = espota
; upload_port = tg_lighting_52
upload_port = 192.168.0.215
; upload_port = COM13
; monitor_filters = esp32_exception_decoder
; build_type = debug




;;; Built Using TestGroup: Lighting           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  


[env:tg_lgt__02_esp32_4pin__1000led_tester]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__02__ESP32_PARALLEL_4CH__1000LEDS_REDBOARD
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE2 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="dg_lighting_02"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL02 ESP32-4CH-1x100LEDS#Garage"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.174
; upload_port = dg_lighting_02
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM18





[env:tg_lgt__07_esp32__treadmill_tester]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__07__ESP32_TREADMILL_STOPWATCH
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE2 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="treadmill_stopwatch"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL02 ESP32-4CH-1x100LEDS#Garage"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.147
; upload_port = dg_lighting_02
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM18


; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE
; -------------------------------------------------------------------------------SORT ALL LIGHTING TESTGROUPS BELOW THIS LINE

[env:tg_lgt__70_esp32_4pin__4output_triple]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__70__ESP32_PARALLEL_4CH_TRIPLE_CONNECTOR_TESTER 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE_I2S_NO_PARALLEL
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_70"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL70 ESP32-4CH-Hardware Test#Testbed"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Testbed"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor     
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.122
; upload_port = tg_lighting_02
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM12





[env:tg_lighting_eff_L3]
extends = env:whitehall_82
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L3__ESP8266_1CH_RGB_100LEDS -w
                                '-DDEVICENAME_CTR="testgroup_lighting_L3"'
                                -D USE_USER_MICHAEL
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
; extra_scripts             = gzip_fw.py
; upload_protocol = espota
; upload_port = testgroup_lighting_L3.local
; upload_port = 
; build_type = debug
; monitor_filters = esp8266_exception_decoder
upload_port=COM19




[env:tg_lighting_eff_L4]
extends = env:whitehall_82
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L4__H801_5CH_PWM_RGBCCT -w
                                '-DDEVICENAME_CTR="testgroup_lighting_L4"'
                                -D USE_USER_MICHAEL
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                
upload_protocol = espota
extra_scripts             = gzip_fw.py
; upload_port = testgroup_lighting_L4.local
upload_port = 192.168.0.88
; upload_port=COM11
; monitor_filters = esp8266_exception_decoder
; build_type = debug


[env:tg_lighting_eff_L5]
extends = env:whitehall_82
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L5__H801_3CHRGB_AND_2CHCW -w
                                '-DDEVICENAME_CTR="testgroup_lighting_L5"'
                                -D USE_USER_MICHAEL
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                
extra_scripts             = gzip_fw.py
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = testgroup_multipin_h801_rgbsplitcct.local
; upload_port = 192.168.0.208
upload_port=COM11
; monitor_filters = esp8266_exception_decoder
; build_type = debug


[env:tg_lighting_eff_L6]
extends = env:whitehall_82
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L6__H801_FIVE_1CH_WHITE_CHANNELS -w
                                '-DDEVICENAME_CTR="testgroup_lighting_L6"'
                                -D USE_USER_MICHAEL
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                
extra_scripts             = gzip_fw.py
; upload_protocol = espota
; extra_scripts             = gzip_fw.py
; upload_port = testgroup_multipin_h801_rgbsplitcct.local
; upload_port = 192.168.0.208
upload_port=COM11
; monitor_filters = esp8266_exception_decoder
; build_type = debug


[env:tg_lighting_eff_L7] ; bedroom "roof"
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L7n8__ESP32_PALETTE_WEBUI_DESIGN -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L7"'
                    -DUSE_LIGHTING_TEMPLATE__PALETTE_TESTING_CEILING
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                
upload_protocol = espota
; upload_port = 192.168.0.92
upload_port = testgroup_lighting_L7.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM15


[env:tg_lighting_eff_L8] ; metal palette tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L7n8__ESP32_PALETTE_WEBUI_DESIGN -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L8"'
                    ; -DUSE_LIGHTING_TEMPLATE__PALETTE_TESTING_METAL
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
                ; lib/lib_network
                ; lib/lib_async32
                ; lib/lib_network_web
                ; lib/lib_custom
                ; lib/libesp32/network
upload_protocol = espota
; upload_port = 192.168.0.35
upload_port = testgroup_lighting_L8.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM14
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
;${common32.lib_extra_dirs} 



[env:tg_lighting_eff_L9]
extends = env:whitehall_82
platform                  = ${core_2_6_1.platform}
build_flags               = ${core_2_6_1.build_flags}
                                -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L9__ESP8266_WEBUI 
                                -w
                                '-DDEVICENAME_CTR="testgroup_lighting_L9"'
                                -D ENABLE_FREERAM_APPENDING_SERIAL
                                -D USE_USER_MICHAEL
lib_extra_dirs =               
                lib/libesp82
                lib/lib_basic
                lib/lib_wled82
                lib/lib_custom
                
; extra_scripts             = gzip_fw.py
; upload_protocol = espota
; upload_port = testgroup_lighting_L3.local
; upload_port = 192.168.0.78
upload_port=COM12
; monitor_filters = esp8266_exception_decoder
; build_type = debug



[env:tg_lighting_eff_L10_7segclock] ; metal palette tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L10__ESP32__7SEGMENTCLOCK -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_L10_7segmentclock"'
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                
                ; lib/lib_network
                ; lib/lib_async32
                ; lib/lib_network_web
                ; lib/lib_custom
                ; lib/libesp32/network
upload_protocol = espota
upload_port = 192.168.0.32
; upload_port = testgroup_lighting_L8.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM14
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py
;${common32.lib_extra_dirs} 



[env:tg_lighting_eff_L11] ; outside tree tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L11__ESP32_LARGE_SINGLE_PIN_TESTER -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L11"'
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.33
; upload_port = testgroup_lighting_L11.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM15



[env:tg_lighting_eff_L12] ; large pixels tester with digital pins for oscilloscope
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L12__ESP32_I2S_PARALLEL_4CH_INCLUDING_DEBUG_PINS -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L12"'
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                
; upload_protocol = espota
; upload_port = 192.168.0.92
; upload_port = testgroup_lighting_L11.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM18



[env:tg_lighting_eff_L13] ; outside tree tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L13__ESP32_OUTSIDE_TREE -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L13"'
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
; upload_port = 192.168.0.191
upload_port = testgroup_lighting_L13.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM22


[env:tg_lighting_eff_L14] ; I2S Parallel Tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L14__ESP32_I2S_PARALLEL_8CH -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L14"'
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.33
; upload_port = testgroup_lighting_L11.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM15


[env:tg_lighting_eff_L15]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L16__ESP32_I2S_PARALLEL_RED_BOARD_4CH -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="testgroup_lighting_L15"'
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.231
; upload_port = testgroup_lighting_L11.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM10




[env:tg_lgt__03_esp32_4pin]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__L18__ESP32_I2S_PARALLEL_4CH -w
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tg_lighting_18"'
                    '-DDEVICENAME_FRIENDLY_CTR="ESP32 Tester x4 L18"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;Four Bus;400 LEDs"'
                    -D USE_LIGHTING_TEMPLATE__SINGLE_MICROLED100_STRING
                    ; -DCORE_DEBUG_LEVEL=5         
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
; upload_protocol = espota
; upload_port = 192.168.0.230
; upload_port = tg_lighting_18
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM7



[env:tb_settings_storage]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__SETTINGS_STORING
                                    -D USE_USER_MICHAEL
                                    -w                                     
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              lib/lib_display
              lib/lib_onewire2023 
              lib/lib_sensor
              
              lib/lib_irremote
              lib/lib_rf_extended
              lib/libesp32
              lib/lib_basic
              lib/lib_wled32
              lib/lib_custom
              
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM10
; upload_port = 192.168.0.43
; upload_port = bedroomsensor.local
; upload_protocol = espota




[env:tb_filesystem]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__FILESYSTEM
                                    -D USE_USER_MICHAEL
                                    -w                                     
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              lib/lib_display
              lib/lib_onewire2023 
              lib/lib_sensor
              
              lib/lib_irremote
              lib/lib_rf_extended
              lib/libesp32
              lib/lib_basic
              lib/lib_wled32
              lib/lib_custom
              
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM10
; upload_port = 192.168.0.43
; upload_port = testbed_filesystem.local
; upload_protocol = espota


[env:dev_gps_serial]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_TESTBED__GPS_SERIAL -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5     
                    -Wno-packed-bitfield-compat    
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/lib_gps
; upload_protocol = espota
; upload_port = 192.168.0.152
; upload_port = desksensor.local
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM54
;${common32.lib_extra_dirs}    



[env:wh_garage_transceiver]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_GARAGE_OUTSIDE_433MHZ_TRANSCEIVER
                                    -D USE_USER_MICHAEL
                                    -w                                     
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network
              lib/lib_display
              lib/lib_onewire2023 
              lib/lib_sensor
              
              lib/lib_irremote
              lib/lib_rf_extended
              lib/libesp32
              lib/lib_basic
              lib/lib_wled32
              lib/lib_custom
              
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM28
; upload_port = 192.168.0.43
; upload_port = bedroomsensor.local
; upload_protocol = espota




[env:xmas23_snowtree] ; outside tree tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__SNOW_TREE__16_CHANNELS_200 -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.133
; upload_port = xmas23_snowtree.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM7




[env:xmas23_frontsnowtree] ; outside tree tester
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__FRONT_DOOR_SNOW -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.221
; upload_port = xmas23_snowtree.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM23


[env:xmas23_outside_wreath]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__OUTSIDE_WREATH -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.243
;pload_port = xmas_diningroom_snowtree.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM22



[env:xmas23_kitchen_shelf]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__KITCHEN_SHELF -w
                    -D USE_USER_MICHAEL            
                    ; -DCORE_DEBUG_LEVEL=5         
; platform                    = espressif32 
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.172
;pload_port = xmas_diningroom_snowtree.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM13




[env:xmas23_outsidetree]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__OUTSIDE_TREE__7_CHANNELS -w
                '-DDEVICENAME_CTR="xmas_outside_tree"'
                -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
; upload_port = 192.168.0.212
upload_port = xmas_outside_tree.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM22


[env:xmas23_outsidetree_debug]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__OUTSIDE_TREE__7_CHANNELS -w
                '-DDEVICENAME_CTR="xmas_outside_tree_debug"'
                -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
; upload_protocol = espota
; upload_port = 192.168.0.242
; upload_port = xmas_outside_tree.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
upload_port = COM11

[env:xmas23_redgive_nonetwork]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__REDGIVE_500PIXELS -w
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
; upload_protocol = espota
; upload_port = 192.168.0.133
; upload_port = testgroup_lighting_L13.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
upload_port = COM21





[env:xmas23_bauble4pin]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__BAUBLE_4PIN_TESTER -w
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.221
; upload_port = testgroup_lighting_L13.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM13




[env:xmas23_utilityshelf]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_CHRISTMAS__UTILITY_SHELF -w
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
; upload_protocol = espota
; upload_port = 192.168.0.221
; upload_port = testgroup_lighting_L13.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
upload_port = COM10




[env:tmp_lgt__hyperion_samsung_65inch]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TEMPORARY__LIGHTING__HYPERION_LIGHT_SAMSUNG_65INCH 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tv_hyperion_65inch"'
                    '-DDEVICENAME_FRIENDLY_CTR="Hyperion 65 inch ESP32-4CH-4x?LEDS#Room"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.96
; upload_port = tg_lighting_41
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM39

[env:holloween23_1]
extends = env:whitehall_32
build_flags = ${common.build_flags} -D DEVICE_HOLLOWEEN__FRONTDOOR -w
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                lib/libesp32
                lib/lib_basic
                lib/lib_wled32
                lib/lib_custom
                lib/lib_neopixel_june24_ws2805
upload_protocol = espota
upload_port = 192.168.0.221
; upload_port = testgroup_lighting_L13.local
; build_type = debug
; monitor_filters = esp32_exception_decoder
; upload_port = COM23



[env:tmp_lgt__matSegs]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_LIGHTING__LIGHTING_EFFECTS__MATRIX_SEGMENT_TESTER 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="tmp_lighting_matrix_segment"'
                    '-DDEVICENAME_FRIENDLY_CTR="TGL20 ESP32-Matrix 16x16#Desk"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x4 Output;Desk/Wall Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor                          
                          lib/lib_custom
                          lib/lib_wled32
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.198
; upload_port = tg_lighting_20
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM40




; platformio device monitor --port COM10

[env:hvac_desk]
extends = env:whitehall_32
# build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common.build_flags} -w  
                                    -D DEVICE_HVAC_DESK                                           
                                    -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                                    -D USE_USER_MICHAEL          
                                    # -D ENABLE_DEVFEATURE__WS2801
lib_extra_dirs          = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
                          lib/lib_gpio_viewer
upload_protocol = espota
; upload_port = hvac_desk
upload_port = 192.168.0.235
; upload_port = COM3
; monitor_filters = esp32_exception_decoder
; build_type = debug



[env:tb_desk_sensor]
extends = env:whitehall_32
# build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common.build_flags} -w  
                                    -D DEVICE_DESK_SENSOR                                           
                                    -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                                    -D USE_USER_MICHAEL          
                                    # -D ENABLE_DEVFEATURE__WS2801
lib_extra_dirs          = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
                          lib/lib_gpio_viewer
upload_protocol = espota
; upload_port = hvac_desk
upload_port = 192.168.0.235
; upload_port = COM3
; monitor_filters = esp32_exception_decoder
; build_type = debug



[env:tb_night_flight]
extends = env:whitehall_32
# build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common.build_flags} -w  
                                    -D DEVICE_TESTBED__FLIGHT__LED_CONTROL_MAVLINK                                           
                                    # -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                                    -D USE_USER_MICHAEL          
                                    # -D ENABLE_DEVFEATURE__WS2801
                    # -D DEVICE_GAZEBO__LIGHT_CONTROLLER_AND_SENSOR 
                    # -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                    # -D USE_USER_MICHAEL                              
lib_extra_dirs          = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_april23
                          # lib/lib_neopixel_may24
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
                          lib/lib_gpio_viewer
# upload_protocol = espota
; upload_port = 
# upload_port = 192.168.0.29
upload_port = COM31
; monitor_filters = esp32_exception_decoder
; build_type = debug


[env:rel_night_flight]
extends = env:whitehall_32
# build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common.build_flags} -w  
                                    -D DEVICE_DOLPHIN__FLIGHT__LED_CONTROL_MAVLINK                                           
                                    # -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                                    -D USE_USER_MICHAEL          
                                    # -D ENABLE_DEVFEATURE__WS2801
                    # -D DEVICE_GAZEBO__LIGHT_CONTROLLER_AND_SENSOR 
                    # -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                    # -D USE_USER_MICHAEL                              
lib_extra_dirs          = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_april23
                          # lib/lib_neopixel_may24
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
                          lib/lib_gpio_viewer
; upload_protocol = espota
; upload_port = 
; upload_port = 192.168.0.219
upload_port = COM35
; monitor_filters = esp32_exception_decoder
; build_type = debug




[env:tb_ultrasonic]
extends = env:whitehall_32
# build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${common.build_flags} -w  
                                    -D DEVICE_TESTBED__ULTRASONIC                                           
                                    # -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                                    -D USE_USER_MICHAEL          
                                    # -D ENABLE_DEVFEATURE__WS2801
                    # -D DEVICE_GAZEBO__LIGHT_CONTROLLER_AND_SENSOR 
                    # -D FIRMWARE_DEFAULT__LIGHTING__ESP32_OPTIONS_MINIMAL__MAY24 
                    # -D USE_USER_MICHAEL                              
lib_extra_dirs          = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          ; 
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          ; lib/lib_neopixel_april23
                          lib/lib_neopixel_may24
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
                          lib/lib_gpio_viewer
                          lib/lib_filters
; upload_protocol = espota
; upload_port = 
; upload_port = 192.168.0.219
upload_port = COM31
; monitor_filters = esp32_exception_decoder
; build_type = debug


[env:dev_matrix]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTBED__LED_MATRIX
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
; upload_protocol = espota
; upload_port = heating.local
; upload_port = 192.168.0.235
upload_port = COM5
monitor_filters = esp32_exception_decoder
build_type = debug


[env:dev_treadmill_power]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TREADMILL_POWER_MONITOR
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          
                          lib/lib_custom
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_filters
upload_protocol = espota
; upload_port = heating.local
upload_port = 192.168.0.17
; upload_port = COM16
; monitor_filters = esp32_exception_decoder
; build_type = debug

[env:tg_hvac_oil_rad01]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTGROUP__HVAC__OIL_RADIATOR_01
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}           
upload_port = 192.168.0.197
; upload_port = c onsumerunit.local
upload_protocol = espota
; upload_port = COM51
; monitor_filters = esp32_exception_decoder
; build_type = debug


[env:tg_pzem_socket_energy01]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_TESTGROUP__PZEM__SOCKET_ENERGY_01
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}           
upload_port = 192.168.0.192
; upload_port = c onsumerunit.local
upload_protocol = espota
; upload_port = COM52
; monitor_filters = esp32_exception_decoder
; build_type = debug


[env:tg_cellular_800L_office_testbed]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_CELLULAR_LTE__GPS_POSITION_LOCATOR_01__ON_SIM800L__OFFICE_TESTBED
                            -w
                            -Wno-packed-bitfield-compat
lib_extra_dirs = ${common.lib_extra_dirs}
              lib/libesp32
              lib/lib_basic
              lib/lib_network              
              lib/lib_irremote
              lib/lib_basic
              lib/lib_display
              lib/libesp32/network
              lib/lib_network_test
              lib/lib_network_web
              lib/lib_async32
              lib/lib_tinygsm
              lib/lib_custom
              lib/lib_streamdebugger
              lib/lib_gps
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM41
; upload_protocol = espota
; upload_port = 192.168.0.41
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


[env:ad_swt_and_but]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_ACTIVE_DEVELOPMENT__SWITCHES_AND_BUTTONS
                            -w
                            -Wno-packed-bitfield-compat
lib_extra_dirs = ${common.lib_extra_dirs}
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM53
upload_protocol = espota
upload_port = 192.168.0.217
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py

;;; ACTIVE DEVELOPMENT           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  

[env:ad_door_light_office]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_ACTIVE_DEVELOPMENT__DOOR_LIGHTING__OFFICE 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="office_sensor"'
                    '-DDEVICENAME_FRIENDLY_CTR="AD Office Sensor#Office"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Office Sensor, Ensuite Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.28
; upload_port = office_sensor
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM42



[env:ad_hallway_flowers]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_ACTIVE_DEVELOPMENT__HALLWAY_FLOWERS 
                    -D DEVICE_TESTGROUP__LIGHTING_EFFECTS__BASE 
                    -D USE_USER_MICHAEL            
                    '-DDEVICENAME_CTR="hallway_flowers"'
                    '-DDEVICENAME_FRIENDLY_CTR="AD Hallway Flowers#Hallway"'
                    '-DDEVICENAME_DESCRIPTION_CTR="ESP32;x1 Output I2S Default;Office Sensor, Ensuite Tester"'
lib_extra_dirs  = ${library.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_wled32
                          lib/lib_custom
                          lib/lib_neopixel_june24_ws2805
                          lib/lib_i2c
                          lib/lib_energy
                          lib/lib_nextion_esp32_web
                          lib/lib_default
upload_protocol = espota
upload_port = 192.168.0.77
; upload_port = office_sensor
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM17


;;; CHRISTMAS 2024           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  


[env:xmas24__desk__timing_tester]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_CHRISTMAS24__DESK__TIMING_TESTER
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.211
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM50




[env:xmas24_water]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags} -w
                                    -D DEVICE_XMAS_LIVINGROOM_TREE_WATER_LEVEL_2024
                                    -D USE_USER_MICHAEL               
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                              lib/lib_filters
                              lib/lib_onewire2023
                              lib/lib_sensor
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM24
upload_port = 192.168.0.127
upload_protocol = espota


[env:xmas24__final__4x_green]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__4X_GREEN
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.209
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM57


[env:xmas24__final__8x_red]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__8X_RED
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.209
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM57


[env:xmas24__final__8x_outside_tree]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__8X_OUTSIDE_TREE
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
upload_protocol = espota
upload_port = 192.168.0.216
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM58


[env:xmas24__final__16x_outside_tree]
extends = env:whitehall_32
build_flags = ${common32.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__16X_OUTSIDE_TREE
                    -D ENABLE_FEATURE_LIGHTING__REALTIME_MODES
                    -D ENABLE_FEATURE_LIGHTING__REALTIME_MQTT_SETPIXEL
                    -D USE_USER_MICHAEL
upload_protocol = espota
upload_port = 192.168.0.136
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM46

[env:tb_xmas24__final__16x_outside_tree]
extends = env:whitehall_32
build_flags = ${common32.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__16X_OUTSIDE_TREE
                    -D USE_USER_MICHAEL
                    -D USE_DEBUGFEATURE_DEVICE_CLONE_TESTBED
                    ; -D ENABLE_DEBUG_FEATURE_MQTT_ANIMATOR__DEBUG_PERFORMANCE
                    ; -D ENABLE_DEBUG_FEATURE_MQTT_ANIMATOR__DEBUG_PERFORMANCE_FAST_MQTT_UPDATE
                    ; -D ENABLE_DEBUGFEATURE_LIGHTING__EFFECT_LOOP_TIME_SERIAL
                    ; -D ENABLE_DEBUGFEATURE_LIGHTING__TIME_CRITICAL_RECORDING
                    ; -D ENABLE_DEBUGFEATURE_LIGHTING__PERFORMANCE_METRICS_SAFE_IN_RELEASE_MODE
                    ; -D ENABLE_DEBUG_TIME__PRINT
                    ; -D ENABLE_DEVFEATURE_LIGHTING__TEMPORARY_DISABLE_CODE_FOR_SPEED_TESTING
                    -D USE_DEBUG_PRINT

upload_protocol = espota
upload_port = 192.168.0.13
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM68



[env:xmas24__final__16x_sidedoor_tree]
extends = env:whitehall_32
build_flags = ${common32.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__16X_SIDEDOOR_TREE
                    -D USE_USER_MICHAEL
upload_protocol = espota
upload_port = 192.168.0.181
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM71




[env:xmas24__final__16x_snow_tree]
extends = env:whitehall_32
build_flags = ${common32.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__16X_SNOW_TREE
                    -D USE_USER_MICHAEL
upload_protocol = espota
upload_port = 192.168.0.130
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM30


[env:xmas24__final__4x_sidedoor_wreath]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__SIDEDOOR_WREATH
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                ; lib/lib_gpio_viewer
; upload_protocol = espota
; upload_port = 192.168.0.136
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM10


[env:xmas24__final__snow_silver]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_CHRISTMAS24__FINAL__SNOW_TREE_SILVER
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
                  lib/libesp32
upload_protocol = espota
upload_port = 192.168.0.211
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM50

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[env:xmas24_tb__outtree_x16_01]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTBED__OUTSIDE_TREE_X16_01
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
; upload_protocol = espota
; upload_port = 192.168.0.211
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM50


[env:xmas24_tb__outtree_x16_02]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTBED__OUTSIDE_TREE_X16_02
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
; upload_protocol = espota
; upload_port = 192.168.0.211
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM55


[env:xmas23_tb__outtree_x8_sweep]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_TESTBED__OUTSIDE_TREE_2023__X8__SWEEP_TESTER
                    -D USE_USER_MICHAEL
lib_extra_dirs  = ${library.lib_extra_dirs}
; upload_protocol = espota
; upload_port = 192.168.0.211
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM56


;;; COLORADO 2024           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  


[env:xmas24__colorado__redboard_01]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__REDBOARD_01
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
lib_extra_dirs  = ${library.lib_extra_dirs}
                  lib/libesp32
; upload_protocol = espota
; upload_port = 192.168.0.239
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM65


[env:xmas24__colorado__redboard_02]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__MANUAL_FIND_LEDS_ON_HAT
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
lib_extra_dirs  = ${library.lib_extra_dirs}
                  lib/libesp32
upload_protocol = espota
upload_port = 192.168.50.98
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM12

[env:xmas24__colorado__string_01]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__STRING_01__SLOW_GLOW_ONLY__100LEDS
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
upload_protocol = espota
upload_port = 192.168.50.238
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM8


[env:xmas24__colorado__string_02]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__STRING_02
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
upload_protocol = espota
upload_port = 192.168.50.239
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM10


[env:xmas24__colorado__string_03]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__STRING_03__PLAYLIST_PRESETS__OUTSIDE_TREE_DEMO__250LEDS
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
                    '-DDEVICENAME_DESCRIPTION_CTR="Sequencer Testing String03"'
upload_protocol = espota
upload_port = 192.168.50.167
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM14


[env:xmas24__colorado__string_04]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__STRING_04__PLAYLIST_PRESETS__OUTSIDE_TREE_DEMO__VIRTUAL2000LEDS
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
                    '-DDEVICENAME_DESCRIPTION_CTR="Outside Virtual String04"'
; upload_protocol = espota
; upload_port = 192.168.50.167
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM15


[env:xmas24__colorado__string_05]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__STRING_05__PLAYLIST_PRESETS__OUTSIDE_TREE_DEMO__100LEDS
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
                    '-DDEVICENAME_DESCRIPTION_CTR="Outside 100 demo String05"'
; upload_protocol = espota
; upload_port = 192.168.50.167
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM15

[env:xmas24__colorado__string_06]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__STRING_06__AP_MODE_TESTING
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
                    '-DDEVICENAME_DESCRIPTION_CTR="First no AP, direct wifi"'
; upload_protocol = espota
; upload_port = 192.168.50.167
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM15


[env:xmas24__colorado__redboard_01_matrix]
extends = env:whitehall_32
build_flags = ${common.build_flags} -w
                    -D DEVICE_COLORADO24__REDBOARD_01_MATRIX_TREE
                    -D USE_USER_MICHAEL
                    '-DSTA_SSID1="Doone"'
                    '-DSTA_PASS1="71157bjd"'
                    '-DDEVICENAME_DESCRIPTION_CTR="Wrapped Tree Matrix Tester"'
upload_protocol = espota
upload_port = 192.168.50.167
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM14


[env:xmas24__colorado__ring_01]
extends = env:whitehall_32
build_flags = ${common.build_flags} 
                    -w
                    -D DEVICE_COLORADO24__RING_01
                    -D USE_USER_MICHAEL
                    -Wno-overloaded-virtual
                    -Wall
lib_extra_dirs  = ${library.lib_extra_dirs}
                  lib/libesp32
upload_protocol = espota
upload_port = 192.168.0.149
; upload_port = tg_lighting_01
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM67


[env:co24_swt_and_but]
extends = env:whitehall_32
build_flags             = ${esp32_defaults.build_flags} 
                            -D DEVICE_ACTIVE_DEVELOPMENT__SWITCHES_AND_BUTTONS_COLORADO24
                            -w
                            -Wno-packed-bitfield-compat
                            '-DSTA_SSID1="Doone"'
                            '-DSTA_PASS1="71157bjd"'
                            '-DDEVICENAME_DESCRIPTION_CTR="Switches and Buttons Testing"'
lib_extra_dirs = ${common32.lib_extra_dirs}
; monitor_speed = 921600
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM16
upload_protocol = espota
upload_port = 192.168.50.125
; extra_scripts   = ${scripts_defaults.extra_scripts} 
;                   gzip_fw.py


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


[tasmota_april24]
build_unflags               =
build_flags                 =

[esp32_defaults_april24]
build_unflags               = ${esp_defaults_april24.build_unflags}
                              -Wswitch-unreachable
                              -Wstringop-overflow
                              -Wincompatible-pointer-types
                              -Wnonnull-compare
                              -fexceptions
                              -fno-lto
                              -Wpointer-arith
build_flags                 = ${esp_defaults_april24.build_flags}
                              ; comment next line to disable IPv6 support
                              -DUSE_IPV6
                              -Wno-switch-unreachable
                              -Wno-stringop-overflow
                              -fno-exceptions
                              -flto=auto
                              -DBUFFER_LENGTH=128
                              -DHTTP_UPLOAD_BUFLEN=2048
                              -DMQTT_MAX_PACKET_SIZE=1200
                              -Duint32=uint32_t
                              -Duint16=uint16_t
                              -Duint8=uint8_t
                              -Dsint8_t=int8_t
                              -Dsint32_t=int32_t
                              -Dsint16_t=int16_t
                              -Dmemcpy_P=memcpy
                              -Dmemcmp_P=memcmp
                              ;for TLS we can afford compiling for 4K RSA keys
                              -DUSE_4K_RSA
                              -I$PROJECT_DIR/include
                              -include "sdkconfig.h"
                              -include "esp32x_fixes.h"
                              ; wrappers for the crash-recorder
                              -Wl,--wrap=panicHandler -Wl,--wrap=xt_unhandled_exception
                              -Wl,--wrap=_Z11analogWritehi  ; `analogWrite(unsigned char, int)` use the Tasmota version of analogWrite for deeper integration and phase control
                              -Wl,--wrap=ledcReadFreq  ; `uint32_t ledcReadFreq(uint8_t chan)`
lib_ignore                  =
                              HTTPUpdateServer
                              USB
                              NetBIOS
                              Preferences
                              ArduinoOTA
extra_scripts               = pre:pio-tools/add_c_flags.py
                              ; pre:pio-tools/gen-berry-structures.py
                              post:pio-tools/post_esp32.py
                              ${esp_defaults_april24.extra_scripts}
monitor_filters             = esp32_exception_decoder


[esp_defaults_april24]
extra_scripts               = post:pio-tools/name-firmware.py
                              post:pio-tools/gzip-firmware.py
                              ; post:pio-tools/metrics-firmware.py
                              ; post:pio-tools/custom_target.py
;                              post:pio-tools/obj-dump.py
                              ${scripts_defaults.extra_scripts}
; *** remove undesired all warnings
build_unflags               = ${tasmota_april24.build_unflags}
                               -Wall
;                              -mtarget-align
                              -Wdeprecated-declarations
build_flags                 = ${tasmota_april24.build_flags}
                              -DCORE_DEBUG_LEVEL=0
                              -Wl,-Map,firmware.map
                              -Wno-deprecated-declarations
;                              -mno-target-align
                              -mtarget-align
                              -free
                              -fipa-pta
                              -Wreturn-type
                              -DTASMOTA  ; flag indicating that we are compiling Tasmota

[common_april24]
platform                    = ${core.platform}
platform_packages           = ${core.platform_packages}
framework                   = arduino
board                       = esp8266_1M
board_build.filesystem      = littlefs
board_build.variants_dir    = variants/tasmota
custom_unpack_dir           = unpacked_littlefs
build_unflags               = ${core.build_unflags}
build_flags                 = ${core.build_flags}
monitor_speed               = 115200
monitor_echo                = yes
; *** Upload Serial reset method for Wemos and NodeMCU
upload_resetmethod          = nodemcu
extra_scripts               = ${esp_defaults_april24.extra_scripts}
lib_archive                 = no
lib_ldf_mode                = chain
lib_compat_mode             = strict
shared_libdeps_dir          = lib
lib_extra_dirs              =
                              lib/lib_basic
                              lib/lib_i2c
                              lib/lib_display
                              lib/lib_ssl
                              lib/lib_audio
                              lib/lib_rf
                              lib/lib_div

[env:tasmota32_base_april24]
framework               = ${common_april24.framework}
platform                = ${core32.platform}
platform_packages       = ${core32.platform_packages}
board_build.filesystem  = ${common_april24.board_build.filesystem}
custom_unpack_dir       = ${common_april24.custom_unpack_dir}
board_build.variants_dir = ${common_april24.board_build.variants_dir}
board                   = esp32
monitor_speed           = ${common_april24.monitor_speed}
monitor_echo            = ${common_april24.monitor_echo}
upload_resetmethod      = ${common_april24.upload_resetmethod}
extra_scripts           = ${esp32_defaults_april24.extra_scripts}
monitor_filters         = ${esp32_defaults_april24.monitor_filters}
build_unflags           = ${core32.build_unflags}
build_flags             = ${core32.build_flags}
lib_ldf_mode            = ${common_april24.lib_ldf_mode}
lib_compat_mode         = ${common_april24.lib_compat_mode}
lib_extra_dirs          = ${common_april24.lib_extra_dirs}
                          lib/libesp32
                          lib/libesp32_lvgl
lib_ignore              = ${esp32_defaults_april24.lib_ignore}
; Add files to Filesystem for all env (global). Remove no files entry and add add a line with the file to include
; Example for adding the Partition Manager
; custom_files_upload =
; tasmota/berry/modules/Partition_Manager.tapp
custom_files_upload     = no_files






[env:tb_xiao_camera]
platform = espressif32
board = seeed_xiao_esp32s3
framework = arduino

platform_packages =
  framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.5
  toolchain-xtensa-esp32s3 @ ~8.4.0

board_build.partitions = esp32_partition_app2880k_fs320k.csv

build_flags =
  -DARDUINO_XIAO_ESP32S3_SENSE
  -DBOARD_HAS_PSRAM
  -D USE_USER_MICHAEL
  -w
  -fpermissive

upload_port = COM16
monitor_speed = 115200

lib_deps =
lib_ignore =
  cc1101
  ESP32 Azure IoT Arduino
  ESP32 Async UDP
  ESP32 BLE Arduino
  SimpleBLE
  NetBIOS
  ESP32
  Preferences
  BluetoothSerial

lib_extra_dirs =
  lib/libesp32
  lib/lib_basic
  lib/lib_network
  lib/lib_display
  lib/lib_onewire2023 
  lib/lib_sensor
  
  lib/lib_custom
  lib/libesp32
  lib/lib_basic
  lib/lib_wled32
  lib/lib_custom
  lib/lib_neopixel_april23
  lib/lib_i2c
  lib/lib_energy
  lib/lib_nextion_esp32_web
  lib/lib_default
  lib/lib_gpio_viewer












; [env:tb_xiao_camera]
; framework = arduino  
; platform                    = espressif32
; platform_packages       = 
; board_build.ldscript    = esp32_out.ld
; board_build.partitions  = esp32_partition_app1984k_spiffs64k.csv
; board_build.flash_mode  = dout
; upload_resetmethod      = nodemcu
; upload_speed            = 921600
; extra_scripts             = pio/strip-floats.py
;                             pio/name-firmware.py
;                             pio/gzip-firmware.py
;                             gzip_fw.py
;                             pio/override_copy.py
; build_unflags             = -Wall
;                             -Wdeprecated-declarations
; build_flags               = -Wno-deprecated-declarations
; lib_deps = 
; lib_ignore              =
;     cc1101
;     ESP32 Azure IoT Arduino
;     ESP32 Async UDP
;     ESP32 BLE Arduino
;     SimpleBLE
;     NetBIOS
;     ESP32
;     Preferences
;     BluetoothSerial                          
; lib_extra_dirs          = lib/libesp32
;                           lib/lib_basic
;                           lib/lib_network
;                           lib/lib_display
;                           lib/lib_onewire2023 
;                           lib/lib_sensor
;                           
;                           lib/lib_custom
;                           lib/libesp32
;                           lib/lib_basic
;                           lib/lib_wled32
;                           lib/lib_custom
;                           lib/lib_neopixel_april23
;                           # lib/lib_neopixel_may24
;                           lib/lib_i2c
;                           lib/lib_energy
;                           lib/lib_nextion_esp32_web
;                           lib/lib_default
;                           lib/lib_gpio_viewer
;                             lib/libesp32
;                             ; lib/lib_gps
;                             ; lib/libesp32/network
;                             ; lib/lib_network
;                             lib/lib_custom
;                             lib/libesp32/esp32-camera
;                             lib/lib_basic
;                             lib/lib_default
;                             ; ~/Documents/Arduino/libraries
; board = seeed_xiao_esp32s3
; upload_port = COM16




; device needs >= 8MB Flash!!
; platform = espressif32
; board = seeed_xiao_esp32s3
; framework = arduino
; build_flags                 = 
;     -DARDUINO_XIAO_ESP32S3_SENSE
;     -DBOARD_HAS_PSRAM
;     -D DEVICE_CAMERA_XIAO_TESTBED
;     ; Additional settings, for example, enabling the camera, microphone, etc.
; board_build.partitions = no_ota.csv
; board_build.filesystem = littlefs

; extends                     = env:tasmota32_base_april24
; board = seeed_xiao_esp32s3
; ; board = esp32   ; Adjust this to your specific board
; ; board                       = esp32s3-qio_opi_120
; board_build.partitions      = partitions/esp32_partition_app3904k_fs3392k.csv
; build_flags                 = ${env:tasmota32_base_april24.build_flags}
;                               -DUSE_BERRY_ULP
;                               -DFIRMWARE_LVGL
;                               -DUSE_LVGL_OPENHASP
;                               -DOTA_URL='""'


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;