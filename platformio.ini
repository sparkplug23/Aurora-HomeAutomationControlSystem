
[build_envs]
; *** Uncomment one of the lines below to build/upload only one environment
default_envs = 

    ;;; HOME INSTALLED ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Landing
    ; esp_8266_landingpanel ;;DIDNT
    ; esp_8266_shellydimmer_landing_ceiling
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Hallway
    esp_8266_radiatorfan
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Ensuite
    ; esp_8266_ensuitesensor
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Master
    ; esp_8266_shellydimmer_masterbedroom_ceiling





    ;;; DEVELOPEMENT DEVICES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

    ; esp_8266_customuser_example_serial
    ; esp_8266_customuser_example_ota

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Direct Groups
    ; tasmota32-minimal
    ; esp_8266_com3_debug
    ; esp_8266_com_manual
    ; esp_8266_com3
    ; esp_8266_com5
;    esp_8266_com6
    ;esp_8266_com7
    ; esp_8266_com8
    ; esp_8266_com10
    ; esp_8266_com14
    ;esp_8266_com18
    ;esp_8266_com19
    ; esp_8266_com20
    ;esp_8266_manual_OTA_IP

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Tester and Development firmware
    ; esp_8266_rgbnotification_tester
    ;;esp_8266_testbed_shelly1_01
    ; esp_8266_testbed_shelly2_dimmer_01
    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Lighting Group

    ; BETA testers
    ; esp_8266_rgbmicro3
    ; esp_8266_rgbroof
    ; esp_8266_rgbdell
    ; esp_8266_rgbdesk
;    esp_8266_rgbbedlight
    ;esp_8266_rgbbedlight_test
;    esp_8266_rgbmicro2
    ; esp_8266_rgbmicro4
;    esp_8266_rgbbedroomfloor
;   esp_8266_h801_tester
    ; esp_8266_h801_tester_nodemcu
    ; 

    ; esp_8266_rgbnotification_01
    ; esp_8266_rgbclock_01
    ; esp_8266_rgbclock_02
    ; esp_8266_rgbdisplay_garage


    ; esp_8266_rgbshelf
    ; esp_8266_rgbcrystal1
    ; ; esp_8266_rgbcrystal2
    ; esp_8266_rgbcrystal3

    ; esp_8266_rgbmicro1
    ; esp_8266_desklight
    ; esp_8266_rgbcooker
    ; esp_8266_rgbfridge
    ; esp_8266_rgbutility
;    esp_8266_tester_rgbw
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sensor Group
    ; esp_8266_masterbedroomsensor                
    ;  esp_8266_atticsensor
    ; esp_8266_kitchensensor
   ; esp_8266_utilitysensor
    ; esp_8266_livingroomsensor
    ; esp_8266_bedroomsensor
    ; esp_8266_immersionsensor
    ; esp_8266_nodemcu_tester

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Energy Group
;   esp_8266_consumerunit
;   esp_8266_pzem_tester
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Display Group
    ;esp_8266_kitchenpanel
    ; esp_8266_bedroompanel




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Custom Group
    ; esp_8266_doorbellwallchime
    ; esp_8266_heating
    ; esp_8266_oiltank
    ; esp_8266_oilfurnace
    ; esp_8266_shelly1_tester
    ; 
    ; esp_8266_bedroomblinds
    ; esp_8266_blackdoorbell
    ; esp_8266_gazebcon
    ; esp_8266_deskfan
    ; esp_8266_treadmill
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff / Shellys
                ;esp_8266_sonoffbasictester
                ; esp_8266_whitefan1
                ; esp_8266_dresserlight
                ; esp_8266_bedside_lamp1
                ; esp_8266_extractorfan
                ;  esp_8266_extention1
                ;esp_8266_candlewarmer
                ; esp_8266_hallwaymirror
                ; esp_8266_silverlamp1
                ; esp_8266_silverlamp2

    ; esp_8266_kitchenlight1
    ; esp_8266_kitchenlight2
    ; cuboard virtual switch
    ; esp_8266_kitchenlight3
    ;kitchen_light_cupboards_physical(not virtual button)
    ; esp_8266_kitchenlight4

    ; esp_8266_sidedoorlight
    ; esp_8266_garagelight

    ; esp_8266_shellydimmer_bedroom_globe
    ; esp_8266_shellydimmer_spareroom_ceiling
    ; esp_8266_testbed_shelly2p5_01
    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff ifans
    ; esp_8266_ceilingfan
    ; esp_8266_airpurifier
    ; esp_8266_floorfan1
    ; esp_8266_floorfan2
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Designed for other people
    ; esp_8266_rgbcustomuser01

    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Sonoff Grouped
    ; 
    ;esp_8266_socket_numbered_01
    ; 
    ; esp_8266_socket_numbered_02
    ; living room lamp 1
    ; esp_8266_socket_numbered_03
    ; living room lamp 2
    ; esp_8266_socket_numbered_04
    ;
    ; esp_8266_socket_numbered_05
    ; Hallway Table
    ; esp_8266_socket_numbered_06
    ; Dresser lights
    ; esp_8266_socket_numbered_07
    ; 
    ; esp_8266_socket_numbered_08
    
    ; candlelight 
    ; esp_8266_socket_numbered_09
    
    ; esp_8266_socket_numbered_10
    ; extractorfan
;    esp_8266_socket_numbered_11

[platformio]
description = My Provide ESP8266 / ESP32 based devices with Web, MQTT and OTA firmware
src_dir = HomeControlSystem
build_dir = .pioenvs
build_cache_dir = .cache
extra_configs = platformio_env8266.ini
                platformio_32.ini
                platformio_env32.ini
default_envs =  ${build_envs.default_envs}


[common]
framework                 = arduino
board                     = esp01_1m
board_build.flash_mode    = dout
board_build.ldscript      = eagle.flash.1m.ld

platform                  = ${core.platform}
platform_packages         = ${core.platform_packages}
build_unflags             = ${core.build_unflags}
build_flags               = ${core.build_flags}

board_build.f_cpu         = 80000000L
board_build.f_flash       = 40000000L
monitor_speed             = 115200
upload_speed              = 115200
; *** Upload Serial reset method for Wemos and NodeMCU
upload_resetmethod        = nodemcu
upload_port               = COM3
extra_scripts             = ${scripts_defaults.extra_scripts}
lib_ldf_mode              = chain+  
shared_libdeps_dir        = lib
;lib_deps                  = https://github.com/sparkplug23/NeoPixelBus.git#master
lib_extra_dirs            = 
                            lib/libesp8266/network 
                            lib/lib_network 
                            lib/lib_lighting
                            lib/lib_basic      
                            lib/lib_sensor  
                            ; lib/lib_phaseout    

[scripts_defaults]
extra_scripts             = pio/strip-floats.py
                            pio/name-firmware.py
                            ; pio/gzip-firmware.py
                            gzip_fw.py
                            pio/override_copy.py

[esp_defaults]
; *** remove undesired all warnings
build_unflags             = -Wall
                            -Wdeprecated-declarations
build_flags               = -Wno-deprecated-declarations

; *********************************************************************
; *** Use custom settings from file user_config_override.h
                            ;-DUSE_CONFIG_OVERRIDE
; *********************************************************************


[esp82xx_defaults]
build_flags               = ${esp_defaults.build_flags}
                            -Wl,-Map,firmware.map
                            -D CORE_DEBUG_LEVEL=0
                            -D NDEBUG
                            -mtarget-align
                            -DFP_IN_IROM
                            -DBEARSSL_SSL_BASIC
                            ; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
                            -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
                            ; lwIP 2 - Higher Bandwidth no Features
                            -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
                            ; VTABLES in Flash
                            -DVTABLES_IN_FLASH                         
                            ; remove the 4-bytes alignment for PSTR()
                            ; -DPSTR_ALIGN=1
                            ; restrict to minimal mime-types
                            -DMIMETYPE_MINIMAL
                           

[core]
; *** Esp8266 Tasmota modified Arduino core based on core 2.7.4
platform                  = espressif8266@2.6.2
platform_packages         = framework-arduinoespressif8266@https://github.com/tasmota/Arduino/releases/download/2.7.4.5/esp8266-2.7.4.5.zip
                            platformio/tool-esptool @ 1.413.0
build_unflags             = ${esp_defaults.build_unflags}
build_flags               = ${esp82xx_defaults.build_flags}


[core_active]
; platform                  = ${core_2_6_1.platform}
; build_flags               = ${core_2_6_1.build_flags}
platform                  = ${core_2_6_1_4m.platform}
build_flags               = ${core_2_6_1_4m.build_flags}
build_unflags             = ${esp_defaults.build_unflags}


[core_2_6_1]
; *** Esp8266 core for Arduino version 2.6.1
; platform                  = espressif8266
; platform_packages =
;     framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git
platform                  = espressif8266@2.6.1
;https://github.com/platformio/platform-espressif8266.git
;espressif8266@2.5.1
;https://github.com/platformio/platform-espressif8266.git
;espressif8266@2.5.1
;espressif8266@2.3.0
;espressif8266@2.5.1
;espressif8266@2.3.0
board_build.ldscript      = eagle.flash.1m.ld
build_flags               = ${esp82xx_defaults.build_flags}
                            ; -Wl,-Teagle.flash.1m.ld
                            ;-DBEARSSL_SSL_BASIC ;removed
                            ;-Wl,-Teagle.flash.1m.ld
; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
                            ;-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703;removed
; lwIP 2 - Higher Bandwidth no Features
                            ;-DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
; VTABLES in Flash
                            ;-DVTABLES_IN_FLASH
                            ; -DPGM_READ_UNALIGNED=0
; No exception code in firmware
                            -fno-exceptions
                            -lstdc++
                            ; remove the 4-bytes alignment for PSTR()
                            ;-DPSTR_ALIGN=1
                            ; restrict to minimal mime-types
                            -DMIMETYPE_MINIMAL
                            

[core_2_6_1_4m]
; *** Esp8266 core for Arduino version 2.6.1
; platform                  = espressif8266
; platform_packages =
;     framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git
platform                  = espressif8266@2.6.1
;https://github.com/platformio/platform-espressif8266.git
;espressif8266@2.5.1
;https://github.com/platformio/platform-espressif8266.git
;espressif8266@2.5.1
;espressif8266@2.3.0
;espressif8266@2.5.1
;espressif8266@2.3.0
extra_scripts = gzip_fw.py
board_build.ldscript      = eagle.flash.4m.ld
build_flags               = ${esp82xx_defaults.build_flags}
                            ; -Wl,-Teagle.flash.4m.ld
                            ;-DBEARSSL_SSL_BASIC ;removed
                            ;-Wl,-Teagle.flash.1m.ld
; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
                            ;-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703;removed
; lwIP 2 - Higher Bandwidth no Features
                            ;-DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
; VTABLES in Flash
                            ;-DVTABLES_IN_FLASH
                            ; -DPGM_READ_UNALIGNED=0
; No exception code in firmware
                            -fno-exceptions
                            -lstdc++
                            ; remove the 4-bytes alignment for PSTR()
                            ;-DPSTR_ALIGN=1
                            ; restrict to minimal mime-types
                            -DMIMETYPE_MINIMAL
                            

[core_2_6_1_1m]
; *** Esp8266 core for Arduino version 2.6.1
platform                  = espressif8266@2.6.1
board_build.ldscript      = eagle.flash.1m.ld
build_flags               = ${esp82xx_defaults.build_flags}
                            ; -DBEARSSL_SSL_BASIC
; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
                            ; -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
; lwIP 2 - Higher Bandwidth no Features
                            ; -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
; VTABLES in Flash
                            ; -DVTABLES_IN_FLASH
; No exception code in firmware
                            -fno-exceptions
                            -lstdc++
extra_scripts             = ${scripts_defaults.extra_scripts}

; ; // PSTR() macro modified to start on a 32-bit boundary.  This adds on average
; ; // 1.5 bytes/string, but in return memcpy_P and strcpy_P will work 4~8x faster
; ; #ifndef PSTR
; ; #ifndef PSTR_ALIGN
; ;   // PSTR() macro starts by default on a 32-bit boundary.  This adds on average
; ;   // 1.5 bytes/string, but in return memcpy_P and strcpy_P will work 4~8x faster
; ;   // Allow users to override the alignment with PSTR_ALIGN
; ;   #define PSTR_ALIGN 4
; ; #endif
; ; #ifndef PSTRN
; ;     // Multi-alignment variant of PSTR, n controls the alignment and should typically be 1 or 4
; ;     // Adapted from AVR-specific code at https://forum.arduino.cc/index.php?topic=194603.0
; ;     // Uses C attribute section instead of ASM block to allow for C language string concatenation ("x" "y" === "xy")
; ;     #define PSTR(s) (__extension__({static const char __c[] __attribute__((__aligned__(4))) __attribute__((section( "\".irom0.pstr." __FILE__ "." __STRINGIZE(__LINE__) "."  __STRINGIZE(__COUNTER__) "\", \"aSM\", @progbits, 1 #"))) = (s); &__c[0];}))
; ;     #define PSTRN(s,n) (__extension__({static const char __c[] __attribute__((__aligned__(n))) __attribute__((section( "\".irom0.pstr." __FILE__ "." __STRINGIZE(__LINE__) "."  __STRINGIZE(__COUNTER__) "\", \"aSM\", @progbits, 1 #"))) = (s); &__c[0];}))
; ; #endif
; ; #ifndef PSTR
; ;   // PSTR() uses the default alignment defined by PSTR_ALIGN
; ;   #define PSTR(s) PSTRN(s,PSTR_ALIGN)
; ; #endif
; ; #ifndef PSTR4
; ;   // PSTR4() enforces 4-bytes alignment whatever the value of PSTR_ALIGN
; ;   // as required by functions like ets_strlen() or ets_memcpy()
; ;   #define PSTR4(s) PSTRN(s,4)
; ; #endif
