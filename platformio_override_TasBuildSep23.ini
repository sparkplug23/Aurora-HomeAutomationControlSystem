





; [tasmotaB]
; ; *** Settings here do NOT affect firmware building ***
; ; Uncomment if you do NOT want gzipped map file(s)
; ;disable_map_gz = 1
; ; Uncomment and specify a folder where to place the map file(s) (default set to folder build_output)
; ;map_dir = /tmp/map_files/
; ; Uncomment if you do NOT want additionally gzipped firmware file(s) at all
; ;disable_bin_gz = 1
; ; Uncomment if you want additionally gzipped esp32x firmware file(s)
; ;enable_esp32_gz = 1
; ; Uncomment and specify a folder where to place the firmware file(s) (default set to folder build_output)
; ;bin_dir = /tmp/bin_files/

; [scripts_defaultsB]
; extra_scripts               = pre:pio-toolsB/pre_source_dir.py
;                               pre:pio-toolsB/set_partition_table.py
;                               pre:pio-toolsB/override_copy.py
;                               post:pio-toolsB/strip-floats.py



; [esp_defaultsB]
; extra_scripts               = post:pio-toolsB/name-firmware.py
;                               post:pio-toolsB/gzip-firmware.py
;                               post:pio-toolsB/metrics-firmware.py
;                               post:pio-toolsB/custom_target.py
; ;                              post:pio-tools/obj-dump.py
;                               ${scripts_defaultsB.extra_scripts}
; ; *** remove undesired all warnings
; build_unflags               = -Wall
; ;                              -mtarget-align
;                               -Wdeprecated-declarations
; build_flags                 = -DCORE_DEBUG_LEVEL=0
;                               -Wl,-Map,firmware.map
;                               -Wno-deprecated-declarations
; ;                              -mno-target-align
;                               -mtarget-align
;                               -free
;                               -fipa-pta
;                               -Wreturn-type
;                               -DTASMOTA  ; flag indicating that we are compiling Tasmota
; ; *********************************************************************
; ; *** Use custom settings from file user_config_override.h
;                               -DUSE_CONFIG_OVERRIDE
; ; *********************************************************************

; [esp82xx_defaultsB]
; extra_scripts               = ${esp_defaultsB.extra_scripts}
; build_flags                 = ${esp_defaultsB.build_flags}
;                               -DNDEBUG
;                               -DFP_IN_IROM
;                               -DBEARSSL_SSL_BASIC
;                               ; NONOSDK22x_190703 = 2.2.2-dev(38a443e)
;                               -DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
;                               -DPIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
;                               ; -DPIO_FRAMEWORK_ARDUINO_LWIP2_IPV6_HIGHER_BANDWIDTH -DUSE_IPV6 ; enables IPv6
;                               ; VTABLES in Flash
;                               -DVTABLES_IN_FLASH
;                               ; remove the 4-bytes alignment for PSTR()
;                               -DPSTR_ALIGN=1
;                               ; restrict to minimal mime-types
;                               -DMIMETYPE_MINIMAL
;                               ; uncomment the following to enable TLS with 4096 RSA certificates
;                               ;-DUSE_4K_RSA


; [coreB]
; ; *** Esp8266 Tasmota modified Arduino core based on core 2.7.4. Added Backport for PWM selection
; platform                    = https://github.com/tasmota/platform-espressif8266/releases/download/2023.04.00/platform-espressif8266.zip
; platform_packages           =
; build_unflags               = ${esp_defaultsB.build_unflags}
; build_flags                 = ${esp82xx_defaultsB.build_flags}
; ; *** Use ONE of the two PWM variants. Tasmota default is Locked PWM
;                               ;-DWAVEFORM_LOCKED_PHASE
;                               -DWAVEFORM_LOCKED_PWM


; [commonB]
; platform                    = ${coreB.platform}
; platform_packages           = ${coreB.platform_packages}
; framework                   = arduino
; board                       = esp8266_1M
; board_build.filesystem      = littlefs
; custom_unpack_dir           = unpacked_littlefs
; build_unflags               = ${coreB.build_unflags}
; build_flags                 = ${coreB.build_flags}
; monitor_speed               = 115200
; monitor_echo                = yes
; ; *** Upload Serial reset method for Wemos and NodeMCU
; upload_resetmethod          = nodemcu
; extra_scripts               = ${esp_defaultsB.extra_scripts}
; lib_archive                 = no
; lib_ldf_mode                = chain
; lib_compat_mode             = strict
; shared_libdeps_dir          = lib
; lib_extra_dirs              =
;                               lib/lib_basic
;                               lib/lib_i2c
;                               lib/lib_display
;                               lib/lib_ssl
;                               lib/lib_audio
;                               lib/lib_rf
;                               lib/lib_div

; [esp32_defaultsB]
; build_unflags               = ${esp_defaultsB.build_unflags}
;                               -Wswitch-unreachable
;                               -Wstringop-overflow
;                               -Wincompatible-pointer-types
;                               -Wnonnull-compare
;                               -fexceptions
;                               -fno-lto
;                               -Wpointer-arith
; build_flags                 = ${esp_defaultsB.build_flags}
;                               ; comment next line to disable IPv6 support
;                               -DUSE_IPV6
;                               -Wno-switch-unreachable
;                               -Wno-stringop-overflow
;                               -fno-exceptions
;                               -flto=auto
;                               -DBUFFER_LENGTH=128
;                               -DHTTP_UPLOAD_BUFLEN=2048
;                               -DMQTT_MAX_PACKET_SIZE=1200
;                               -Duint32=uint32_t
;                               -Duint16=uint16_t
;                               -Duint8=uint8_t
;                               -Dsint8_t=int8_t
;                               -Dsint32_t=int32_t
;                               -Dsint16_t=int16_t
;                               -Dmemcpy_P=memcpy
;                               -Dmemcmp_P=memcmp
;                               ;for TLS we can afford compiling for 4K RSA keys
;                               -DUSE_4K_RSA
;                               -I$PROJECT_DIR/include
;                               -include "sdkconfig.h"
;                               -include "esp32x_fixes.h"
;                               ; wrappers for the crash-recorder
;                               -Wl,--wrap=panicHandler -Wl,--wrap=xt_unhandled_exception
;                               -Wl,--wrap=_Z11analogWritehi  ; `analogWrite(unsigned char, int)` use the Tasmota version of analogWrite for deeper integration and phase control
;                               -Wl,--wrap=ledcReadFreq  ; `uint32_t ledcReadFreq(uint8_t chan)`
; extra_scripts               = pre:pio-toolsB/add_c_flags.py
;                               pre:pio-toolsB/get_flash_size.py
;                               pre:pio-toolsB/gen-berry-structures.py
;                               post:pio-toolsB/post_esp32.py
;                               ${esp_defaultsB.extra_scripts}


; [core32B]
; platform                    = https://github.com/tasmota/platform-espressif32/releases/download/2023.10.03/platform-espressif32.zip
; platform_packages           =
; build_unflags               = ${esp32_defaultsB.build_unflags}
; build_flags                 = ${esp32_defaultsB.build_flags}



; [env:tasmota32_baseB]
; framework               = ${commonB.framework}
; platform                = ${core32B.platform}
; platform_packages       = ${core32B.platform_packages}
; board_build.filesystem  = ${commonB.board_build.filesystem}
; custom_unpack_dir       = ${commonB.custom_unpack_dir}
; board                   = esp32
; ; board                   = esp32dev
; monitor_speed           = ${commonB.monitor_speed}
; monitor_echo            = ${commonB.monitor_echo}
; upload_resetmethod      = ${commonB.upload_resetmethod}
; extra_scripts           = ${esp32_defaultsB.extra_scripts}
; build_unflags           = ${core32B.build_unflags}
; build_flags             = ${core32B.build_flags}
; lib_ldf_mode            = ${commonB.lib_ldf_mode}
; lib_compat_mode         = ${commonB.lib_compat_mode}
; lib_extra_dirs          = ${commonB.lib_extra_dirs}
;                           lib/libesp32
;                           lib/libesp32_lvgl
;                           lib/libesp32_audio
; lib_ignore              =
;                           HTTPUpdateServer
;                           ESP RainMaker
;                           WiFiProv
;                           USB
;                           SPIFFS
;                           ESP32 Azure IoT Arduino
;                           ESP32 Async UDP
;                           ESP32 BLE Arduino
;                           esp-nimble-cpp
;                           SimpleBLE
;                           NetBIOS
;                           ESP32
;                           Preferences
;                           BluetoothSerial
;                           ArduinoOTA
; ; Add files to Filesystem for all env (global). Remove no files entry and add add a line with the file to include
; ; Example for adding the Partition Manager
; ; custom_files_upload =
; ; tasmota/berry/modules/Partition_Manager.tapp
; custom_files_upload     = no_files

; [env:tb_settings_storage2]
; extends                 = env:tasmota32_baseB
; build_flags             = ${env:tasmota32_baseB.build_flags}
;                           -DFIRMWARE_TASMOTA32
;                           -DOTA_URL='"http://ota.tasmota.com/tasmota32/release/tasmota32.bin"'
;                           -D DEVICE_TESTBED__SETTINGS_STORING
;                           -D D_USER_MICHAEL
;                           -w                                     
; lib_extra_dirs = 
;               ; ${commonB.lib_extra_dirs}
;               lib/libesp32
;               lib/lib_basic
;               lib/lib_json
;               lib/lib_network
;               lib/lib_display
;               lib/lib_onewire2023 
;               lib/lib_sensor
;               lib/libg_neopixel
;               lib/lib_irremote
;               lib/lib_rf_extended
;               lib/lib_wled32
;               lib/lib_custom
;               lib/libg_neopixel
; ; monitor_filters = esp32_exception_decoder
; ; build_type = debug
; upload_port = COM10
; ; upload_port = 192.168.0.43
; ; upload_port = bedroomsensor.local
; ; upload_protocol = espota






















